/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ElasticEmail.Client;
using ElasticEmail.Model;

namespace ElasticEmail.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// View Email
        /// </summary>
        /// <remarks>
        /// Returns email details for viewing or rendering. Required Access Level: None
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgid">Message identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailData</returns>
        EmailData EmailsByMsgidViewGet(string msgid, int operationIndex = 0);

        /// <summary>
        /// View Email
        /// </summary>
        /// <remarks>
        /// Returns email details for viewing or rendering. Required Access Level: None
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgid">Message identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailData</returns>
        ApiResponse<EmailData> EmailsByMsgidViewGetWithHttpInfo(string msgid, int operationIndex = 0);
        /// <summary>
        /// Get Status
        /// </summary>
        /// <remarks>
        /// Get status details of an email transaction. Required Access Level: ViewReports
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionid">Transaction identifier</param>
        /// <param name="showFailed">Include Bounced email addresses. (optional, default to false)</param>
        /// <param name="showSent">Include Sent email addresses. (optional, default to false)</param>
        /// <param name="showDelivered">Include all delivered email addresses. (optional, default to false)</param>
        /// <param name="showPending">Include Ready to send email addresses. (optional, default to false)</param>
        /// <param name="showOpened">Include Opened email addresses. (optional, default to false)</param>
        /// <param name="showClicked">Include Clicked email addresses. (optional, default to false)</param>
        /// <param name="showAbuse">Include Reported as abuse email addresses. (optional, default to false)</param>
        /// <param name="showUnsubscribed">Include Unsubscribed email addresses. (optional, default to false)</param>
        /// <param name="showErrors">Include error messages for bounced emails. (optional, default to false)</param>
        /// <param name="showMessageIDs">Include all MessageIDs for this transaction (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailJobStatus</returns>
        EmailJobStatus EmailsByTransactionidStatusGet(string transactionid, bool? showFailed = default(bool?), bool? showSent = default(bool?), bool? showDelivered = default(bool?), bool? showPending = default(bool?), bool? showOpened = default(bool?), bool? showClicked = default(bool?), bool? showAbuse = default(bool?), bool? showUnsubscribed = default(bool?), bool? showErrors = default(bool?), bool? showMessageIDs = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get Status
        /// </summary>
        /// <remarks>
        /// Get status details of an email transaction. Required Access Level: ViewReports
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionid">Transaction identifier</param>
        /// <param name="showFailed">Include Bounced email addresses. (optional, default to false)</param>
        /// <param name="showSent">Include Sent email addresses. (optional, default to false)</param>
        /// <param name="showDelivered">Include all delivered email addresses. (optional, default to false)</param>
        /// <param name="showPending">Include Ready to send email addresses. (optional, default to false)</param>
        /// <param name="showOpened">Include Opened email addresses. (optional, default to false)</param>
        /// <param name="showClicked">Include Clicked email addresses. (optional, default to false)</param>
        /// <param name="showAbuse">Include Reported as abuse email addresses. (optional, default to false)</param>
        /// <param name="showUnsubscribed">Include Unsubscribed email addresses. (optional, default to false)</param>
        /// <param name="showErrors">Include error messages for bounced emails. (optional, default to false)</param>
        /// <param name="showMessageIDs">Include all MessageIDs for this transaction (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailJobStatus</returns>
        ApiResponse<EmailJobStatus> EmailsByTransactionidStatusGetWithHttpInfo(string transactionid, bool? showFailed = default(bool?), bool? showSent = default(bool?), bool? showDelivered = default(bool?), bool? showPending = default(bool?), bool? showOpened = default(bool?), bool? showClicked = default(bool?), bool? showAbuse = default(bool?), bool? showUnsubscribed = default(bool?), bool? showErrors = default(bool?), bool? showMessageIDs = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Send Bulk Emails CSV
        /// </summary>
        /// <remarks>
        /// Send bulk merge email. Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeEmailPayload">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailSend</returns>
        EmailSend EmailsMergefilePost(MergeEmailPayload mergeEmailPayload, int operationIndex = 0);

        /// <summary>
        /// Send Bulk Emails CSV
        /// </summary>
        /// <remarks>
        /// Send bulk merge email. Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeEmailPayload">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailSend</returns>
        ApiResponse<EmailSend> EmailsMergefilePostWithHttpInfo(MergeEmailPayload mergeEmailPayload, int operationIndex = 0);
        /// <summary>
        /// Send Bulk Emails
        /// </summary>
        /// <remarks>
        /// Send bulk merge email. Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailMessageData">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailSend</returns>
        EmailSend EmailsPost(EmailMessageData emailMessageData, int operationIndex = 0);

        /// <summary>
        /// Send Bulk Emails
        /// </summary>
        /// <remarks>
        /// Send bulk merge email. Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailMessageData">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailSend</returns>
        ApiResponse<EmailSend> EmailsPostWithHttpInfo(EmailMessageData emailMessageData, int operationIndex = 0);
        /// <summary>
        /// Send Transactional Email
        /// </summary>
        /// <remarks>
        /// Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTransactionalMessageData">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailSend</returns>
        EmailSend EmailsTransactionalPost(EmailTransactionalMessageData emailTransactionalMessageData, int operationIndex = 0);

        /// <summary>
        /// Send Transactional Email
        /// </summary>
        /// <remarks>
        /// Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTransactionalMessageData">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailSend</returns>
        ApiResponse<EmailSend> EmailsTransactionalPostWithHttpInfo(EmailTransactionalMessageData emailTransactionalMessageData, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// View Email
        /// </summary>
        /// <remarks>
        /// Returns email details for viewing or rendering. Required Access Level: None
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgid">Message identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailData</returns>
        System.Threading.Tasks.Task<EmailData> EmailsByMsgidViewGetAsync(string msgid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View Email
        /// </summary>
        /// <remarks>
        /// Returns email details for viewing or rendering. Required Access Level: None
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgid">Message identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailData)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailData>> EmailsByMsgidViewGetWithHttpInfoAsync(string msgid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Status
        /// </summary>
        /// <remarks>
        /// Get status details of an email transaction. Required Access Level: ViewReports
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionid">Transaction identifier</param>
        /// <param name="showFailed">Include Bounced email addresses. (optional, default to false)</param>
        /// <param name="showSent">Include Sent email addresses. (optional, default to false)</param>
        /// <param name="showDelivered">Include all delivered email addresses. (optional, default to false)</param>
        /// <param name="showPending">Include Ready to send email addresses. (optional, default to false)</param>
        /// <param name="showOpened">Include Opened email addresses. (optional, default to false)</param>
        /// <param name="showClicked">Include Clicked email addresses. (optional, default to false)</param>
        /// <param name="showAbuse">Include Reported as abuse email addresses. (optional, default to false)</param>
        /// <param name="showUnsubscribed">Include Unsubscribed email addresses. (optional, default to false)</param>
        /// <param name="showErrors">Include error messages for bounced emails. (optional, default to false)</param>
        /// <param name="showMessageIDs">Include all MessageIDs for this transaction (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailJobStatus</returns>
        System.Threading.Tasks.Task<EmailJobStatus> EmailsByTransactionidStatusGetAsync(string transactionid, bool? showFailed = default(bool?), bool? showSent = default(bool?), bool? showDelivered = default(bool?), bool? showPending = default(bool?), bool? showOpened = default(bool?), bool? showClicked = default(bool?), bool? showAbuse = default(bool?), bool? showUnsubscribed = default(bool?), bool? showErrors = default(bool?), bool? showMessageIDs = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Status
        /// </summary>
        /// <remarks>
        /// Get status details of an email transaction. Required Access Level: ViewReports
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionid">Transaction identifier</param>
        /// <param name="showFailed">Include Bounced email addresses. (optional, default to false)</param>
        /// <param name="showSent">Include Sent email addresses. (optional, default to false)</param>
        /// <param name="showDelivered">Include all delivered email addresses. (optional, default to false)</param>
        /// <param name="showPending">Include Ready to send email addresses. (optional, default to false)</param>
        /// <param name="showOpened">Include Opened email addresses. (optional, default to false)</param>
        /// <param name="showClicked">Include Clicked email addresses. (optional, default to false)</param>
        /// <param name="showAbuse">Include Reported as abuse email addresses. (optional, default to false)</param>
        /// <param name="showUnsubscribed">Include Unsubscribed email addresses. (optional, default to false)</param>
        /// <param name="showErrors">Include error messages for bounced emails. (optional, default to false)</param>
        /// <param name="showMessageIDs">Include all MessageIDs for this transaction (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailJobStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailJobStatus>> EmailsByTransactionidStatusGetWithHttpInfoAsync(string transactionid, bool? showFailed = default(bool?), bool? showSent = default(bool?), bool? showDelivered = default(bool?), bool? showPending = default(bool?), bool? showOpened = default(bool?), bool? showClicked = default(bool?), bool? showAbuse = default(bool?), bool? showUnsubscribed = default(bool?), bool? showErrors = default(bool?), bool? showMessageIDs = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send Bulk Emails CSV
        /// </summary>
        /// <remarks>
        /// Send bulk merge email. Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeEmailPayload">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSend</returns>
        System.Threading.Tasks.Task<EmailSend> EmailsMergefilePostAsync(MergeEmailPayload mergeEmailPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send Bulk Emails CSV
        /// </summary>
        /// <remarks>
        /// Send bulk merge email. Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeEmailPayload">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSend)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSend>> EmailsMergefilePostWithHttpInfoAsync(MergeEmailPayload mergeEmailPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send Bulk Emails
        /// </summary>
        /// <remarks>
        /// Send bulk merge email. Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailMessageData">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSend</returns>
        System.Threading.Tasks.Task<EmailSend> EmailsPostAsync(EmailMessageData emailMessageData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send Bulk Emails
        /// </summary>
        /// <remarks>
        /// Send bulk merge email. Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailMessageData">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSend)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSend>> EmailsPostWithHttpInfoAsync(EmailMessageData emailMessageData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send Transactional Email
        /// </summary>
        /// <remarks>
        /// Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTransactionalMessageData">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSend</returns>
        System.Threading.Tasks.Task<EmailSend> EmailsTransactionalPostAsync(EmailTransactionalMessageData emailTransactionalMessageData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send Transactional Email
        /// </summary>
        /// <remarks>
        /// Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTransactionalMessageData">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSend)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSend>> EmailsTransactionalPostWithHttpInfoAsync(EmailTransactionalMessageData emailTransactionalMessageData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailsApi : IEmailsApiSync, IEmailsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmailsApi : IEmailsApi
    {
        private ElasticEmail.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailsApi(string basePath)
        {
            this.Configuration = ElasticEmail.Client.Configuration.MergeConfigurations(
                ElasticEmail.Client.GlobalConfiguration.Instance,
                new ElasticEmail.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmailsApi(ElasticEmail.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ElasticEmail.Client.Configuration.MergeConfigurations(
                ElasticEmail.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EmailsApi(ElasticEmail.Client.ISynchronousClient client, ElasticEmail.Client.IAsynchronousClient asyncClient, ElasticEmail.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ElasticEmail.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ElasticEmail.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ElasticEmail.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ElasticEmail.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// View Email Returns email details for viewing or rendering. Required Access Level: None
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgid">Message identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailData</returns>
        public EmailData EmailsByMsgidViewGet(string msgid, int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<EmailData> localVarResponse = EmailsByMsgidViewGetWithHttpInfo(msgid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View Email Returns email details for viewing or rendering. Required Access Level: None
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgid">Message identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailData</returns>
        public ElasticEmail.Client.ApiResponse<EmailData> EmailsByMsgidViewGetWithHttpInfo(string msgid, int operationIndex = 0)
        {
            // verify the required parameter 'msgid' is set
            if (msgid == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'msgid' when calling EmailsApi->EmailsByMsgidViewGet");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("msgid", ElasticEmail.Client.ClientUtils.ParameterToString(msgid)); // path parameter

            localVarRequestOptions.Operation = "EmailsApi.EmailsByMsgidViewGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmailData>("/emails/{msgid}/view", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailsByMsgidViewGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View Email Returns email details for viewing or rendering. Required Access Level: None
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgid">Message identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailData</returns>
        public async System.Threading.Tasks.Task<EmailData> EmailsByMsgidViewGetAsync(string msgid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<EmailData> localVarResponse = await EmailsByMsgidViewGetWithHttpInfoAsync(msgid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View Email Returns email details for viewing or rendering. Required Access Level: None
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgid">Message identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailData)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<EmailData>> EmailsByMsgidViewGetWithHttpInfoAsync(string msgid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'msgid' is set
            if (msgid == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'msgid' when calling EmailsApi->EmailsByMsgidViewGet");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("msgid", ElasticEmail.Client.ClientUtils.ParameterToString(msgid)); // path parameter

            localVarRequestOptions.Operation = "EmailsApi.EmailsByMsgidViewGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailData>("/emails/{msgid}/view", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailsByMsgidViewGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Status Get status details of an email transaction. Required Access Level: ViewReports
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionid">Transaction identifier</param>
        /// <param name="showFailed">Include Bounced email addresses. (optional, default to false)</param>
        /// <param name="showSent">Include Sent email addresses. (optional, default to false)</param>
        /// <param name="showDelivered">Include all delivered email addresses. (optional, default to false)</param>
        /// <param name="showPending">Include Ready to send email addresses. (optional, default to false)</param>
        /// <param name="showOpened">Include Opened email addresses. (optional, default to false)</param>
        /// <param name="showClicked">Include Clicked email addresses. (optional, default to false)</param>
        /// <param name="showAbuse">Include Reported as abuse email addresses. (optional, default to false)</param>
        /// <param name="showUnsubscribed">Include Unsubscribed email addresses. (optional, default to false)</param>
        /// <param name="showErrors">Include error messages for bounced emails. (optional, default to false)</param>
        /// <param name="showMessageIDs">Include all MessageIDs for this transaction (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailJobStatus</returns>
        public EmailJobStatus EmailsByTransactionidStatusGet(string transactionid, bool? showFailed = default(bool?), bool? showSent = default(bool?), bool? showDelivered = default(bool?), bool? showPending = default(bool?), bool? showOpened = default(bool?), bool? showClicked = default(bool?), bool? showAbuse = default(bool?), bool? showUnsubscribed = default(bool?), bool? showErrors = default(bool?), bool? showMessageIDs = default(bool?), int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<EmailJobStatus> localVarResponse = EmailsByTransactionidStatusGetWithHttpInfo(transactionid, showFailed, showSent, showDelivered, showPending, showOpened, showClicked, showAbuse, showUnsubscribed, showErrors, showMessageIDs);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Status Get status details of an email transaction. Required Access Level: ViewReports
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionid">Transaction identifier</param>
        /// <param name="showFailed">Include Bounced email addresses. (optional, default to false)</param>
        /// <param name="showSent">Include Sent email addresses. (optional, default to false)</param>
        /// <param name="showDelivered">Include all delivered email addresses. (optional, default to false)</param>
        /// <param name="showPending">Include Ready to send email addresses. (optional, default to false)</param>
        /// <param name="showOpened">Include Opened email addresses. (optional, default to false)</param>
        /// <param name="showClicked">Include Clicked email addresses. (optional, default to false)</param>
        /// <param name="showAbuse">Include Reported as abuse email addresses. (optional, default to false)</param>
        /// <param name="showUnsubscribed">Include Unsubscribed email addresses. (optional, default to false)</param>
        /// <param name="showErrors">Include error messages for bounced emails. (optional, default to false)</param>
        /// <param name="showMessageIDs">Include all MessageIDs for this transaction (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailJobStatus</returns>
        public ElasticEmail.Client.ApiResponse<EmailJobStatus> EmailsByTransactionidStatusGetWithHttpInfo(string transactionid, bool? showFailed = default(bool?), bool? showSent = default(bool?), bool? showDelivered = default(bool?), bool? showPending = default(bool?), bool? showOpened = default(bool?), bool? showClicked = default(bool?), bool? showAbuse = default(bool?), bool? showUnsubscribed = default(bool?), bool? showErrors = default(bool?), bool? showMessageIDs = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'transactionid' is set
            if (transactionid == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'transactionid' when calling EmailsApi->EmailsByTransactionidStatusGet");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transactionid", ElasticEmail.Client.ClientUtils.ParameterToString(transactionid)); // path parameter
            if (showFailed != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "showFailed", showFailed));
            }
            if (showSent != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "showSent", showSent));
            }
            if (showDelivered != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "showDelivered", showDelivered));
            }
            if (showPending != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "showPending", showPending));
            }
            if (showOpened != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "showOpened", showOpened));
            }
            if (showClicked != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "showClicked", showClicked));
            }
            if (showAbuse != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "showAbuse", showAbuse));
            }
            if (showUnsubscribed != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "showUnsubscribed", showUnsubscribed));
            }
            if (showErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "showErrors", showErrors));
            }
            if (showMessageIDs != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "showMessageIDs", showMessageIDs));
            }

            localVarRequestOptions.Operation = "EmailsApi.EmailsByTransactionidStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmailJobStatus>("/emails/{transactionid}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailsByTransactionidStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Status Get status details of an email transaction. Required Access Level: ViewReports
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionid">Transaction identifier</param>
        /// <param name="showFailed">Include Bounced email addresses. (optional, default to false)</param>
        /// <param name="showSent">Include Sent email addresses. (optional, default to false)</param>
        /// <param name="showDelivered">Include all delivered email addresses. (optional, default to false)</param>
        /// <param name="showPending">Include Ready to send email addresses. (optional, default to false)</param>
        /// <param name="showOpened">Include Opened email addresses. (optional, default to false)</param>
        /// <param name="showClicked">Include Clicked email addresses. (optional, default to false)</param>
        /// <param name="showAbuse">Include Reported as abuse email addresses. (optional, default to false)</param>
        /// <param name="showUnsubscribed">Include Unsubscribed email addresses. (optional, default to false)</param>
        /// <param name="showErrors">Include error messages for bounced emails. (optional, default to false)</param>
        /// <param name="showMessageIDs">Include all MessageIDs for this transaction (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailJobStatus</returns>
        public async System.Threading.Tasks.Task<EmailJobStatus> EmailsByTransactionidStatusGetAsync(string transactionid, bool? showFailed = default(bool?), bool? showSent = default(bool?), bool? showDelivered = default(bool?), bool? showPending = default(bool?), bool? showOpened = default(bool?), bool? showClicked = default(bool?), bool? showAbuse = default(bool?), bool? showUnsubscribed = default(bool?), bool? showErrors = default(bool?), bool? showMessageIDs = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<EmailJobStatus> localVarResponse = await EmailsByTransactionidStatusGetWithHttpInfoAsync(transactionid, showFailed, showSent, showDelivered, showPending, showOpened, showClicked, showAbuse, showUnsubscribed, showErrors, showMessageIDs, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Status Get status details of an email transaction. Required Access Level: ViewReports
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionid">Transaction identifier</param>
        /// <param name="showFailed">Include Bounced email addresses. (optional, default to false)</param>
        /// <param name="showSent">Include Sent email addresses. (optional, default to false)</param>
        /// <param name="showDelivered">Include all delivered email addresses. (optional, default to false)</param>
        /// <param name="showPending">Include Ready to send email addresses. (optional, default to false)</param>
        /// <param name="showOpened">Include Opened email addresses. (optional, default to false)</param>
        /// <param name="showClicked">Include Clicked email addresses. (optional, default to false)</param>
        /// <param name="showAbuse">Include Reported as abuse email addresses. (optional, default to false)</param>
        /// <param name="showUnsubscribed">Include Unsubscribed email addresses. (optional, default to false)</param>
        /// <param name="showErrors">Include error messages for bounced emails. (optional, default to false)</param>
        /// <param name="showMessageIDs">Include all MessageIDs for this transaction (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailJobStatus)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<EmailJobStatus>> EmailsByTransactionidStatusGetWithHttpInfoAsync(string transactionid, bool? showFailed = default(bool?), bool? showSent = default(bool?), bool? showDelivered = default(bool?), bool? showPending = default(bool?), bool? showOpened = default(bool?), bool? showClicked = default(bool?), bool? showAbuse = default(bool?), bool? showUnsubscribed = default(bool?), bool? showErrors = default(bool?), bool? showMessageIDs = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionid' is set
            if (transactionid == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'transactionid' when calling EmailsApi->EmailsByTransactionidStatusGet");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transactionid", ElasticEmail.Client.ClientUtils.ParameterToString(transactionid)); // path parameter
            if (showFailed != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "showFailed", showFailed));
            }
            if (showSent != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "showSent", showSent));
            }
            if (showDelivered != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "showDelivered", showDelivered));
            }
            if (showPending != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "showPending", showPending));
            }
            if (showOpened != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "showOpened", showOpened));
            }
            if (showClicked != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "showClicked", showClicked));
            }
            if (showAbuse != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "showAbuse", showAbuse));
            }
            if (showUnsubscribed != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "showUnsubscribed", showUnsubscribed));
            }
            if (showErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "showErrors", showErrors));
            }
            if (showMessageIDs != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "showMessageIDs", showMessageIDs));
            }

            localVarRequestOptions.Operation = "EmailsApi.EmailsByTransactionidStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailJobStatus>("/emails/{transactionid}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailsByTransactionidStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Bulk Emails CSV Send bulk merge email. Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeEmailPayload">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailSend</returns>
        public EmailSend EmailsMergefilePost(MergeEmailPayload mergeEmailPayload, int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<EmailSend> localVarResponse = EmailsMergefilePostWithHttpInfo(mergeEmailPayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Bulk Emails CSV Send bulk merge email. Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeEmailPayload">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailSend</returns>
        public ElasticEmail.Client.ApiResponse<EmailSend> EmailsMergefilePostWithHttpInfo(MergeEmailPayload mergeEmailPayload, int operationIndex = 0)
        {
            // verify the required parameter 'mergeEmailPayload' is set
            if (mergeEmailPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'mergeEmailPayload' when calling EmailsApi->EmailsMergefilePost");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = mergeEmailPayload;

            localVarRequestOptions.Operation = "EmailsApi.EmailsMergefilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EmailSend>("/emails/mergefile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailsMergefilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Bulk Emails CSV Send bulk merge email. Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeEmailPayload">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSend</returns>
        public async System.Threading.Tasks.Task<EmailSend> EmailsMergefilePostAsync(MergeEmailPayload mergeEmailPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<EmailSend> localVarResponse = await EmailsMergefilePostWithHttpInfoAsync(mergeEmailPayload, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Bulk Emails CSV Send bulk merge email. Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeEmailPayload">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSend)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<EmailSend>> EmailsMergefilePostWithHttpInfoAsync(MergeEmailPayload mergeEmailPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'mergeEmailPayload' is set
            if (mergeEmailPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'mergeEmailPayload' when calling EmailsApi->EmailsMergefilePost");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = mergeEmailPayload;

            localVarRequestOptions.Operation = "EmailsApi.EmailsMergefilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EmailSend>("/emails/mergefile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailsMergefilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Bulk Emails Send bulk merge email. Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailMessageData">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailSend</returns>
        public EmailSend EmailsPost(EmailMessageData emailMessageData, int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<EmailSend> localVarResponse = EmailsPostWithHttpInfo(emailMessageData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Bulk Emails Send bulk merge email. Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailMessageData">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailSend</returns>
        public ElasticEmail.Client.ApiResponse<EmailSend> EmailsPostWithHttpInfo(EmailMessageData emailMessageData, int operationIndex = 0)
        {
            // verify the required parameter 'emailMessageData' is set
            if (emailMessageData == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'emailMessageData' when calling EmailsApi->EmailsPost");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = emailMessageData;

            localVarRequestOptions.Operation = "EmailsApi.EmailsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EmailSend>("/emails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Bulk Emails Send bulk merge email. Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailMessageData">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSend</returns>
        public async System.Threading.Tasks.Task<EmailSend> EmailsPostAsync(EmailMessageData emailMessageData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<EmailSend> localVarResponse = await EmailsPostWithHttpInfoAsync(emailMessageData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Bulk Emails Send bulk merge email. Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailMessageData">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSend)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<EmailSend>> EmailsPostWithHttpInfoAsync(EmailMessageData emailMessageData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'emailMessageData' is set
            if (emailMessageData == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'emailMessageData' when calling EmailsApi->EmailsPost");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = emailMessageData;

            localVarRequestOptions.Operation = "EmailsApi.EmailsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EmailSend>("/emails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Transactional Email Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTransactionalMessageData">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailSend</returns>
        public EmailSend EmailsTransactionalPost(EmailTransactionalMessageData emailTransactionalMessageData, int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<EmailSend> localVarResponse = EmailsTransactionalPostWithHttpInfo(emailTransactionalMessageData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Transactional Email Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTransactionalMessageData">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailSend</returns>
        public ElasticEmail.Client.ApiResponse<EmailSend> EmailsTransactionalPostWithHttpInfo(EmailTransactionalMessageData emailTransactionalMessageData, int operationIndex = 0)
        {
            // verify the required parameter 'emailTransactionalMessageData' is set
            if (emailTransactionalMessageData == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'emailTransactionalMessageData' when calling EmailsApi->EmailsTransactionalPost");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = emailTransactionalMessageData;

            localVarRequestOptions.Operation = "EmailsApi.EmailsTransactionalPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EmailSend>("/emails/transactional", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailsTransactionalPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Transactional Email Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTransactionalMessageData">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSend</returns>
        public async System.Threading.Tasks.Task<EmailSend> EmailsTransactionalPostAsync(EmailTransactionalMessageData emailTransactionalMessageData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<EmailSend> localVarResponse = await EmailsTransactionalPostWithHttpInfoAsync(emailTransactionalMessageData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Transactional Email Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTransactionalMessageData">Email data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSend)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<EmailSend>> EmailsTransactionalPostWithHttpInfoAsync(EmailTransactionalMessageData emailTransactionalMessageData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'emailTransactionalMessageData' is set
            if (emailTransactionalMessageData == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'emailTransactionalMessageData' when calling EmailsApi->EmailsTransactionalPost");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = emailTransactionalMessageData;

            localVarRequestOptions.Operation = "EmailsApi.EmailsTransactionalPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EmailSend>("/emails/transactional", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailsTransactionalPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
