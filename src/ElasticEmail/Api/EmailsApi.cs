/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ElasticEmail.Client;
using ElasticEmail.Model;

namespace ElasticEmail.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// View Email
        /// </summary>
        /// <remarks>
        /// Returns email details for viewing or rendering. Required Access Level: None
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgid">Message identifier</param>
        /// <returns>EmailData</returns>
        EmailData EmailsByMsgidViewGet(string msgid);

        /// <summary>
        /// View Email
        /// </summary>
        /// <remarks>
        /// Returns email details for viewing or rendering. Required Access Level: None
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgid">Message identifier</param>
        /// <returns>ApiResponse of EmailData</returns>
        ApiResponse<EmailData> EmailsByMsgidViewGetWithHttpInfo(string msgid);
        /// <summary>
        /// Send Bulk Emails CSV
        /// </summary>
        /// <remarks>
        /// Send bulk merge email. Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeEmailPayload">Email data</param>
        /// <returns>EmailSend</returns>
        EmailSend EmailsMergefilePost(MergeEmailPayload mergeEmailPayload);

        /// <summary>
        /// Send Bulk Emails CSV
        /// </summary>
        /// <remarks>
        /// Send bulk merge email. Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeEmailPayload">Email data</param>
        /// <returns>ApiResponse of EmailSend</returns>
        ApiResponse<EmailSend> EmailsMergefilePostWithHttpInfo(MergeEmailPayload mergeEmailPayload);
        /// <summary>
        /// Send Bulk Emails
        /// </summary>
        /// <remarks>
        /// Send bulk merge email. Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailMessageData">Email data</param>
        /// <returns>EmailSend</returns>
        EmailSend EmailsPost(EmailMessageData emailMessageData);

        /// <summary>
        /// Send Bulk Emails
        /// </summary>
        /// <remarks>
        /// Send bulk merge email. Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailMessageData">Email data</param>
        /// <returns>ApiResponse of EmailSend</returns>
        ApiResponse<EmailSend> EmailsPostWithHttpInfo(EmailMessageData emailMessageData);
        /// <summary>
        /// Send Transactional Email
        /// </summary>
        /// <remarks>
        /// Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTransactionalMessageData">Email data</param>
        /// <returns>EmailSend</returns>
        EmailSend EmailsTransactionalPost(EmailTransactionalMessageData emailTransactionalMessageData);

        /// <summary>
        /// Send Transactional Email
        /// </summary>
        /// <remarks>
        /// Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTransactionalMessageData">Email data</param>
        /// <returns>ApiResponse of EmailSend</returns>
        ApiResponse<EmailSend> EmailsTransactionalPostWithHttpInfo(EmailTransactionalMessageData emailTransactionalMessageData);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// View Email
        /// </summary>
        /// <remarks>
        /// Returns email details for viewing or rendering. Required Access Level: None
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgid">Message identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailData</returns>
        System.Threading.Tasks.Task<EmailData> EmailsByMsgidViewGetAsync(string msgid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View Email
        /// </summary>
        /// <remarks>
        /// Returns email details for viewing or rendering. Required Access Level: None
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgid">Message identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailData)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailData>> EmailsByMsgidViewGetWithHttpInfoAsync(string msgid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send Bulk Emails CSV
        /// </summary>
        /// <remarks>
        /// Send bulk merge email. Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeEmailPayload">Email data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSend</returns>
        System.Threading.Tasks.Task<EmailSend> EmailsMergefilePostAsync(MergeEmailPayload mergeEmailPayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send Bulk Emails CSV
        /// </summary>
        /// <remarks>
        /// Send bulk merge email. Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeEmailPayload">Email data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSend)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSend>> EmailsMergefilePostWithHttpInfoAsync(MergeEmailPayload mergeEmailPayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send Bulk Emails
        /// </summary>
        /// <remarks>
        /// Send bulk merge email. Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailMessageData">Email data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSend</returns>
        System.Threading.Tasks.Task<EmailSend> EmailsPostAsync(EmailMessageData emailMessageData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send Bulk Emails
        /// </summary>
        /// <remarks>
        /// Send bulk merge email. Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailMessageData">Email data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSend)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSend>> EmailsPostWithHttpInfoAsync(EmailMessageData emailMessageData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send Transactional Email
        /// </summary>
        /// <remarks>
        /// Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTransactionalMessageData">Email data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSend</returns>
        System.Threading.Tasks.Task<EmailSend> EmailsTransactionalPostAsync(EmailTransactionalMessageData emailTransactionalMessageData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send Transactional Email
        /// </summary>
        /// <remarks>
        /// Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTransactionalMessageData">Email data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSend)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSend>> EmailsTransactionalPostWithHttpInfoAsync(EmailTransactionalMessageData emailTransactionalMessageData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailsApi : IEmailsApiSync, IEmailsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmailsApi : IEmailsApi
    {
        private ElasticEmail.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailsApi(String basePath)
        {
            this.Configuration = ElasticEmail.Client.Configuration.MergeConfigurations(
                ElasticEmail.Client.GlobalConfiguration.Instance,
                new ElasticEmail.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmailsApi(ElasticEmail.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ElasticEmail.Client.Configuration.MergeConfigurations(
                ElasticEmail.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EmailsApi(ElasticEmail.Client.ISynchronousClient client, ElasticEmail.Client.IAsynchronousClient asyncClient, ElasticEmail.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ElasticEmail.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ElasticEmail.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ElasticEmail.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ElasticEmail.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// View Email Returns email details for viewing or rendering. Required Access Level: None
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgid">Message identifier</param>
        /// <returns>EmailData</returns>
        public EmailData EmailsByMsgidViewGet(string msgid)
        {
            ElasticEmail.Client.ApiResponse<EmailData> localVarResponse = EmailsByMsgidViewGetWithHttpInfo(msgid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View Email Returns email details for viewing or rendering. Required Access Level: None
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgid">Message identifier</param>
        /// <returns>ApiResponse of EmailData</returns>
        public ElasticEmail.Client.ApiResponse<EmailData> EmailsByMsgidViewGetWithHttpInfo(string msgid)
        {
            // verify the required parameter 'msgid' is set
            if (msgid == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'msgid' when calling EmailsApi->EmailsByMsgidViewGet");

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("msgid", ElasticEmail.Client.ClientUtils.ParameterToString(msgid)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmailData>("/emails/{msgid}/view", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailsByMsgidViewGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// View Email Returns email details for viewing or rendering. Required Access Level: None
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgid">Message identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailData</returns>
        public async System.Threading.Tasks.Task<EmailData> EmailsByMsgidViewGetAsync(string msgid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<EmailData> localVarResponse = await EmailsByMsgidViewGetWithHttpInfoAsync(msgid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View Email Returns email details for viewing or rendering. Required Access Level: None
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgid">Message identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailData)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<EmailData>> EmailsByMsgidViewGetWithHttpInfoAsync(string msgid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'msgid' is set
            if (msgid == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'msgid' when calling EmailsApi->EmailsByMsgidViewGet");


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("msgid", ElasticEmail.Client.ClientUtils.ParameterToString(msgid)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailData>("/emails/{msgid}/view", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailsByMsgidViewGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Bulk Emails CSV Send bulk merge email. Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeEmailPayload">Email data</param>
        /// <returns>EmailSend</returns>
        public EmailSend EmailsMergefilePost(MergeEmailPayload mergeEmailPayload)
        {
            ElasticEmail.Client.ApiResponse<EmailSend> localVarResponse = EmailsMergefilePostWithHttpInfo(mergeEmailPayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Bulk Emails CSV Send bulk merge email. Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeEmailPayload">Email data</param>
        /// <returns>ApiResponse of EmailSend</returns>
        public ElasticEmail.Client.ApiResponse<EmailSend> EmailsMergefilePostWithHttpInfo(MergeEmailPayload mergeEmailPayload)
        {
            // verify the required parameter 'mergeEmailPayload' is set
            if (mergeEmailPayload == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'mergeEmailPayload' when calling EmailsApi->EmailsMergefilePost");

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = mergeEmailPayload;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EmailSend>("/emails/mergefile", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailsMergefilePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Bulk Emails CSV Send bulk merge email. Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeEmailPayload">Email data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSend</returns>
        public async System.Threading.Tasks.Task<EmailSend> EmailsMergefilePostAsync(MergeEmailPayload mergeEmailPayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<EmailSend> localVarResponse = await EmailsMergefilePostWithHttpInfoAsync(mergeEmailPayload, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Bulk Emails CSV Send bulk merge email. Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeEmailPayload">Email data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSend)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<EmailSend>> EmailsMergefilePostWithHttpInfoAsync(MergeEmailPayload mergeEmailPayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'mergeEmailPayload' is set
            if (mergeEmailPayload == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'mergeEmailPayload' when calling EmailsApi->EmailsMergefilePost");


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = mergeEmailPayload;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<EmailSend>("/emails/mergefile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailsMergefilePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Bulk Emails Send bulk merge email. Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailMessageData">Email data</param>
        /// <returns>EmailSend</returns>
        public EmailSend EmailsPost(EmailMessageData emailMessageData)
        {
            ElasticEmail.Client.ApiResponse<EmailSend> localVarResponse = EmailsPostWithHttpInfo(emailMessageData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Bulk Emails Send bulk merge email. Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailMessageData">Email data</param>
        /// <returns>ApiResponse of EmailSend</returns>
        public ElasticEmail.Client.ApiResponse<EmailSend> EmailsPostWithHttpInfo(EmailMessageData emailMessageData)
        {
            // verify the required parameter 'emailMessageData' is set
            if (emailMessageData == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'emailMessageData' when calling EmailsApi->EmailsPost");

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = emailMessageData;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EmailSend>("/emails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Bulk Emails Send bulk merge email. Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailMessageData">Email data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSend</returns>
        public async System.Threading.Tasks.Task<EmailSend> EmailsPostAsync(EmailMessageData emailMessageData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<EmailSend> localVarResponse = await EmailsPostWithHttpInfoAsync(emailMessageData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Bulk Emails Send bulk merge email. Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailMessageData">Email data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSend)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<EmailSend>> EmailsPostWithHttpInfoAsync(EmailMessageData emailMessageData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'emailMessageData' is set
            if (emailMessageData == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'emailMessageData' when calling EmailsApi->EmailsPost");


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = emailMessageData;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<EmailSend>("/emails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Transactional Email Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTransactionalMessageData">Email data</param>
        /// <returns>EmailSend</returns>
        public EmailSend EmailsTransactionalPost(EmailTransactionalMessageData emailTransactionalMessageData)
        {
            ElasticEmail.Client.ApiResponse<EmailSend> localVarResponse = EmailsTransactionalPostWithHttpInfo(emailTransactionalMessageData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Transactional Email Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTransactionalMessageData">Email data</param>
        /// <returns>ApiResponse of EmailSend</returns>
        public ElasticEmail.Client.ApiResponse<EmailSend> EmailsTransactionalPostWithHttpInfo(EmailTransactionalMessageData emailTransactionalMessageData)
        {
            // verify the required parameter 'emailTransactionalMessageData' is set
            if (emailTransactionalMessageData == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'emailTransactionalMessageData' when calling EmailsApi->EmailsTransactionalPost");

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = emailTransactionalMessageData;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EmailSend>("/emails/transactional", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailsTransactionalPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Transactional Email Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTransactionalMessageData">Email data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailSend</returns>
        public async System.Threading.Tasks.Task<EmailSend> EmailsTransactionalPostAsync(EmailTransactionalMessageData emailTransactionalMessageData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<EmailSend> localVarResponse = await EmailsTransactionalPostWithHttpInfoAsync(emailTransactionalMessageData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Transactional Email Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailTransactionalMessageData">Email data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailSend)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<EmailSend>> EmailsTransactionalPostWithHttpInfoAsync(EmailTransactionalMessageData emailTransactionalMessageData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'emailTransactionalMessageData' is set
            if (emailTransactionalMessageData == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'emailTransactionalMessageData' when calling EmailsApi->EmailsTransactionalPost");


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = emailTransactionalMessageData;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<EmailSend>("/emails/transactional", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailsTransactionalPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
