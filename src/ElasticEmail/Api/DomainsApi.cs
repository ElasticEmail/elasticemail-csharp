/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ElasticEmail.Client;
using ElasticEmail.Model;

namespace ElasticEmail.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDomainsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Domain
        /// </summary>
        /// <remarks>
        /// Deletes configured domain from Account. Required Access Level: ModifySettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DomainsByDomainDelete(string domain, int operationIndex = 0);

        /// <summary>
        /// Delete Domain
        /// </summary>
        /// <remarks>
        /// Deletes configured domain from Account. Required Access Level: ModifySettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DomainsByDomainDeleteWithHttpInfo(string domain, int operationIndex = 0);
        /// <summary>
        /// Load Domain
        /// </summary>
        /// <remarks>
        /// Retrieve a domain configured for this Account. Required Access Level: ViewSettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomainData</returns>
        DomainData DomainsByDomainGet(string domain, int operationIndex = 0);

        /// <summary>
        /// Load Domain
        /// </summary>
        /// <remarks>
        /// Retrieve a domain configured for this Account. Required Access Level: ViewSettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomainData</returns>
        ApiResponse<DomainData> DomainsByDomainGetWithHttpInfo(string domain, int operationIndex = 0);
        /// <summary>
        /// Update Domain
        /// </summary>
        /// <remarks>
        /// Updates the specified domain. Required Access Level: ModifySettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="domainUpdatePayload">Updated Domain resource</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomainDetail</returns>
        DomainDetail DomainsByDomainPut(string domain, DomainUpdatePayload domainUpdatePayload, int operationIndex = 0);

        /// <summary>
        /// Update Domain
        /// </summary>
        /// <remarks>
        /// Updates the specified domain. Required Access Level: ModifySettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="domainUpdatePayload">Updated Domain resource</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomainDetail</returns>
        ApiResponse<DomainDetail> DomainsByDomainPutWithHttpInfo(string domain, DomainUpdatePayload domainUpdatePayload, int operationIndex = 0);
        /// <summary>
        /// Check for domain restriction
        /// </summary>
        /// <remarks>
        /// Checking if domain is from free provider, or restricted. Required Access Level: ViewSettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        bool DomainsByDomainRestrictedGet(string domain, int operationIndex = 0);

        /// <summary>
        /// Check for domain restriction
        /// </summary>
        /// <remarks>
        /// Checking if domain is from free provider, or restricted. Required Access Level: ViewSettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> DomainsByDomainRestrictedGetWithHttpInfo(string domain, int operationIndex = 0);
        /// <summary>
        /// Verify Domain
        /// </summary>
        /// <remarks>
        /// Verifies that required DNS records exist for specified domain. Required Access Level: ModifySettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="body">Tracking type used in the Tracking verification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomainData</returns>
        DomainData DomainsByDomainVerificationPut(string domain, string body, int operationIndex = 0);

        /// <summary>
        /// Verify Domain
        /// </summary>
        /// <remarks>
        /// Verifies that required DNS records exist for specified domain. Required Access Level: ModifySettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="body">Tracking type used in the Tracking verification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomainData</returns>
        ApiResponse<DomainData> DomainsByDomainVerificationPutWithHttpInfo(string domain, string body, int operationIndex = 0);
        /// <summary>
        /// Set Default
        /// </summary>
        /// <remarks>
        /// Sets a verified email address as default sender. Required Access Level: ModifySettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Default email sender, example: mail@yourdomain.com</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomainDetail</returns>
        DomainDetail DomainsByEmailDefaultPatch(string email, int operationIndex = 0);

        /// <summary>
        /// Set Default
        /// </summary>
        /// <remarks>
        /// Sets a verified email address as default sender. Required Access Level: ModifySettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Default email sender, example: mail@yourdomain.com</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomainDetail</returns>
        ApiResponse<DomainDetail> DomainsByEmailDefaultPatchWithHttpInfo(string email, int operationIndex = 0);
        /// <summary>
        /// Load Domains
        /// </summary>
        /// <remarks>
        /// Returns a list of all domains configured for this Account. Required Access Level: ViewSettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;DomainDetail&gt;</returns>
        List<DomainDetail> DomainsGet(int operationIndex = 0);

        /// <summary>
        /// Load Domains
        /// </summary>
        /// <remarks>
        /// Returns a list of all domains configured for this Account. Required Access Level: ViewSettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;DomainDetail&gt;</returns>
        ApiResponse<List<DomainDetail>> DomainsGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Add Domain
        /// </summary>
        /// <remarks>
        /// Add new domain to Account. Required Access Level: ModifySettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPayload">Domain to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomainDetail</returns>
        DomainDetail DomainsPost(DomainPayload domainPayload, int operationIndex = 0);

        /// <summary>
        /// Add Domain
        /// </summary>
        /// <remarks>
        /// Add new domain to Account. Required Access Level: ModifySettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPayload">Domain to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomainDetail</returns>
        ApiResponse<DomainDetail> DomainsPostWithHttpInfo(DomainPayload domainPayload, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDomainsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Domain
        /// </summary>
        /// <remarks>
        /// Deletes configured domain from Account. Required Access Level: ModifySettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DomainsByDomainDeleteAsync(string domain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Domain
        /// </summary>
        /// <remarks>
        /// Deletes configured domain from Account. Required Access Level: ModifySettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DomainsByDomainDeleteWithHttpInfoAsync(string domain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load Domain
        /// </summary>
        /// <remarks>
        /// Retrieve a domain configured for this Account. Required Access Level: ViewSettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainData</returns>
        System.Threading.Tasks.Task<DomainData> DomainsByDomainGetAsync(string domain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load Domain
        /// </summary>
        /// <remarks>
        /// Retrieve a domain configured for this Account. Required Access Level: ViewSettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainData)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainData>> DomainsByDomainGetWithHttpInfoAsync(string domain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Domain
        /// </summary>
        /// <remarks>
        /// Updates the specified domain. Required Access Level: ModifySettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="domainUpdatePayload">Updated Domain resource</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainDetail</returns>
        System.Threading.Tasks.Task<DomainDetail> DomainsByDomainPutAsync(string domain, DomainUpdatePayload domainUpdatePayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Domain
        /// </summary>
        /// <remarks>
        /// Updates the specified domain. Required Access Level: ModifySettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="domainUpdatePayload">Updated Domain resource</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainDetail>> DomainsByDomainPutWithHttpInfoAsync(string domain, DomainUpdatePayload domainUpdatePayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check for domain restriction
        /// </summary>
        /// <remarks>
        /// Checking if domain is from free provider, or restricted. Required Access Level: ViewSettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> DomainsByDomainRestrictedGetAsync(string domain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check for domain restriction
        /// </summary>
        /// <remarks>
        /// Checking if domain is from free provider, or restricted. Required Access Level: ViewSettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> DomainsByDomainRestrictedGetWithHttpInfoAsync(string domain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Verify Domain
        /// </summary>
        /// <remarks>
        /// Verifies that required DNS records exist for specified domain. Required Access Level: ModifySettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="body">Tracking type used in the Tracking verification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainData</returns>
        System.Threading.Tasks.Task<DomainData> DomainsByDomainVerificationPutAsync(string domain, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Verify Domain
        /// </summary>
        /// <remarks>
        /// Verifies that required DNS records exist for specified domain. Required Access Level: ModifySettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="body">Tracking type used in the Tracking verification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainData)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainData>> DomainsByDomainVerificationPutWithHttpInfoAsync(string domain, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Default
        /// </summary>
        /// <remarks>
        /// Sets a verified email address as default sender. Required Access Level: ModifySettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Default email sender, example: mail@yourdomain.com</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainDetail</returns>
        System.Threading.Tasks.Task<DomainDetail> DomainsByEmailDefaultPatchAsync(string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Default
        /// </summary>
        /// <remarks>
        /// Sets a verified email address as default sender. Required Access Level: ModifySettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Default email sender, example: mail@yourdomain.com</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainDetail>> DomainsByEmailDefaultPatchWithHttpInfoAsync(string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load Domains
        /// </summary>
        /// <remarks>
        /// Returns a list of all domains configured for this Account. Required Access Level: ViewSettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainDetail&gt;</returns>
        System.Threading.Tasks.Task<List<DomainDetail>> DomainsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load Domains
        /// </summary>
        /// <remarks>
        /// Returns a list of all domains configured for this Account. Required Access Level: ViewSettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainDetail&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DomainDetail>>> DomainsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Domain
        /// </summary>
        /// <remarks>
        /// Add new domain to Account. Required Access Level: ModifySettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPayload">Domain to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainDetail</returns>
        System.Threading.Tasks.Task<DomainDetail> DomainsPostAsync(DomainPayload domainPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Domain
        /// </summary>
        /// <remarks>
        /// Add new domain to Account. Required Access Level: ModifySettings
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPayload">Domain to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainDetail>> DomainsPostWithHttpInfoAsync(DomainPayload domainPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDomainsApi : IDomainsApiSync, IDomainsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DomainsApi : IDomainsApi
    {
        private ElasticEmail.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DomainsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DomainsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DomainsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DomainsApi(string basePath)
        {
            this.Configuration = ElasticEmail.Client.Configuration.MergeConfigurations(
                ElasticEmail.Client.GlobalConfiguration.Instance,
                new ElasticEmail.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DomainsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DomainsApi(ElasticEmail.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ElasticEmail.Client.Configuration.MergeConfigurations(
                ElasticEmail.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DomainsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DomainsApi(ElasticEmail.Client.ISynchronousClient client, ElasticEmail.Client.IAsynchronousClient asyncClient, ElasticEmail.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ElasticEmail.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ElasticEmail.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ElasticEmail.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ElasticEmail.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Domain Deletes configured domain from Account. Required Access Level: ModifySettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DomainsByDomainDelete(string domain, int operationIndex = 0)
        {
            DomainsByDomainDeleteWithHttpInfo(domain);
        }

        /// <summary>
        /// Delete Domain Deletes configured domain from Account. Required Access Level: ModifySettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElasticEmail.Client.ApiResponse<Object> DomainsByDomainDeleteWithHttpInfo(string domain, int operationIndex = 0)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'domain' when calling DomainsApi->DomainsByDomainDelete");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("domain", ElasticEmail.Client.ClientUtils.ParameterToString(domain)); // path parameter

            localVarRequestOptions.Operation = "DomainsApi.DomainsByDomainDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/domains/{domain}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsByDomainDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Domain Deletes configured domain from Account. Required Access Level: ModifySettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DomainsByDomainDeleteAsync(string domain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DomainsByDomainDeleteWithHttpInfoAsync(domain, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Domain Deletes configured domain from Account. Required Access Level: ModifySettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<Object>> DomainsByDomainDeleteWithHttpInfoAsync(string domain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'domain' when calling DomainsApi->DomainsByDomainDelete");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("domain", ElasticEmail.Client.ClientUtils.ParameterToString(domain)); // path parameter

            localVarRequestOptions.Operation = "DomainsApi.DomainsByDomainDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/domains/{domain}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsByDomainDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Domain Retrieve a domain configured for this Account. Required Access Level: ViewSettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomainData</returns>
        public DomainData DomainsByDomainGet(string domain, int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<DomainData> localVarResponse = DomainsByDomainGetWithHttpInfo(domain);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Domain Retrieve a domain configured for this Account. Required Access Level: ViewSettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomainData</returns>
        public ElasticEmail.Client.ApiResponse<DomainData> DomainsByDomainGetWithHttpInfo(string domain, int operationIndex = 0)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'domain' when calling DomainsApi->DomainsByDomainGet");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("domain", ElasticEmail.Client.ClientUtils.ParameterToString(domain)); // path parameter

            localVarRequestOptions.Operation = "DomainsApi.DomainsByDomainGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DomainData>("/domains/{domain}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsByDomainGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Domain Retrieve a domain configured for this Account. Required Access Level: ViewSettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainData</returns>
        public async System.Threading.Tasks.Task<DomainData> DomainsByDomainGetAsync(string domain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<DomainData> localVarResponse = await DomainsByDomainGetWithHttpInfoAsync(domain, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Domain Retrieve a domain configured for this Account. Required Access Level: ViewSettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainData)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<DomainData>> DomainsByDomainGetWithHttpInfoAsync(string domain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'domain' when calling DomainsApi->DomainsByDomainGet");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("domain", ElasticEmail.Client.ClientUtils.ParameterToString(domain)); // path parameter

            localVarRequestOptions.Operation = "DomainsApi.DomainsByDomainGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DomainData>("/domains/{domain}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsByDomainGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Domain Updates the specified domain. Required Access Level: ModifySettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="domainUpdatePayload">Updated Domain resource</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomainDetail</returns>
        public DomainDetail DomainsByDomainPut(string domain, DomainUpdatePayload domainUpdatePayload, int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<DomainDetail> localVarResponse = DomainsByDomainPutWithHttpInfo(domain, domainUpdatePayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Domain Updates the specified domain. Required Access Level: ModifySettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="domainUpdatePayload">Updated Domain resource</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomainDetail</returns>
        public ElasticEmail.Client.ApiResponse<DomainDetail> DomainsByDomainPutWithHttpInfo(string domain, DomainUpdatePayload domainUpdatePayload, int operationIndex = 0)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'domain' when calling DomainsApi->DomainsByDomainPut");
            }

            // verify the required parameter 'domainUpdatePayload' is set
            if (domainUpdatePayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'domainUpdatePayload' when calling DomainsApi->DomainsByDomainPut");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("domain", ElasticEmail.Client.ClientUtils.ParameterToString(domain)); // path parameter
            localVarRequestOptions.Data = domainUpdatePayload;

            localVarRequestOptions.Operation = "DomainsApi.DomainsByDomainPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<DomainDetail>("/domains/{domain}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsByDomainPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Domain Updates the specified domain. Required Access Level: ModifySettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="domainUpdatePayload">Updated Domain resource</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainDetail</returns>
        public async System.Threading.Tasks.Task<DomainDetail> DomainsByDomainPutAsync(string domain, DomainUpdatePayload domainUpdatePayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<DomainDetail> localVarResponse = await DomainsByDomainPutWithHttpInfoAsync(domain, domainUpdatePayload, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Domain Updates the specified domain. Required Access Level: ModifySettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="domainUpdatePayload">Updated Domain resource</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainDetail)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<DomainDetail>> DomainsByDomainPutWithHttpInfoAsync(string domain, DomainUpdatePayload domainUpdatePayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'domain' when calling DomainsApi->DomainsByDomainPut");
            }

            // verify the required parameter 'domainUpdatePayload' is set
            if (domainUpdatePayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'domainUpdatePayload' when calling DomainsApi->DomainsByDomainPut");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("domain", ElasticEmail.Client.ClientUtils.ParameterToString(domain)); // path parameter
            localVarRequestOptions.Data = domainUpdatePayload;

            localVarRequestOptions.Operation = "DomainsApi.DomainsByDomainPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<DomainDetail>("/domains/{domain}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsByDomainPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check for domain restriction Checking if domain is from free provider, or restricted. Required Access Level: ViewSettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        public bool DomainsByDomainRestrictedGet(string domain, int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<bool> localVarResponse = DomainsByDomainRestrictedGetWithHttpInfo(domain);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check for domain restriction Checking if domain is from free provider, or restricted. Required Access Level: ViewSettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        public ElasticEmail.Client.ApiResponse<bool> DomainsByDomainRestrictedGetWithHttpInfo(string domain, int operationIndex = 0)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'domain' when calling DomainsApi->DomainsByDomainRestrictedGet");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("domain", ElasticEmail.Client.ClientUtils.ParameterToString(domain)); // path parameter

            localVarRequestOptions.Operation = "DomainsApi.DomainsByDomainRestrictedGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<bool>("/domains/{domain}/restricted", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsByDomainRestrictedGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check for domain restriction Checking if domain is from free provider, or restricted. Required Access Level: ViewSettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> DomainsByDomainRestrictedGetAsync(string domain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<bool> localVarResponse = await DomainsByDomainRestrictedGetWithHttpInfoAsync(domain, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check for domain restriction Checking if domain is from free provider, or restricted. Required Access Level: ViewSettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<bool>> DomainsByDomainRestrictedGetWithHttpInfoAsync(string domain, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'domain' when calling DomainsApi->DomainsByDomainRestrictedGet");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("domain", ElasticEmail.Client.ClientUtils.ParameterToString(domain)); // path parameter

            localVarRequestOptions.Operation = "DomainsApi.DomainsByDomainRestrictedGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<bool>("/domains/{domain}/restricted", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsByDomainRestrictedGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify Domain Verifies that required DNS records exist for specified domain. Required Access Level: ModifySettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="body">Tracking type used in the Tracking verification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomainData</returns>
        public DomainData DomainsByDomainVerificationPut(string domain, string body, int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<DomainData> localVarResponse = DomainsByDomainVerificationPutWithHttpInfo(domain, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify Domain Verifies that required DNS records exist for specified domain. Required Access Level: ModifySettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="body">Tracking type used in the Tracking verification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomainData</returns>
        public ElasticEmail.Client.ApiResponse<DomainData> DomainsByDomainVerificationPutWithHttpInfo(string domain, string body, int operationIndex = 0)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'domain' when calling DomainsApi->DomainsByDomainVerificationPut");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'body' when calling DomainsApi->DomainsByDomainVerificationPut");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("domain", ElasticEmail.Client.ClientUtils.ParameterToString(domain)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DomainsApi.DomainsByDomainVerificationPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<DomainData>("/domains/{domain}/verification", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsByDomainVerificationPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify Domain Verifies that required DNS records exist for specified domain. Required Access Level: ModifySettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="body">Tracking type used in the Tracking verification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainData</returns>
        public async System.Threading.Tasks.Task<DomainData> DomainsByDomainVerificationPutAsync(string domain, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<DomainData> localVarResponse = await DomainsByDomainVerificationPutWithHttpInfoAsync(domain, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify Domain Verifies that required DNS records exist for specified domain. Required Access Level: ModifySettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Name of the given domain</param>
        /// <param name="body">Tracking type used in the Tracking verification</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainData)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<DomainData>> DomainsByDomainVerificationPutWithHttpInfoAsync(string domain, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'domain' when calling DomainsApi->DomainsByDomainVerificationPut");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'body' when calling DomainsApi->DomainsByDomainVerificationPut");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("domain", ElasticEmail.Client.ClientUtils.ParameterToString(domain)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DomainsApi.DomainsByDomainVerificationPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<DomainData>("/domains/{domain}/verification", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsByDomainVerificationPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Default Sets a verified email address as default sender. Required Access Level: ModifySettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Default email sender, example: mail@yourdomain.com</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomainDetail</returns>
        public DomainDetail DomainsByEmailDefaultPatch(string email, int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<DomainDetail> localVarResponse = DomainsByEmailDefaultPatchWithHttpInfo(email);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Default Sets a verified email address as default sender. Required Access Level: ModifySettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Default email sender, example: mail@yourdomain.com</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomainDetail</returns>
        public ElasticEmail.Client.ApiResponse<DomainDetail> DomainsByEmailDefaultPatchWithHttpInfo(string email, int operationIndex = 0)
        {
            // verify the required parameter 'email' is set
            if (email == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'email' when calling DomainsApi->DomainsByEmailDefaultPatch");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("email", ElasticEmail.Client.ClientUtils.ParameterToString(email)); // path parameter

            localVarRequestOptions.Operation = "DomainsApi.DomainsByEmailDefaultPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<DomainDetail>("/domains/{email}/default", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsByEmailDefaultPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Default Sets a verified email address as default sender. Required Access Level: ModifySettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Default email sender, example: mail@yourdomain.com</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainDetail</returns>
        public async System.Threading.Tasks.Task<DomainDetail> DomainsByEmailDefaultPatchAsync(string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<DomainDetail> localVarResponse = await DomainsByEmailDefaultPatchWithHttpInfoAsync(email, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Default Sets a verified email address as default sender. Required Access Level: ModifySettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Default email sender, example: mail@yourdomain.com</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainDetail)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<DomainDetail>> DomainsByEmailDefaultPatchWithHttpInfoAsync(string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'email' is set
            if (email == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'email' when calling DomainsApi->DomainsByEmailDefaultPatch");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("email", ElasticEmail.Client.ClientUtils.ParameterToString(email)); // path parameter

            localVarRequestOptions.Operation = "DomainsApi.DomainsByEmailDefaultPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<DomainDetail>("/domains/{email}/default", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsByEmailDefaultPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Domains Returns a list of all domains configured for this Account. Required Access Level: ViewSettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;DomainDetail&gt;</returns>
        public List<DomainDetail> DomainsGet(int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<List<DomainDetail>> localVarResponse = DomainsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Domains Returns a list of all domains configured for this Account. Required Access Level: ViewSettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;DomainDetail&gt;</returns>
        public ElasticEmail.Client.ApiResponse<List<DomainDetail>> DomainsGetWithHttpInfo(int operationIndex = 0)
        {
            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DomainsApi.DomainsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DomainDetail>>("/domains", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Domains Returns a list of all domains configured for this Account. Required Access Level: ViewSettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DomainDetail&gt;</returns>
        public async System.Threading.Tasks.Task<List<DomainDetail>> DomainsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<List<DomainDetail>> localVarResponse = await DomainsGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Domains Returns a list of all domains configured for this Account. Required Access Level: ViewSettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DomainDetail&gt;)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<List<DomainDetail>>> DomainsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DomainsApi.DomainsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DomainDetail>>("/domains", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Domain Add new domain to Account. Required Access Level: ModifySettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPayload">Domain to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomainDetail</returns>
        public DomainDetail DomainsPost(DomainPayload domainPayload, int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<DomainDetail> localVarResponse = DomainsPostWithHttpInfo(domainPayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Domain Add new domain to Account. Required Access Level: ModifySettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPayload">Domain to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomainDetail</returns>
        public ElasticEmail.Client.ApiResponse<DomainDetail> DomainsPostWithHttpInfo(DomainPayload domainPayload, int operationIndex = 0)
        {
            // verify the required parameter 'domainPayload' is set
            if (domainPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'domainPayload' when calling DomainsApi->DomainsPost");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = domainPayload;

            localVarRequestOptions.Operation = "DomainsApi.DomainsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DomainDetail>("/domains", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Domain Add new domain to Account. Required Access Level: ModifySettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPayload">Domain to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainDetail</returns>
        public async System.Threading.Tasks.Task<DomainDetail> DomainsPostAsync(DomainPayload domainPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<DomainDetail> localVarResponse = await DomainsPostWithHttpInfoAsync(domainPayload, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Domain Add new domain to Account. Required Access Level: ModifySettings
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domainPayload">Domain to add</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainDetail)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<DomainDetail>> DomainsPostWithHttpInfoAsync(DomainPayload domainPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'domainPayload' is set
            if (domainPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'domainPayload' when calling DomainsApi->DomainsPost");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = domainPayload;

            localVarRequestOptions.Operation = "DomainsApi.DomainsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DomainDetail>("/domains", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DomainsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
