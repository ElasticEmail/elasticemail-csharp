/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ElasticEmail.Client;
using ElasticEmail.Model;

namespace ElasticEmail.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Load Email Events
        /// </summary>
        /// <remarks>
        /// Returns a log of delivery events for the specific transaction ID. Required Access Level: ViewReports
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionid">ID number of transaction</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <returns>List&lt;RecipientEvent&gt;</returns>
        List<RecipientEvent> EventsByTransactionidGet(string transactionid, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Load Email Events
        /// </summary>
        /// <remarks>
        /// Returns a log of delivery events for the specific transaction ID. Required Access Level: ViewReports
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionid">ID number of transaction</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <returns>ApiResponse of List&lt;RecipientEvent&gt;</returns>
        ApiResponse<List<RecipientEvent>> EventsByTransactionidGetWithHttpInfo(string transactionid, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Export Channel Events
        /// </summary>
        /// <remarks>
        /// Export delivery events log information to the specified file format. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of selected channel.</param>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <returns>ExportLink</returns>
        ExportLink EventsChannelsByNameExportPost(string name, List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), ExportFileFormats? fileFormat = default(ExportFileFormats?), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string));

        /// <summary>
        /// Export Channel Events
        /// </summary>
        /// <remarks>
        /// Export delivery events log information to the specified file format. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of selected channel.</param>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <returns>ApiResponse of ExportLink</returns>
        ApiResponse<ExportLink> EventsChannelsByNameExportPostWithHttpInfo(string name, List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), ExportFileFormats? fileFormat = default(ExportFileFormats?), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string));
        /// <summary>
        /// Load Channel Events
        /// </summary>
        /// <remarks>
        /// Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of selected channel.</param>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">How many items to load. Maximum for this request is 1000 items (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <returns>List&lt;RecipientEvent&gt;</returns>
        List<RecipientEvent> EventsChannelsByNameGet(string name, List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Load Channel Events
        /// </summary>
        /// <remarks>
        /// Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of selected channel.</param>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">How many items to load. Maximum for this request is 1000 items (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <returns>ApiResponse of List&lt;RecipientEvent&gt;</returns>
        ApiResponse<List<RecipientEvent>> EventsChannelsByNameGetWithHttpInfo(string name, List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Check Channel Export Status
        /// </summary>
        /// <remarks>
        /// Check the current status of the channel export. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <returns>ExportStatus</returns>
        ExportStatus EventsChannelsExportByIdStatusGet(string id);

        /// <summary>
        /// Check Channel Export Status
        /// </summary>
        /// <remarks>
        /// Check the current status of the channel export. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <returns>ApiResponse of ExportStatus</returns>
        ApiResponse<ExportStatus> EventsChannelsExportByIdStatusGetWithHttpInfo(string id);
        /// <summary>
        /// Check Export Status
        /// </summary>
        /// <remarks>
        /// Check the current status of the export. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <returns>ExportStatus</returns>
        ExportStatus EventsExportByIdStatusGet(string id);

        /// <summary>
        /// Check Export Status
        /// </summary>
        /// <remarks>
        /// Check the current status of the export. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <returns>ApiResponse of ExportStatus</returns>
        ApiResponse<ExportStatus> EventsExportByIdStatusGetWithHttpInfo(string id);
        /// <summary>
        /// Export Events
        /// </summary>
        /// <remarks>
        /// Export delivery events log information to the specified file format. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <returns>ExportLink</returns>
        ExportLink EventsExportPost(List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), ExportFileFormats? fileFormat = default(ExportFileFormats?), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string));

        /// <summary>
        /// Export Events
        /// </summary>
        /// <remarks>
        /// Export delivery events log information to the specified file format. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <returns>ApiResponse of ExportLink</returns>
        ApiResponse<ExportLink> EventsExportPostWithHttpInfo(List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), ExportFileFormats? fileFormat = default(ExportFileFormats?), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string));
        /// <summary>
        /// Load Events
        /// </summary>
        /// <remarks>
        /// Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">How many items to load. Maximum for this request is 1000 items (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <returns>List&lt;RecipientEvent&gt;</returns>
        List<RecipientEvent> EventsGet(List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Load Events
        /// </summary>
        /// <remarks>
        /// Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">How many items to load. Maximum for this request is 1000 items (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <returns>ApiResponse of List&lt;RecipientEvent&gt;</returns>
        ApiResponse<List<RecipientEvent>> EventsGetWithHttpInfo(List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Load Email Events
        /// </summary>
        /// <remarks>
        /// Returns a log of delivery events for the specific transaction ID. Required Access Level: ViewReports
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionid">ID number of transaction</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RecipientEvent&gt;</returns>
        System.Threading.Tasks.Task<List<RecipientEvent>> EventsByTransactionidGetAsync(string transactionid, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load Email Events
        /// </summary>
        /// <remarks>
        /// Returns a log of delivery events for the specific transaction ID. Required Access Level: ViewReports
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionid">ID number of transaction</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RecipientEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RecipientEvent>>> EventsByTransactionidGetWithHttpInfoAsync(string transactionid, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export Channel Events
        /// </summary>
        /// <remarks>
        /// Export delivery events log information to the specified file format. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of selected channel.</param>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportLink</returns>
        System.Threading.Tasks.Task<ExportLink> EventsChannelsByNameExportPostAsync(string name, List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), ExportFileFormats? fileFormat = default(ExportFileFormats?), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export Channel Events
        /// </summary>
        /// <remarks>
        /// Export delivery events log information to the specified file format. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of selected channel.</param>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExportLink>> EventsChannelsByNameExportPostWithHttpInfoAsync(string name, List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), ExportFileFormats? fileFormat = default(ExportFileFormats?), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load Channel Events
        /// </summary>
        /// <remarks>
        /// Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of selected channel.</param>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">How many items to load. Maximum for this request is 1000 items (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RecipientEvent&gt;</returns>
        System.Threading.Tasks.Task<List<RecipientEvent>> EventsChannelsByNameGetAsync(string name, List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load Channel Events
        /// </summary>
        /// <remarks>
        /// Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of selected channel.</param>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">How many items to load. Maximum for this request is 1000 items (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RecipientEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RecipientEvent>>> EventsChannelsByNameGetWithHttpInfoAsync(string name, List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check Channel Export Status
        /// </summary>
        /// <remarks>
        /// Check the current status of the channel export. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportStatus</returns>
        System.Threading.Tasks.Task<ExportStatus> EventsChannelsExportByIdStatusGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check Channel Export Status
        /// </summary>
        /// <remarks>
        /// Check the current status of the channel export. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExportStatus>> EventsChannelsExportByIdStatusGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check Export Status
        /// </summary>
        /// <remarks>
        /// Check the current status of the export. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportStatus</returns>
        System.Threading.Tasks.Task<ExportStatus> EventsExportByIdStatusGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check Export Status
        /// </summary>
        /// <remarks>
        /// Check the current status of the export. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExportStatus>> EventsExportByIdStatusGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export Events
        /// </summary>
        /// <remarks>
        /// Export delivery events log information to the specified file format. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportLink</returns>
        System.Threading.Tasks.Task<ExportLink> EventsExportPostAsync(List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), ExportFileFormats? fileFormat = default(ExportFileFormats?), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export Events
        /// </summary>
        /// <remarks>
        /// Export delivery events log information to the specified file format. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExportLink>> EventsExportPostWithHttpInfoAsync(List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), ExportFileFormats? fileFormat = default(ExportFileFormats?), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load Events
        /// </summary>
        /// <remarks>
        /// Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">How many items to load. Maximum for this request is 1000 items (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RecipientEvent&gt;</returns>
        System.Threading.Tasks.Task<List<RecipientEvent>> EventsGetAsync(List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load Events
        /// </summary>
        /// <remarks>
        /// Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">How many items to load. Maximum for this request is 1000 items (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RecipientEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RecipientEvent>>> EventsGetWithHttpInfoAsync(List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApi : IEventsApiSync, IEventsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventsApi : IEventsApi
    {
        private ElasticEmail.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi(string basePath)
        {
            this.Configuration = ElasticEmail.Client.Configuration.MergeConfigurations(
                ElasticEmail.Client.GlobalConfiguration.Instance,
                new ElasticEmail.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventsApi(ElasticEmail.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ElasticEmail.Client.Configuration.MergeConfigurations(
                ElasticEmail.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventsApi(ElasticEmail.Client.ISynchronousClient client, ElasticEmail.Client.IAsynchronousClient asyncClient, ElasticEmail.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ElasticEmail.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ElasticEmail.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ElasticEmail.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ElasticEmail.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Load Email Events Returns a log of delivery events for the specific transaction ID. Required Access Level: ViewReports
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionid">ID number of transaction</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <returns>List&lt;RecipientEvent&gt;</returns>
        public List<RecipientEvent> EventsByTransactionidGet(string transactionid, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?))
        {
            ElasticEmail.Client.ApiResponse<List<RecipientEvent>> localVarResponse = EventsByTransactionidGetWithHttpInfo(transactionid, from, to, orderBy, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Email Events Returns a log of delivery events for the specific transaction ID. Required Access Level: ViewReports
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionid">ID number of transaction</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <returns>ApiResponse of List&lt;RecipientEvent&gt;</returns>
        public ElasticEmail.Client.ApiResponse<List<RecipientEvent>> EventsByTransactionidGetWithHttpInfo(string transactionid, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?))
        {
            // verify the required parameter 'transactionid' is set
            if (transactionid == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'transactionid' when calling EventsApi->EventsByTransactionidGet");

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("transactionid", ElasticEmail.Client.ClientUtils.ParameterToString(transactionid)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<RecipientEvent>>("/events/{transactionid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventsByTransactionidGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Email Events Returns a log of delivery events for the specific transaction ID. Required Access Level: ViewReports
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionid">ID number of transaction</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RecipientEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<RecipientEvent>> EventsByTransactionidGetAsync(string transactionid, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<List<RecipientEvent>> localVarResponse = await EventsByTransactionidGetWithHttpInfoAsync(transactionid, from, to, orderBy, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Email Events Returns a log of delivery events for the specific transaction ID. Required Access Level: ViewReports
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionid">ID number of transaction</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RecipientEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<List<RecipientEvent>>> EventsByTransactionidGetWithHttpInfoAsync(string transactionid, DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionid' is set
            if (transactionid == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'transactionid' when calling EventsApi->EventsByTransactionidGet");


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("transactionid", ElasticEmail.Client.ClientUtils.ParameterToString(transactionid)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RecipientEvent>>("/events/{transactionid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventsByTransactionidGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Channel Events Export delivery events log information to the specified file format. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of selected channel.</param>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <returns>ExportLink</returns>
        public ExportLink EventsChannelsByNameExportPost(string name, List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), ExportFileFormats? fileFormat = default(ExportFileFormats?), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string))
        {
            ElasticEmail.Client.ApiResponse<ExportLink> localVarResponse = EventsChannelsByNameExportPostWithHttpInfo(name, eventTypes, from, to, fileFormat, compressionFormat, fileName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Channel Events Export delivery events log information to the specified file format. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of selected channel.</param>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <returns>ApiResponse of ExportLink</returns>
        public ElasticEmail.Client.ApiResponse<ExportLink> EventsChannelsByNameExportPostWithHttpInfo(string name, List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), ExportFileFormats? fileFormat = default(ExportFileFormats?), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling EventsApi->EventsChannelsByNameExportPost");

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (eventTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("multi", "eventTypes", eventTypes));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (fileFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "fileFormat", fileFormat));
            }
            if (compressionFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "compressionFormat", compressionFormat));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "fileName", fileName));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ExportLink>("/events/channels/{name}/export", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventsChannelsByNameExportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Channel Events Export delivery events log information to the specified file format. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of selected channel.</param>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportLink</returns>
        public async System.Threading.Tasks.Task<ExportLink> EventsChannelsByNameExportPostAsync(string name, List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), ExportFileFormats? fileFormat = default(ExportFileFormats?), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<ExportLink> localVarResponse = await EventsChannelsByNameExportPostWithHttpInfoAsync(name, eventTypes, from, to, fileFormat, compressionFormat, fileName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Channel Events Export delivery events log information to the specified file format. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of selected channel.</param>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportLink)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<ExportLink>> EventsChannelsByNameExportPostWithHttpInfoAsync(string name, List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), ExportFileFormats? fileFormat = default(ExportFileFormats?), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling EventsApi->EventsChannelsByNameExportPost");


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (eventTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("multi", "eventTypes", eventTypes));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (fileFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "fileFormat", fileFormat));
            }
            if (compressionFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "compressionFormat", compressionFormat));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "fileName", fileName));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ExportLink>("/events/channels/{name}/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventsChannelsByNameExportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Channel Events Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of selected channel.</param>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">How many items to load. Maximum for this request is 1000 items (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <returns>List&lt;RecipientEvent&gt;</returns>
        public List<RecipientEvent> EventsChannelsByNameGet(string name, List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?))
        {
            ElasticEmail.Client.ApiResponse<List<RecipientEvent>> localVarResponse = EventsChannelsByNameGetWithHttpInfo(name, eventTypes, from, to, orderBy, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Channel Events Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of selected channel.</param>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">How many items to load. Maximum for this request is 1000 items (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <returns>ApiResponse of List&lt;RecipientEvent&gt;</returns>
        public ElasticEmail.Client.ApiResponse<List<RecipientEvent>> EventsChannelsByNameGetWithHttpInfo(string name, List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling EventsApi->EventsChannelsByNameGet");

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (eventTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("multi", "eventTypes", eventTypes));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<RecipientEvent>>("/events/channels/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventsChannelsByNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Channel Events Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of selected channel.</param>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">How many items to load. Maximum for this request is 1000 items (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RecipientEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<RecipientEvent>> EventsChannelsByNameGetAsync(string name, List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<List<RecipientEvent>> localVarResponse = await EventsChannelsByNameGetWithHttpInfoAsync(name, eventTypes, from, to, orderBy, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Channel Events Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of selected channel.</param>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">How many items to load. Maximum for this request is 1000 items (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RecipientEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<List<RecipientEvent>>> EventsChannelsByNameGetWithHttpInfoAsync(string name, List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling EventsApi->EventsChannelsByNameGet");


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (eventTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("multi", "eventTypes", eventTypes));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RecipientEvent>>("/events/channels/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventsChannelsByNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check Channel Export Status Check the current status of the channel export. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <returns>ExportStatus</returns>
        public ExportStatus EventsChannelsExportByIdStatusGet(string id)
        {
            ElasticEmail.Client.ApiResponse<ExportStatus> localVarResponse = EventsChannelsExportByIdStatusGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check Channel Export Status Check the current status of the channel export. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <returns>ApiResponse of ExportStatus</returns>
        public ElasticEmail.Client.ApiResponse<ExportStatus> EventsChannelsExportByIdStatusGetWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'id' when calling EventsApi->EventsChannelsExportByIdStatusGet");

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElasticEmail.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ExportStatus>("/events/channels/export/{id}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventsChannelsExportByIdStatusGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check Channel Export Status Check the current status of the channel export. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportStatus</returns>
        public async System.Threading.Tasks.Task<ExportStatus> EventsChannelsExportByIdStatusGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<ExportStatus> localVarResponse = await EventsChannelsExportByIdStatusGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check Channel Export Status Check the current status of the channel export. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportStatus)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<ExportStatus>> EventsChannelsExportByIdStatusGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'id' when calling EventsApi->EventsChannelsExportByIdStatusGet");


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElasticEmail.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ExportStatus>("/events/channels/export/{id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventsChannelsExportByIdStatusGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check Export Status Check the current status of the export. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <returns>ExportStatus</returns>
        public ExportStatus EventsExportByIdStatusGet(string id)
        {
            ElasticEmail.Client.ApiResponse<ExportStatus> localVarResponse = EventsExportByIdStatusGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check Export Status Check the current status of the export. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <returns>ApiResponse of ExportStatus</returns>
        public ElasticEmail.Client.ApiResponse<ExportStatus> EventsExportByIdStatusGetWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'id' when calling EventsApi->EventsExportByIdStatusGet");

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElasticEmail.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ExportStatus>("/events/export/{id}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventsExportByIdStatusGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check Export Status Check the current status of the export. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportStatus</returns>
        public async System.Threading.Tasks.Task<ExportStatus> EventsExportByIdStatusGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<ExportStatus> localVarResponse = await EventsExportByIdStatusGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check Export Status Check the current status of the export. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportStatus)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<ExportStatus>> EventsExportByIdStatusGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'id' when calling EventsApi->EventsExportByIdStatusGet");


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElasticEmail.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ExportStatus>("/events/export/{id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventsExportByIdStatusGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Events Export delivery events log information to the specified file format. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <returns>ExportLink</returns>
        public ExportLink EventsExportPost(List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), ExportFileFormats? fileFormat = default(ExportFileFormats?), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string))
        {
            ElasticEmail.Client.ApiResponse<ExportLink> localVarResponse = EventsExportPostWithHttpInfo(eventTypes, from, to, fileFormat, compressionFormat, fileName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Events Export delivery events log information to the specified file format. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <returns>ApiResponse of ExportLink</returns>
        public ElasticEmail.Client.ApiResponse<ExportLink> EventsExportPostWithHttpInfo(List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), ExportFileFormats? fileFormat = default(ExportFileFormats?), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string))
        {
            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("multi", "eventTypes", eventTypes));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (fileFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "fileFormat", fileFormat));
            }
            if (compressionFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "compressionFormat", compressionFormat));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "fileName", fileName));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ExportLink>("/events/export", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventsExportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Events Export delivery events log information to the specified file format. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportLink</returns>
        public async System.Threading.Tasks.Task<ExportLink> EventsExportPostAsync(List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), ExportFileFormats? fileFormat = default(ExportFileFormats?), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<ExportLink> localVarResponse = await EventsExportPostWithHttpInfoAsync(eventTypes, from, to, fileFormat, compressionFormat, fileName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Events Export delivery events log information to the specified file format. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportLink)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<ExportLink>> EventsExportPostWithHttpInfoAsync(List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), ExportFileFormats? fileFormat = default(ExportFileFormats?), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("multi", "eventTypes", eventTypes));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (fileFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "fileFormat", fileFormat));
            }
            if (compressionFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "compressionFormat", compressionFormat));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "fileName", fileName));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ExportLink>("/events/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventsExportPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Events Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">How many items to load. Maximum for this request is 1000 items (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <returns>List&lt;RecipientEvent&gt;</returns>
        public List<RecipientEvent> EventsGet(List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?))
        {
            ElasticEmail.Client.ApiResponse<List<RecipientEvent>> localVarResponse = EventsGetWithHttpInfo(eventTypes, from, to, orderBy, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Events Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">How many items to load. Maximum for this request is 1000 items (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <returns>ApiResponse of List&lt;RecipientEvent&gt;</returns>
        public ElasticEmail.Client.ApiResponse<List<RecipientEvent>> EventsGetWithHttpInfo(List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?))
        {
            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("multi", "eventTypes", eventTypes));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<RecipientEvent>>("/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Events Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">How many items to load. Maximum for this request is 1000 items (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RecipientEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<RecipientEvent>> EventsGetAsync(List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<List<RecipientEvent>> localVarResponse = await EventsGetWithHttpInfoAsync(eventTypes, from, to, orderBy, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Events Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTypes">Types of Events to return (optional)</param>
        /// <param name="from">Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="to">Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="limit">How many items to load. Maximum for this request is 1000 items (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RecipientEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<List<RecipientEvent>>> EventsGetWithHttpInfoAsync(List<EventType> eventTypes = default(List<EventType>), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), EventsOrderBy? orderBy = default(EventsOrderBy?), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("multi", "eventTypes", eventTypes));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RecipientEvent>>("/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
