/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ElasticEmail.Client;
using ElasticEmail.Model;

namespace ElasticEmail.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Contacts to List
        /// </summary>
        /// <remarks>
        /// Add existing Contacts to specified list. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContactsList</returns>
        ContactsList ListsByNameContactsPost(string name, EmailsPayload emailsPayload, int operationIndex = 0);

        /// <summary>
        /// Add Contacts to List
        /// </summary>
        /// <remarks>
        /// Add existing Contacts to specified list. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContactsList</returns>
        ApiResponse<ContactsList> ListsByNameContactsPostWithHttpInfo(string name, EmailsPayload emailsPayload, int operationIndex = 0);
        /// <summary>
        /// Remove Contacts from List
        /// </summary>
        /// <remarks>
        /// Remove specified Contacts from your list. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ListsByNameContactsRemovePost(string name, EmailsPayload emailsPayload, int operationIndex = 0);

        /// <summary>
        /// Remove Contacts from List
        /// </summary>
        /// <remarks>
        /// Remove specified Contacts from your list. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ListsByNameContactsRemovePostWithHttpInfo(string name, EmailsPayload emailsPayload, int operationIndex = 0);
        /// <summary>
        /// Delete List
        /// </summary>
        /// <remarks>
        /// Deletes List and removes all the Contacts from it (does not delete Contacts). Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ListsByNameDelete(string name, int operationIndex = 0);

        /// <summary>
        /// Delete List
        /// </summary>
        /// <remarks>
        /// Deletes List and removes all the Contacts from it (does not delete Contacts). Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ListsByNameDeleteWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// Load List
        /// </summary>
        /// <remarks>
        /// Returns detailed information about specified list. Required Access Level: ViewContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContactsList</returns>
        ContactsList ListsByNameGet(string name, int operationIndex = 0);

        /// <summary>
        /// Load List
        /// </summary>
        /// <remarks>
        /// Returns detailed information about specified list. Required Access Level: ViewContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContactsList</returns>
        ApiResponse<ContactsList> ListsByNameGetWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// Update List
        /// </summary>
        /// <remarks>
        /// Update existing list. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="listUpdatePayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContactsList</returns>
        ContactsList ListsByNamePut(string name, ListUpdatePayload listUpdatePayload, int operationIndex = 0);

        /// <summary>
        /// Update List
        /// </summary>
        /// <remarks>
        /// Update existing list. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="listUpdatePayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContactsList</returns>
        ApiResponse<ContactsList> ListsByNamePutWithHttpInfo(string name, ListUpdatePayload listUpdatePayload, int operationIndex = 0);
        /// <summary>
        /// Load Lists
        /// </summary>
        /// <remarks>
        /// Returns all your existing lists. Required Access Level: ViewContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ContactsList&gt;</returns>
        List<ContactsList> ListsGet(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// Load Lists
        /// </summary>
        /// <remarks>
        /// Returns all your existing lists. Required Access Level: ViewContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ContactsList&gt;</returns>
        ApiResponse<List<ContactsList>> ListsGetWithHttpInfo(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// Add List
        /// </summary>
        /// <remarks>
        /// Add a new list. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContactsList</returns>
        ContactsList ListsPost(ListPayload listPayload, int operationIndex = 0);

        /// <summary>
        /// Add List
        /// </summary>
        /// <remarks>
        /// Add a new list. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContactsList</returns>
        ApiResponse<ContactsList> ListsPostWithHttpInfo(ListPayload listPayload, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Contacts to List
        /// </summary>
        /// <remarks>
        /// Add existing Contacts to specified list. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsList</returns>
        System.Threading.Tasks.Task<ContactsList> ListsByNameContactsPostAsync(string name, EmailsPayload emailsPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Contacts to List
        /// </summary>
        /// <remarks>
        /// Add existing Contacts to specified list. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactsList>> ListsByNameContactsPostWithHttpInfoAsync(string name, EmailsPayload emailsPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Contacts from List
        /// </summary>
        /// <remarks>
        /// Remove specified Contacts from your list. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ListsByNameContactsRemovePostAsync(string name, EmailsPayload emailsPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Contacts from List
        /// </summary>
        /// <remarks>
        /// Remove specified Contacts from your list. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListsByNameContactsRemovePostWithHttpInfoAsync(string name, EmailsPayload emailsPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete List
        /// </summary>
        /// <remarks>
        /// Deletes List and removes all the Contacts from it (does not delete Contacts). Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ListsByNameDeleteAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete List
        /// </summary>
        /// <remarks>
        /// Deletes List and removes all the Contacts from it (does not delete Contacts). Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListsByNameDeleteWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load List
        /// </summary>
        /// <remarks>
        /// Returns detailed information about specified list. Required Access Level: ViewContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsList</returns>
        System.Threading.Tasks.Task<ContactsList> ListsByNameGetAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load List
        /// </summary>
        /// <remarks>
        /// Returns detailed information about specified list. Required Access Level: ViewContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactsList>> ListsByNameGetWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update List
        /// </summary>
        /// <remarks>
        /// Update existing list. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="listUpdatePayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsList</returns>
        System.Threading.Tasks.Task<ContactsList> ListsByNamePutAsync(string name, ListUpdatePayload listUpdatePayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update List
        /// </summary>
        /// <remarks>
        /// Update existing list. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="listUpdatePayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactsList>> ListsByNamePutWithHttpInfoAsync(string name, ListUpdatePayload listUpdatePayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load Lists
        /// </summary>
        /// <remarks>
        /// Returns all your existing lists. Required Access Level: ViewContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactsList&gt;</returns>
        System.Threading.Tasks.Task<List<ContactsList>> ListsGetAsync(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load Lists
        /// </summary>
        /// <remarks>
        /// Returns all your existing lists. Required Access Level: ViewContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContactsList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContactsList>>> ListsGetWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add List
        /// </summary>
        /// <remarks>
        /// Add a new list. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsList</returns>
        System.Threading.Tasks.Task<ContactsList> ListsPostAsync(ListPayload listPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add List
        /// </summary>
        /// <remarks>
        /// Add a new list. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactsList>> ListsPostWithHttpInfoAsync(ListPayload listPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListsApi : IListsApiSync, IListsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ListsApi : IListsApi
    {
        private ElasticEmail.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ListsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ListsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ListsApi(string basePath)
        {
            this.Configuration = ElasticEmail.Client.Configuration.MergeConfigurations(
                ElasticEmail.Client.GlobalConfiguration.Instance,
                new ElasticEmail.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ListsApi(ElasticEmail.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ElasticEmail.Client.Configuration.MergeConfigurations(
                ElasticEmail.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ListsApi(ElasticEmail.Client.ISynchronousClient client, ElasticEmail.Client.IAsynchronousClient asyncClient, ElasticEmail.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ElasticEmail.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ElasticEmail.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ElasticEmail.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ElasticEmail.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Contacts to List Add existing Contacts to specified list. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContactsList</returns>
        public ContactsList ListsByNameContactsPost(string name, EmailsPayload emailsPayload, int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<ContactsList> localVarResponse = ListsByNameContactsPostWithHttpInfo(name, emailsPayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Contacts to List Add existing Contacts to specified list. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContactsList</returns>
        public ElasticEmail.Client.ApiResponse<ContactsList> ListsByNameContactsPostWithHttpInfo(string name, EmailsPayload emailsPayload, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling ListsApi->ListsByNameContactsPost");
            }

            // verify the required parameter 'emailsPayload' is set
            if (emailsPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'emailsPayload' when calling ListsApi->ListsByNameContactsPost");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = emailsPayload;

            localVarRequestOptions.Operation = "ListsApi.ListsByNameContactsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ContactsList>("/lists/{name}/contacts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListsByNameContactsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Contacts to List Add existing Contacts to specified list. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsList</returns>
        public async System.Threading.Tasks.Task<ContactsList> ListsByNameContactsPostAsync(string name, EmailsPayload emailsPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<ContactsList> localVarResponse = await ListsByNameContactsPostWithHttpInfoAsync(name, emailsPayload, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Contacts to List Add existing Contacts to specified list. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsList)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<ContactsList>> ListsByNameContactsPostWithHttpInfoAsync(string name, EmailsPayload emailsPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling ListsApi->ListsByNameContactsPost");
            }

            // verify the required parameter 'emailsPayload' is set
            if (emailsPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'emailsPayload' when calling ListsApi->ListsByNameContactsPost");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = emailsPayload;

            localVarRequestOptions.Operation = "ListsApi.ListsByNameContactsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContactsList>("/lists/{name}/contacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListsByNameContactsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Contacts from List Remove specified Contacts from your list. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ListsByNameContactsRemovePost(string name, EmailsPayload emailsPayload, int operationIndex = 0)
        {
            ListsByNameContactsRemovePostWithHttpInfo(name, emailsPayload);
        }

        /// <summary>
        /// Remove Contacts from List Remove specified Contacts from your list. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElasticEmail.Client.ApiResponse<Object> ListsByNameContactsRemovePostWithHttpInfo(string name, EmailsPayload emailsPayload, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling ListsApi->ListsByNameContactsRemovePost");
            }

            // verify the required parameter 'emailsPayload' is set
            if (emailsPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'emailsPayload' when calling ListsApi->ListsByNameContactsRemovePost");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = emailsPayload;

            localVarRequestOptions.Operation = "ListsApi.ListsByNameContactsRemovePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/lists/{name}/contacts/remove", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListsByNameContactsRemovePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Contacts from List Remove specified Contacts from your list. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ListsByNameContactsRemovePostAsync(string name, EmailsPayload emailsPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ListsByNameContactsRemovePostWithHttpInfoAsync(name, emailsPayload, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove Contacts from List Remove specified Contacts from your list. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<Object>> ListsByNameContactsRemovePostWithHttpInfoAsync(string name, EmailsPayload emailsPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling ListsApi->ListsByNameContactsRemovePost");
            }

            // verify the required parameter 'emailsPayload' is set
            if (emailsPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'emailsPayload' when calling ListsApi->ListsByNameContactsRemovePost");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = emailsPayload;

            localVarRequestOptions.Operation = "ListsApi.ListsByNameContactsRemovePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/lists/{name}/contacts/remove", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListsByNameContactsRemovePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete List Deletes List and removes all the Contacts from it (does not delete Contacts). Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ListsByNameDelete(string name, int operationIndex = 0)
        {
            ListsByNameDeleteWithHttpInfo(name);
        }

        /// <summary>
        /// Delete List Deletes List and removes all the Contacts from it (does not delete Contacts). Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElasticEmail.Client.ApiResponse<Object> ListsByNameDeleteWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling ListsApi->ListsByNameDelete");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "ListsApi.ListsByNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/lists/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListsByNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete List Deletes List and removes all the Contacts from it (does not delete Contacts). Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ListsByNameDeleteAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ListsByNameDeleteWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete List Deletes List and removes all the Contacts from it (does not delete Contacts). Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<Object>> ListsByNameDeleteWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling ListsApi->ListsByNameDelete");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "ListsApi.ListsByNameDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/lists/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListsByNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load List Returns detailed information about specified list. Required Access Level: ViewContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContactsList</returns>
        public ContactsList ListsByNameGet(string name, int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<ContactsList> localVarResponse = ListsByNameGetWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load List Returns detailed information about specified list. Required Access Level: ViewContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContactsList</returns>
        public ElasticEmail.Client.ApiResponse<ContactsList> ListsByNameGetWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling ListsApi->ListsByNameGet");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "ListsApi.ListsByNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ContactsList>("/lists/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListsByNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load List Returns detailed information about specified list. Required Access Level: ViewContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsList</returns>
        public async System.Threading.Tasks.Task<ContactsList> ListsByNameGetAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<ContactsList> localVarResponse = await ListsByNameGetWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load List Returns detailed information about specified list. Required Access Level: ViewContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsList)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<ContactsList>> ListsByNameGetWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling ListsApi->ListsByNameGet");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "ListsApi.ListsByNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContactsList>("/lists/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListsByNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update List Update existing list. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="listUpdatePayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContactsList</returns>
        public ContactsList ListsByNamePut(string name, ListUpdatePayload listUpdatePayload, int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<ContactsList> localVarResponse = ListsByNamePutWithHttpInfo(name, listUpdatePayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update List Update existing list. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="listUpdatePayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContactsList</returns>
        public ElasticEmail.Client.ApiResponse<ContactsList> ListsByNamePutWithHttpInfo(string name, ListUpdatePayload listUpdatePayload, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling ListsApi->ListsByNamePut");
            }

            // verify the required parameter 'listUpdatePayload' is set
            if (listUpdatePayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'listUpdatePayload' when calling ListsApi->ListsByNamePut");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = listUpdatePayload;

            localVarRequestOptions.Operation = "ListsApi.ListsByNamePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ContactsList>("/lists/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListsByNamePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update List Update existing list. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="listUpdatePayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsList</returns>
        public async System.Threading.Tasks.Task<ContactsList> ListsByNamePutAsync(string name, ListUpdatePayload listUpdatePayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<ContactsList> localVarResponse = await ListsByNamePutWithHttpInfoAsync(name, listUpdatePayload, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update List Update existing list. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of your list.</param>
        /// <param name="listUpdatePayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsList)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<ContactsList>> ListsByNamePutWithHttpInfoAsync(string name, ListUpdatePayload listUpdatePayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling ListsApi->ListsByNamePut");
            }

            // verify the required parameter 'listUpdatePayload' is set
            if (listUpdatePayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'listUpdatePayload' when calling ListsApi->ListsByNamePut");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = listUpdatePayload;

            localVarRequestOptions.Operation = "ListsApi.ListsByNamePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ContactsList>("/lists/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListsByNamePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Lists Returns all your existing lists. Required Access Level: ViewContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ContactsList&gt;</returns>
        public List<ContactsList> ListsGet(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<List<ContactsList>> localVarResponse = ListsGetWithHttpInfo(limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Lists Returns all your existing lists. Required Access Level: ViewContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ContactsList&gt;</returns>
        public ElasticEmail.Client.ApiResponse<List<ContactsList>> ListsGetWithHttpInfo(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "ListsApi.ListsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ContactsList>>("/lists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Lists Returns all your existing lists. Required Access Level: ViewContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactsList&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContactsList>> ListsGetAsync(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<List<ContactsList>> localVarResponse = await ListsGetWithHttpInfoAsync(limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Lists Returns all your existing lists. Required Access Level: ViewContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContactsList&gt;)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<List<ContactsList>>> ListsGetWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "ListsApi.ListsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ContactsList>>("/lists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add List Add a new list. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContactsList</returns>
        public ContactsList ListsPost(ListPayload listPayload, int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<ContactsList> localVarResponse = ListsPostWithHttpInfo(listPayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add List Add a new list. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContactsList</returns>
        public ElasticEmail.Client.ApiResponse<ContactsList> ListsPostWithHttpInfo(ListPayload listPayload, int operationIndex = 0)
        {
            // verify the required parameter 'listPayload' is set
            if (listPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'listPayload' when calling ListsApi->ListsPost");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = listPayload;

            localVarRequestOptions.Operation = "ListsApi.ListsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ContactsList>("/lists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add List Add a new list. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsList</returns>
        public async System.Threading.Tasks.Task<ContactsList> ListsPostAsync(ListPayload listPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<ContactsList> localVarResponse = await ListsPostWithHttpInfoAsync(listPayload, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add List Add a new list. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsList)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<ContactsList>> ListsPostWithHttpInfoAsync(ListPayload listPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'listPayload' is set
            if (listPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'listPayload' when calling ListsApi->ListsPost");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = listPayload;

            localVarRequestOptions.Operation = "ListsApi.ListsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContactsList>("/lists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
