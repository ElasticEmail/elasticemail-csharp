/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ElasticEmail.Client;
using ElasticEmail.Model;

namespace ElasticEmail.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICampaignsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Campaign
        /// </summary>
        /// <remarks>
        /// Delete the specific campaign.  This does not cancel in progress email, see Cancel In Progress. Required Access Level: ModifyCampaigns
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to delete</param>
        /// <returns></returns>
        void CampaignsByNameDelete(string name);

        /// <summary>
        /// Delete Campaign
        /// </summary>
        /// <remarks>
        /// Delete the specific campaign.  This does not cancel in progress email, see Cancel In Progress. Required Access Level: ModifyCampaigns
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CampaignsByNameDeleteWithHttpInfo(string name);
        /// <summary>
        /// Load Campaign
        /// </summary>
        /// <remarks>
        /// Returns the specified campaign details. Required Access Level: ViewCampaigns
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to get</param>
        /// <returns>Campaign</returns>
        Campaign CampaignsByNameGet(string name);

        /// <summary>
        /// Load Campaign
        /// </summary>
        /// <remarks>
        /// Returns the specified campaign details. Required Access Level: ViewCampaigns
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to get</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> CampaignsByNameGetWithHttpInfo(string name);
        /// <summary>
        /// Update Campaign
        /// </summary>
        /// <remarks>
        /// Updates a previously added campaign.  Only Active and Paused campaigns can be updated. Required Access Level: ModifyCampaigns
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to update</param>
        /// <param name="campaign">JSON representation of a campaign</param>
        /// <returns>Campaign</returns>
        Campaign CampaignsByNamePut(string name, Campaign campaign);

        /// <summary>
        /// Update Campaign
        /// </summary>
        /// <remarks>
        /// Updates a previously added campaign.  Only Active and Paused campaigns can be updated. Required Access Level: ModifyCampaigns
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to update</param>
        /// <param name="campaign">JSON representation of a campaign</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> CampaignsByNamePutWithHttpInfo(string name, Campaign campaign);
        /// <summary>
        /// Load Campaigns
        /// </summary>
        /// <remarks>
        /// Returns a list all of your campaigns. Limited to 1000 results. Required Access Level: ViewCampaigns
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Text fragment used for searching in Campaign name (using the &#39;contains&#39; rule) (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <returns>List&lt;Campaign&gt;</returns>
        List<Campaign> CampaignsGet(string search = default(string), int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Load Campaigns
        /// </summary>
        /// <remarks>
        /// Returns a list all of your campaigns. Limited to 1000 results. Required Access Level: ViewCampaigns
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Text fragment used for searching in Campaign name (using the &#39;contains&#39; rule) (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <returns>ApiResponse of List&lt;Campaign&gt;</returns>
        ApiResponse<List<Campaign>> CampaignsGetWithHttpInfo(string search = default(string), int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Add Campaign
        /// </summary>
        /// <remarks>
        /// Add a campaign for processing. Required Access Level: ModifyCampaigns
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaign">JSON representation of a campaign</param>
        /// <returns>Campaign</returns>
        Campaign CampaignsPost(Campaign campaign);

        /// <summary>
        /// Add Campaign
        /// </summary>
        /// <remarks>
        /// Add a campaign for processing. Required Access Level: ModifyCampaigns
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaign">JSON representation of a campaign</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> CampaignsPostWithHttpInfo(Campaign campaign);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICampaignsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Campaign
        /// </summary>
        /// <remarks>
        /// Delete the specific campaign.  This does not cancel in progress email, see Cancel In Progress. Required Access Level: ModifyCampaigns
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CampaignsByNameDeleteAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Campaign
        /// </summary>
        /// <remarks>
        /// Delete the specific campaign.  This does not cancel in progress email, see Cancel In Progress. Required Access Level: ModifyCampaigns
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CampaignsByNameDeleteWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load Campaign
        /// </summary>
        /// <remarks>
        /// Returns the specified campaign details. Required Access Level: ViewCampaigns
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> CampaignsByNameGetAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load Campaign
        /// </summary>
        /// <remarks>
        /// Returns the specified campaign details. Required Access Level: ViewCampaigns
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> CampaignsByNameGetWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Campaign
        /// </summary>
        /// <remarks>
        /// Updates a previously added campaign.  Only Active and Paused campaigns can be updated. Required Access Level: ModifyCampaigns
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to update</param>
        /// <param name="campaign">JSON representation of a campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> CampaignsByNamePutAsync(string name, Campaign campaign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Campaign
        /// </summary>
        /// <remarks>
        /// Updates a previously added campaign.  Only Active and Paused campaigns can be updated. Required Access Level: ModifyCampaigns
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to update</param>
        /// <param name="campaign">JSON representation of a campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> CampaignsByNamePutWithHttpInfoAsync(string name, Campaign campaign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load Campaigns
        /// </summary>
        /// <remarks>
        /// Returns a list all of your campaigns. Limited to 1000 results. Required Access Level: ViewCampaigns
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Text fragment used for searching in Campaign name (using the &#39;contains&#39; rule) (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Campaign&gt;</returns>
        System.Threading.Tasks.Task<List<Campaign>> CampaignsGetAsync(string search = default(string), int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load Campaigns
        /// </summary>
        /// <remarks>
        /// Returns a list all of your campaigns. Limited to 1000 results. Required Access Level: ViewCampaigns
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Text fragment used for searching in Campaign name (using the &#39;contains&#39; rule) (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Campaign&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Campaign>>> CampaignsGetWithHttpInfoAsync(string search = default(string), int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Campaign
        /// </summary>
        /// <remarks>
        /// Add a campaign for processing. Required Access Level: ModifyCampaigns
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaign">JSON representation of a campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> CampaignsPostAsync(Campaign campaign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Campaign
        /// </summary>
        /// <remarks>
        /// Add a campaign for processing. Required Access Level: ModifyCampaigns
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaign">JSON representation of a campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> CampaignsPostWithHttpInfoAsync(Campaign campaign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICampaignsApi : ICampaignsApiSync, ICampaignsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CampaignsApi : ICampaignsApi
    {
        private ElasticEmail.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CampaignsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CampaignsApi(String basePath)
        {
            this.Configuration = ElasticEmail.Client.Configuration.MergeConfigurations(
                ElasticEmail.Client.GlobalConfiguration.Instance,
                new ElasticEmail.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CampaignsApi(ElasticEmail.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ElasticEmail.Client.Configuration.MergeConfigurations(
                ElasticEmail.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CampaignsApi(ElasticEmail.Client.ISynchronousClient client, ElasticEmail.Client.IAsynchronousClient asyncClient, ElasticEmail.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ElasticEmail.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ElasticEmail.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ElasticEmail.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ElasticEmail.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Campaign Delete the specific campaign.  This does not cancel in progress email, see Cancel In Progress. Required Access Level: ModifyCampaigns
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to delete</param>
        /// <returns></returns>
        public void CampaignsByNameDelete(string name)
        {
            CampaignsByNameDeleteWithHttpInfo(name);
        }

        /// <summary>
        /// Delete Campaign Delete the specific campaign.  This does not cancel in progress email, see Cancel In Progress. Required Access Level: ModifyCampaigns
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElasticEmail.Client.ApiResponse<Object> CampaignsByNameDeleteWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling CampaignsApi->CampaignsByNameDelete");

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/campaigns/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CampaignsByNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Campaign Delete the specific campaign.  This does not cancel in progress email, see Cancel In Progress. Required Access Level: ModifyCampaigns
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CampaignsByNameDeleteAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CampaignsByNameDeleteWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Campaign Delete the specific campaign.  This does not cancel in progress email, see Cancel In Progress. Required Access Level: ModifyCampaigns
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<Object>> CampaignsByNameDeleteWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling CampaignsApi->CampaignsByNameDelete");


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/campaigns/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CampaignsByNameDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Campaign Returns the specified campaign details. Required Access Level: ViewCampaigns
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to get</param>
        /// <returns>Campaign</returns>
        public Campaign CampaignsByNameGet(string name)
        {
            ElasticEmail.Client.ApiResponse<Campaign> localVarResponse = CampaignsByNameGetWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Campaign Returns the specified campaign details. Required Access Level: ViewCampaigns
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to get</param>
        /// <returns>ApiResponse of Campaign</returns>
        public ElasticEmail.Client.ApiResponse<Campaign> CampaignsByNameGetWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling CampaignsApi->CampaignsByNameGet");

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Campaign>("/campaigns/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CampaignsByNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Campaign Returns the specified campaign details. Required Access Level: ViewCampaigns
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> CampaignsByNameGetAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<Campaign> localVarResponse = await CampaignsByNameGetWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Campaign Returns the specified campaign details. Required Access Level: ViewCampaigns
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to get</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<Campaign>> CampaignsByNameGetWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling CampaignsApi->CampaignsByNameGet");


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Campaign>("/campaigns/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CampaignsByNameGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Campaign Updates a previously added campaign.  Only Active and Paused campaigns can be updated. Required Access Level: ModifyCampaigns
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to update</param>
        /// <param name="campaign">JSON representation of a campaign</param>
        /// <returns>Campaign</returns>
        public Campaign CampaignsByNamePut(string name, Campaign campaign)
        {
            ElasticEmail.Client.ApiResponse<Campaign> localVarResponse = CampaignsByNamePutWithHttpInfo(name, campaign);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Campaign Updates a previously added campaign.  Only Active and Paused campaigns can be updated. Required Access Level: ModifyCampaigns
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to update</param>
        /// <param name="campaign">JSON representation of a campaign</param>
        /// <returns>ApiResponse of Campaign</returns>
        public ElasticEmail.Client.ApiResponse<Campaign> CampaignsByNamePutWithHttpInfo(string name, Campaign campaign)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling CampaignsApi->CampaignsByNamePut");

            // verify the required parameter 'campaign' is set
            if (campaign == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'campaign' when calling CampaignsApi->CampaignsByNamePut");

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = campaign;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Campaign>("/campaigns/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CampaignsByNamePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Campaign Updates a previously added campaign.  Only Active and Paused campaigns can be updated. Required Access Level: ModifyCampaigns
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to update</param>
        /// <param name="campaign">JSON representation of a campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> CampaignsByNamePutAsync(string name, Campaign campaign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<Campaign> localVarResponse = await CampaignsByNamePutWithHttpInfoAsync(name, campaign, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Campaign Updates a previously added campaign.  Only Active and Paused campaigns can be updated. Required Access Level: ModifyCampaigns
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of Campaign to update</param>
        /// <param name="campaign">JSON representation of a campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<Campaign>> CampaignsByNamePutWithHttpInfoAsync(string name, Campaign campaign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling CampaignsApi->CampaignsByNamePut");

            // verify the required parameter 'campaign' is set
            if (campaign == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'campaign' when calling CampaignsApi->CampaignsByNamePut");


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = campaign;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Campaign>("/campaigns/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CampaignsByNamePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Campaigns Returns a list all of your campaigns. Limited to 1000 results. Required Access Level: ViewCampaigns
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Text fragment used for searching in Campaign name (using the &#39;contains&#39; rule) (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <returns>List&lt;Campaign&gt;</returns>
        public List<Campaign> CampaignsGet(string search = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            ElasticEmail.Client.ApiResponse<List<Campaign>> localVarResponse = CampaignsGetWithHttpInfo(search, offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Campaigns Returns a list all of your campaigns. Limited to 1000 results. Required Access Level: ViewCampaigns
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Text fragment used for searching in Campaign name (using the &#39;contains&#39; rule) (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <returns>ApiResponse of List&lt;Campaign&gt;</returns>
        public ElasticEmail.Client.ApiResponse<List<Campaign>> CampaignsGetWithHttpInfo(string search = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Campaign>>("/campaigns", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CampaignsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Campaigns Returns a list all of your campaigns. Limited to 1000 results. Required Access Level: ViewCampaigns
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Text fragment used for searching in Campaign name (using the &#39;contains&#39; rule) (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Campaign&gt;</returns>
        public async System.Threading.Tasks.Task<List<Campaign>> CampaignsGetAsync(string search = default(string), int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<List<Campaign>> localVarResponse = await CampaignsGetWithHttpInfoAsync(search, offset, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Campaigns Returns a list all of your campaigns. Limited to 1000 results. Required Access Level: ViewCampaigns
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Text fragment used for searching in Campaign name (using the &#39;contains&#39; rule) (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Campaign&gt;)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<List<Campaign>>> CampaignsGetWithHttpInfoAsync(string search = default(string), int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Campaign>>("/campaigns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CampaignsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Campaign Add a campaign for processing. Required Access Level: ModifyCampaigns
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaign">JSON representation of a campaign</param>
        /// <returns>Campaign</returns>
        public Campaign CampaignsPost(Campaign campaign)
        {
            ElasticEmail.Client.ApiResponse<Campaign> localVarResponse = CampaignsPostWithHttpInfo(campaign);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Campaign Add a campaign for processing. Required Access Level: ModifyCampaigns
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaign">JSON representation of a campaign</param>
        /// <returns>ApiResponse of Campaign</returns>
        public ElasticEmail.Client.ApiResponse<Campaign> CampaignsPostWithHttpInfo(Campaign campaign)
        {
            // verify the required parameter 'campaign' is set
            if (campaign == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'campaign' when calling CampaignsApi->CampaignsPost");

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = campaign;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Campaign>("/campaigns", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CampaignsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Campaign Add a campaign for processing. Required Access Level: ModifyCampaigns
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaign">JSON representation of a campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> CampaignsPostAsync(Campaign campaign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<Campaign> localVarResponse = await CampaignsPostWithHttpInfoAsync(campaign, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Campaign Add a campaign for processing. Required Access Level: ModifyCampaigns
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaign">JSON representation of a campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<Campaign>> CampaignsPostWithHttpInfoAsync(Campaign campaign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaign' is set
            if (campaign == null)
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'campaign' when calling CampaignsApi->CampaignsPost");


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = campaign;

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Campaign>("/campaigns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CampaignsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
