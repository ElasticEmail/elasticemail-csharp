/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ElasticEmail.Client;
using ElasticEmail.Model;

namespace ElasticEmail.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecurityApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete ApiKey
        /// </summary>
        /// <remarks>
        /// Delete your existing ApiKey. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="subaccount">Email of the subaccount of which ApiKey should be deleted (optional)</param>
        /// <returns></returns>
        void SecurityApikeysByNameDelete(string name, string subaccount = default(string));

        /// <summary>
        /// Delete ApiKey
        /// </summary>
        /// <remarks>
        /// Delete your existing ApiKey. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="subaccount">Email of the subaccount of which ApiKey should be deleted (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SecurityApikeysByNameDeleteWithHttpInfo(string name, string subaccount = default(string));
        /// <summary>
        /// Load ApiKey
        /// </summary>
        /// <remarks>
        /// Load your existing ApiKey info. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="subaccount">Email of the subaccount of which ApiKey should be loaded (optional)</param>
        /// <returns>ApiKey</returns>
        ApiKey SecurityApikeysByNameGet(string name, string subaccount = default(string));

        /// <summary>
        /// Load ApiKey
        /// </summary>
        /// <remarks>
        /// Load your existing ApiKey info. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="subaccount">Email of the subaccount of which ApiKey should be loaded (optional)</param>
        /// <returns>ApiResponse of ApiKey</returns>
        ApiResponse<ApiKey> SecurityApikeysByNameGetWithHttpInfo(string name, string subaccount = default(string));
        /// <summary>
        /// Update ApiKey
        /// </summary>
        /// <remarks>
        /// Update your existing ApiKey. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="apiKeyPayload"></param>
        /// <returns>ApiKey</returns>
        ApiKey SecurityApikeysByNamePut(string name, ApiKeyPayload apiKeyPayload);

        /// <summary>
        /// Update ApiKey
        /// </summary>
        /// <remarks>
        /// Update your existing ApiKey. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="apiKeyPayload"></param>
        /// <returns>ApiResponse of ApiKey</returns>
        ApiResponse<ApiKey> SecurityApikeysByNamePutWithHttpInfo(string name, ApiKeyPayload apiKeyPayload);
        /// <summary>
        /// List ApiKeys
        /// </summary>
        /// <remarks>
        /// List all your existing ApiKeys. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccount">Email of the subaccount of which ApiKeys should be loaded (optional)</param>
        /// <returns>List&lt;ApiKey&gt;</returns>
        List<ApiKey> SecurityApikeysGet(string subaccount = default(string));

        /// <summary>
        /// List ApiKeys
        /// </summary>
        /// <remarks>
        /// List all your existing ApiKeys. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccount">Email of the subaccount of which ApiKeys should be loaded (optional)</param>
        /// <returns>ApiResponse of List&lt;ApiKey&gt;</returns>
        ApiResponse<List<ApiKey>> SecurityApikeysGetWithHttpInfo(string subaccount = default(string));
        /// <summary>
        /// Add ApiKey
        /// </summary>
        /// <remarks>
        /// Add a new ApiKey. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyPayload"></param>
        /// <returns>NewApiKey</returns>
        NewApiKey SecurityApikeysPost(ApiKeyPayload apiKeyPayload);

        /// <summary>
        /// Add ApiKey
        /// </summary>
        /// <remarks>
        /// Add a new ApiKey. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyPayload"></param>
        /// <returns>ApiResponse of NewApiKey</returns>
        ApiResponse<NewApiKey> SecurityApikeysPostWithHttpInfo(ApiKeyPayload apiKeyPayload);
        /// <summary>
        /// Delete SMTP Credential
        /// </summary>
        /// <remarks>
        /// Delete your existing SMTP Credentials. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="subaccount">Email of the subaccount of which credential should be deleted (optional)</param>
        /// <returns></returns>
        void SecuritySmtpByNameDelete(string name, string subaccount = default(string));

        /// <summary>
        /// Delete SMTP Credential
        /// </summary>
        /// <remarks>
        /// Delete your existing SMTP Credentials. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="subaccount">Email of the subaccount of which credential should be deleted (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SecuritySmtpByNameDeleteWithHttpInfo(string name, string subaccount = default(string));
        /// <summary>
        /// Load SMTP Credential
        /// </summary>
        /// <remarks>
        /// Load your existing SMTP Credential info. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="subaccount">Email of the subaccount of which credential should be loaded (optional)</param>
        /// <returns>SmtpCredentials</returns>
        SmtpCredentials SecuritySmtpByNameGet(string name, string subaccount = default(string));

        /// <summary>
        /// Load SMTP Credential
        /// </summary>
        /// <remarks>
        /// Load your existing SMTP Credential info. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="subaccount">Email of the subaccount of which credential should be loaded (optional)</param>
        /// <returns>ApiResponse of SmtpCredentials</returns>
        ApiResponse<SmtpCredentials> SecuritySmtpByNameGetWithHttpInfo(string name, string subaccount = default(string));
        /// <summary>
        /// Update SMTP Credential
        /// </summary>
        /// <remarks>
        /// Update your existing SMTP Credentials. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="smtpCredentialsPayload"></param>
        /// <returns>SmtpCredentials</returns>
        SmtpCredentials SecuritySmtpByNamePut(string name, SmtpCredentialsPayload smtpCredentialsPayload);

        /// <summary>
        /// Update SMTP Credential
        /// </summary>
        /// <remarks>
        /// Update your existing SMTP Credentials. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="smtpCredentialsPayload"></param>
        /// <returns>ApiResponse of SmtpCredentials</returns>
        ApiResponse<SmtpCredentials> SecuritySmtpByNamePutWithHttpInfo(string name, SmtpCredentialsPayload smtpCredentialsPayload);
        /// <summary>
        /// List SMTP Credentials
        /// </summary>
        /// <remarks>
        /// List all your existing SMTP Credentials. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccount">Email of the subaccount of which credentials should be listed (optional)</param>
        /// <returns>List&lt;SmtpCredentials&gt;</returns>
        List<SmtpCredentials> SecuritySmtpGet(string subaccount = default(string));

        /// <summary>
        /// List SMTP Credentials
        /// </summary>
        /// <remarks>
        /// List all your existing SMTP Credentials. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccount">Email of the subaccount of which credentials should be listed (optional)</param>
        /// <returns>ApiResponse of List&lt;SmtpCredentials&gt;</returns>
        ApiResponse<List<SmtpCredentials>> SecuritySmtpGetWithHttpInfo(string subaccount = default(string));
        /// <summary>
        /// Add SMTP Credential
        /// </summary>
        /// <remarks>
        /// Add new SMTP Credential. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smtpCredentialsPayload"></param>
        /// <returns>NewSmtpCredentials</returns>
        NewSmtpCredentials SecuritySmtpPost(SmtpCredentialsPayload smtpCredentialsPayload);

        /// <summary>
        /// Add SMTP Credential
        /// </summary>
        /// <remarks>
        /// Add new SMTP Credential. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smtpCredentialsPayload"></param>
        /// <returns>ApiResponse of NewSmtpCredentials</returns>
        ApiResponse<NewSmtpCredentials> SecuritySmtpPostWithHttpInfo(SmtpCredentialsPayload smtpCredentialsPayload);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecurityApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete ApiKey
        /// </summary>
        /// <remarks>
        /// Delete your existing ApiKey. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="subaccount">Email of the subaccount of which ApiKey should be deleted (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SecurityApikeysByNameDeleteAsync(string name, string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete ApiKey
        /// </summary>
        /// <remarks>
        /// Delete your existing ApiKey. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="subaccount">Email of the subaccount of which ApiKey should be deleted (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SecurityApikeysByNameDeleteWithHttpInfoAsync(string name, string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load ApiKey
        /// </summary>
        /// <remarks>
        /// Load your existing ApiKey info. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="subaccount">Email of the subaccount of which ApiKey should be loaded (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiKey</returns>
        System.Threading.Tasks.Task<ApiKey> SecurityApikeysByNameGetAsync(string name, string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load ApiKey
        /// </summary>
        /// <remarks>
        /// Load your existing ApiKey info. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="subaccount">Email of the subaccount of which ApiKey should be loaded (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKey>> SecurityApikeysByNameGetWithHttpInfoAsync(string name, string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update ApiKey
        /// </summary>
        /// <remarks>
        /// Update your existing ApiKey. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="apiKeyPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiKey</returns>
        System.Threading.Tasks.Task<ApiKey> SecurityApikeysByNamePutAsync(string name, ApiKeyPayload apiKeyPayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update ApiKey
        /// </summary>
        /// <remarks>
        /// Update your existing ApiKey. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="apiKeyPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKey>> SecurityApikeysByNamePutWithHttpInfoAsync(string name, ApiKeyPayload apiKeyPayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List ApiKeys
        /// </summary>
        /// <remarks>
        /// List all your existing ApiKeys. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccount">Email of the subaccount of which ApiKeys should be loaded (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ApiKey&gt;</returns>
        System.Threading.Tasks.Task<List<ApiKey>> SecurityApikeysGetAsync(string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List ApiKeys
        /// </summary>
        /// <remarks>
        /// List all your existing ApiKeys. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccount">Email of the subaccount of which ApiKeys should be loaded (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ApiKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ApiKey>>> SecurityApikeysGetWithHttpInfoAsync(string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add ApiKey
        /// </summary>
        /// <remarks>
        /// Add a new ApiKey. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewApiKey</returns>
        System.Threading.Tasks.Task<NewApiKey> SecurityApikeysPostAsync(ApiKeyPayload apiKeyPayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add ApiKey
        /// </summary>
        /// <remarks>
        /// Add a new ApiKey. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewApiKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewApiKey>> SecurityApikeysPostWithHttpInfoAsync(ApiKeyPayload apiKeyPayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete SMTP Credential
        /// </summary>
        /// <remarks>
        /// Delete your existing SMTP Credentials. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="subaccount">Email of the subaccount of which credential should be deleted (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SecuritySmtpByNameDeleteAsync(string name, string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete SMTP Credential
        /// </summary>
        /// <remarks>
        /// Delete your existing SMTP Credentials. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="subaccount">Email of the subaccount of which credential should be deleted (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SecuritySmtpByNameDeleteWithHttpInfoAsync(string name, string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load SMTP Credential
        /// </summary>
        /// <remarks>
        /// Load your existing SMTP Credential info. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="subaccount">Email of the subaccount of which credential should be loaded (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmtpCredentials</returns>
        System.Threading.Tasks.Task<SmtpCredentials> SecuritySmtpByNameGetAsync(string name, string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load SMTP Credential
        /// </summary>
        /// <remarks>
        /// Load your existing SMTP Credential info. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="subaccount">Email of the subaccount of which credential should be loaded (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmtpCredentials)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmtpCredentials>> SecuritySmtpByNameGetWithHttpInfoAsync(string name, string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update SMTP Credential
        /// </summary>
        /// <remarks>
        /// Update your existing SMTP Credentials. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="smtpCredentialsPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmtpCredentials</returns>
        System.Threading.Tasks.Task<SmtpCredentials> SecuritySmtpByNamePutAsync(string name, SmtpCredentialsPayload smtpCredentialsPayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update SMTP Credential
        /// </summary>
        /// <remarks>
        /// Update your existing SMTP Credentials. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="smtpCredentialsPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmtpCredentials)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmtpCredentials>> SecuritySmtpByNamePutWithHttpInfoAsync(string name, SmtpCredentialsPayload smtpCredentialsPayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List SMTP Credentials
        /// </summary>
        /// <remarks>
        /// List all your existing SMTP Credentials. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccount">Email of the subaccount of which credentials should be listed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SmtpCredentials&gt;</returns>
        System.Threading.Tasks.Task<List<SmtpCredentials>> SecuritySmtpGetAsync(string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List SMTP Credentials
        /// </summary>
        /// <remarks>
        /// List all your existing SMTP Credentials. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccount">Email of the subaccount of which credentials should be listed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SmtpCredentials&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SmtpCredentials>>> SecuritySmtpGetWithHttpInfoAsync(string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add SMTP Credential
        /// </summary>
        /// <remarks>
        /// Add new SMTP Credential. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smtpCredentialsPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewSmtpCredentials</returns>
        System.Threading.Tasks.Task<NewSmtpCredentials> SecuritySmtpPostAsync(SmtpCredentialsPayload smtpCredentialsPayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add SMTP Credential
        /// </summary>
        /// <remarks>
        /// Add new SMTP Credential. Required Access Level: Security
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smtpCredentialsPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewSmtpCredentials)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewSmtpCredentials>> SecuritySmtpPostWithHttpInfoAsync(SmtpCredentialsPayload smtpCredentialsPayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecurityApi : ISecurityApiSync, ISecurityApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SecurityApi : ISecurityApi
    {
        private ElasticEmail.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecurityApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecurityApi(string basePath)
        {
            this.Configuration = ElasticEmail.Client.Configuration.MergeConfigurations(
                ElasticEmail.Client.GlobalConfiguration.Instance,
                new ElasticEmail.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SecurityApi(ElasticEmail.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ElasticEmail.Client.Configuration.MergeConfigurations(
                ElasticEmail.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SecurityApi(ElasticEmail.Client.ISynchronousClient client, ElasticEmail.Client.IAsynchronousClient asyncClient, ElasticEmail.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ElasticEmail.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ElasticEmail.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ElasticEmail.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ElasticEmail.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete ApiKey Delete your existing ApiKey. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="subaccount">Email of the subaccount of which ApiKey should be deleted (optional)</param>
        /// <returns></returns>
        public void SecurityApikeysByNameDelete(string name, string subaccount = default(string))
        {
            SecurityApikeysByNameDeleteWithHttpInfo(name, subaccount);
        }

        /// <summary>
        /// Delete ApiKey Delete your existing ApiKey. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="subaccount">Email of the subaccount of which ApiKey should be deleted (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElasticEmail.Client.ApiResponse<Object> SecurityApikeysByNameDeleteWithHttpInfo(string name, string subaccount = default(string))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling SecurityApi->SecurityApikeysByNameDelete");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (subaccount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "subaccount", subaccount));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/security/apikeys/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SecurityApikeysByNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete ApiKey Delete your existing ApiKey. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="subaccount">Email of the subaccount of which ApiKey should be deleted (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SecurityApikeysByNameDeleteAsync(string name, string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SecurityApikeysByNameDeleteWithHttpInfoAsync(name, subaccount, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete ApiKey Delete your existing ApiKey. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="subaccount">Email of the subaccount of which ApiKey should be deleted (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<Object>> SecurityApikeysByNameDeleteWithHttpInfoAsync(string name, string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling SecurityApi->SecurityApikeysByNameDelete");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (subaccount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "subaccount", subaccount));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/security/apikeys/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SecurityApikeysByNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load ApiKey Load your existing ApiKey info. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="subaccount">Email of the subaccount of which ApiKey should be loaded (optional)</param>
        /// <returns>ApiKey</returns>
        public ApiKey SecurityApikeysByNameGet(string name, string subaccount = default(string))
        {
            ElasticEmail.Client.ApiResponse<ApiKey> localVarResponse = SecurityApikeysByNameGetWithHttpInfo(name, subaccount);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load ApiKey Load your existing ApiKey info. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="subaccount">Email of the subaccount of which ApiKey should be loaded (optional)</param>
        /// <returns>ApiResponse of ApiKey</returns>
        public ElasticEmail.Client.ApiResponse<ApiKey> SecurityApikeysByNameGetWithHttpInfo(string name, string subaccount = default(string))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling SecurityApi->SecurityApikeysByNameGet");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (subaccount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "subaccount", subaccount));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiKey>("/security/apikeys/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SecurityApikeysByNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load ApiKey Load your existing ApiKey info. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="subaccount">Email of the subaccount of which ApiKey should be loaded (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiKey</returns>
        public async System.Threading.Tasks.Task<ApiKey> SecurityApikeysByNameGetAsync(string name, string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<ApiKey> localVarResponse = await SecurityApikeysByNameGetWithHttpInfoAsync(name, subaccount, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load ApiKey Load your existing ApiKey info. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="subaccount">Email of the subaccount of which ApiKey should be loaded (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiKey)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<ApiKey>> SecurityApikeysByNameGetWithHttpInfoAsync(string name, string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling SecurityApi->SecurityApikeysByNameGet");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (subaccount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "subaccount", subaccount));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiKey>("/security/apikeys/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SecurityApikeysByNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update ApiKey Update your existing ApiKey. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="apiKeyPayload"></param>
        /// <returns>ApiKey</returns>
        public ApiKey SecurityApikeysByNamePut(string name, ApiKeyPayload apiKeyPayload)
        {
            ElasticEmail.Client.ApiResponse<ApiKey> localVarResponse = SecurityApikeysByNamePutWithHttpInfo(name, apiKeyPayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update ApiKey Update your existing ApiKey. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="apiKeyPayload"></param>
        /// <returns>ApiResponse of ApiKey</returns>
        public ElasticEmail.Client.ApiResponse<ApiKey> SecurityApikeysByNamePutWithHttpInfo(string name, ApiKeyPayload apiKeyPayload)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling SecurityApi->SecurityApikeysByNamePut");
            }

            // verify the required parameter 'apiKeyPayload' is set
            if (apiKeyPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'apiKeyPayload' when calling SecurityApi->SecurityApikeysByNamePut");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = apiKeyPayload;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiKey>("/security/apikeys/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SecurityApikeysByNamePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update ApiKey Update your existing ApiKey. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="apiKeyPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiKey</returns>
        public async System.Threading.Tasks.Task<ApiKey> SecurityApikeysByNamePutAsync(string name, ApiKeyPayload apiKeyPayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<ApiKey> localVarResponse = await SecurityApikeysByNamePutWithHttpInfoAsync(name, apiKeyPayload, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update ApiKey Update your existing ApiKey. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the ApiKey</param>
        /// <param name="apiKeyPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiKey)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<ApiKey>> SecurityApikeysByNamePutWithHttpInfoAsync(string name, ApiKeyPayload apiKeyPayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling SecurityApi->SecurityApikeysByNamePut");
            }

            // verify the required parameter 'apiKeyPayload' is set
            if (apiKeyPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'apiKeyPayload' when calling SecurityApi->SecurityApikeysByNamePut");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = apiKeyPayload;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiKey>("/security/apikeys/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SecurityApikeysByNamePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List ApiKeys List all your existing ApiKeys. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccount">Email of the subaccount of which ApiKeys should be loaded (optional)</param>
        /// <returns>List&lt;ApiKey&gt;</returns>
        public List<ApiKey> SecurityApikeysGet(string subaccount = default(string))
        {
            ElasticEmail.Client.ApiResponse<List<ApiKey>> localVarResponse = SecurityApikeysGetWithHttpInfo(subaccount);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List ApiKeys List all your existing ApiKeys. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccount">Email of the subaccount of which ApiKeys should be loaded (optional)</param>
        /// <returns>ApiResponse of List&lt;ApiKey&gt;</returns>
        public ElasticEmail.Client.ApiResponse<List<ApiKey>> SecurityApikeysGetWithHttpInfo(string subaccount = default(string))
        {
            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subaccount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "subaccount", subaccount));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ApiKey>>("/security/apikeys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SecurityApikeysGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List ApiKeys List all your existing ApiKeys. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccount">Email of the subaccount of which ApiKeys should be loaded (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ApiKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<ApiKey>> SecurityApikeysGetAsync(string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<List<ApiKey>> localVarResponse = await SecurityApikeysGetWithHttpInfoAsync(subaccount, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List ApiKeys List all your existing ApiKeys. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccount">Email of the subaccount of which ApiKeys should be loaded (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ApiKey&gt;)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<List<ApiKey>>> SecurityApikeysGetWithHttpInfoAsync(string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subaccount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "subaccount", subaccount));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ApiKey>>("/security/apikeys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SecurityApikeysGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add ApiKey Add a new ApiKey. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyPayload"></param>
        /// <returns>NewApiKey</returns>
        public NewApiKey SecurityApikeysPost(ApiKeyPayload apiKeyPayload)
        {
            ElasticEmail.Client.ApiResponse<NewApiKey> localVarResponse = SecurityApikeysPostWithHttpInfo(apiKeyPayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add ApiKey Add a new ApiKey. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyPayload"></param>
        /// <returns>ApiResponse of NewApiKey</returns>
        public ElasticEmail.Client.ApiResponse<NewApiKey> SecurityApikeysPostWithHttpInfo(ApiKeyPayload apiKeyPayload)
        {
            // verify the required parameter 'apiKeyPayload' is set
            if (apiKeyPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'apiKeyPayload' when calling SecurityApi->SecurityApikeysPost");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = apiKeyPayload;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<NewApiKey>("/security/apikeys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SecurityApikeysPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add ApiKey Add a new ApiKey. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewApiKey</returns>
        public async System.Threading.Tasks.Task<NewApiKey> SecurityApikeysPostAsync(ApiKeyPayload apiKeyPayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<NewApiKey> localVarResponse = await SecurityApikeysPostWithHttpInfoAsync(apiKeyPayload, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add ApiKey Add a new ApiKey. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewApiKey)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<NewApiKey>> SecurityApikeysPostWithHttpInfoAsync(ApiKeyPayload apiKeyPayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiKeyPayload' is set
            if (apiKeyPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'apiKeyPayload' when calling SecurityApi->SecurityApikeysPost");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = apiKeyPayload;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NewApiKey>("/security/apikeys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SecurityApikeysPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete SMTP Credential Delete your existing SMTP Credentials. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="subaccount">Email of the subaccount of which credential should be deleted (optional)</param>
        /// <returns></returns>
        public void SecuritySmtpByNameDelete(string name, string subaccount = default(string))
        {
            SecuritySmtpByNameDeleteWithHttpInfo(name, subaccount);
        }

        /// <summary>
        /// Delete SMTP Credential Delete your existing SMTP Credentials. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="subaccount">Email of the subaccount of which credential should be deleted (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElasticEmail.Client.ApiResponse<Object> SecuritySmtpByNameDeleteWithHttpInfo(string name, string subaccount = default(string))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling SecurityApi->SecuritySmtpByNameDelete");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (subaccount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "subaccount", subaccount));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/security/smtp/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SecuritySmtpByNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete SMTP Credential Delete your existing SMTP Credentials. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="subaccount">Email of the subaccount of which credential should be deleted (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SecuritySmtpByNameDeleteAsync(string name, string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SecuritySmtpByNameDeleteWithHttpInfoAsync(name, subaccount, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete SMTP Credential Delete your existing SMTP Credentials. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="subaccount">Email of the subaccount of which credential should be deleted (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<Object>> SecuritySmtpByNameDeleteWithHttpInfoAsync(string name, string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling SecurityApi->SecuritySmtpByNameDelete");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (subaccount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "subaccount", subaccount));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/security/smtp/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SecuritySmtpByNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load SMTP Credential Load your existing SMTP Credential info. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="subaccount">Email of the subaccount of which credential should be loaded (optional)</param>
        /// <returns>SmtpCredentials</returns>
        public SmtpCredentials SecuritySmtpByNameGet(string name, string subaccount = default(string))
        {
            ElasticEmail.Client.ApiResponse<SmtpCredentials> localVarResponse = SecuritySmtpByNameGetWithHttpInfo(name, subaccount);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load SMTP Credential Load your existing SMTP Credential info. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="subaccount">Email of the subaccount of which credential should be loaded (optional)</param>
        /// <returns>ApiResponse of SmtpCredentials</returns>
        public ElasticEmail.Client.ApiResponse<SmtpCredentials> SecuritySmtpByNameGetWithHttpInfo(string name, string subaccount = default(string))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling SecurityApi->SecuritySmtpByNameGet");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (subaccount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "subaccount", subaccount));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SmtpCredentials>("/security/smtp/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SecuritySmtpByNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load SMTP Credential Load your existing SMTP Credential info. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="subaccount">Email of the subaccount of which credential should be loaded (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmtpCredentials</returns>
        public async System.Threading.Tasks.Task<SmtpCredentials> SecuritySmtpByNameGetAsync(string name, string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<SmtpCredentials> localVarResponse = await SecuritySmtpByNameGetWithHttpInfoAsync(name, subaccount, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load SMTP Credential Load your existing SMTP Credential info. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="subaccount">Email of the subaccount of which credential should be loaded (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmtpCredentials)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<SmtpCredentials>> SecuritySmtpByNameGetWithHttpInfoAsync(string name, string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling SecurityApi->SecuritySmtpByNameGet");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (subaccount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "subaccount", subaccount));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SmtpCredentials>("/security/smtp/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SecuritySmtpByNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update SMTP Credential Update your existing SMTP Credentials. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="smtpCredentialsPayload"></param>
        /// <returns>SmtpCredentials</returns>
        public SmtpCredentials SecuritySmtpByNamePut(string name, SmtpCredentialsPayload smtpCredentialsPayload)
        {
            ElasticEmail.Client.ApiResponse<SmtpCredentials> localVarResponse = SecuritySmtpByNamePutWithHttpInfo(name, smtpCredentialsPayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update SMTP Credential Update your existing SMTP Credentials. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="smtpCredentialsPayload"></param>
        /// <returns>ApiResponse of SmtpCredentials</returns>
        public ElasticEmail.Client.ApiResponse<SmtpCredentials> SecuritySmtpByNamePutWithHttpInfo(string name, SmtpCredentialsPayload smtpCredentialsPayload)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling SecurityApi->SecuritySmtpByNamePut");
            }

            // verify the required parameter 'smtpCredentialsPayload' is set
            if (smtpCredentialsPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'smtpCredentialsPayload' when calling SecurityApi->SecuritySmtpByNamePut");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = smtpCredentialsPayload;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SmtpCredentials>("/security/smtp/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SecuritySmtpByNamePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update SMTP Credential Update your existing SMTP Credentials. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="smtpCredentialsPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmtpCredentials</returns>
        public async System.Threading.Tasks.Task<SmtpCredentials> SecuritySmtpByNamePutAsync(string name, SmtpCredentialsPayload smtpCredentialsPayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<SmtpCredentials> localVarResponse = await SecuritySmtpByNamePutWithHttpInfoAsync(name, smtpCredentialsPayload, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update SMTP Credential Update your existing SMTP Credentials. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the SMTP Credential</param>
        /// <param name="smtpCredentialsPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmtpCredentials)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<SmtpCredentials>> SecuritySmtpByNamePutWithHttpInfoAsync(string name, SmtpCredentialsPayload smtpCredentialsPayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling SecurityApi->SecuritySmtpByNamePut");
            }

            // verify the required parameter 'smtpCredentialsPayload' is set
            if (smtpCredentialsPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'smtpCredentialsPayload' when calling SecurityApi->SecuritySmtpByNamePut");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = smtpCredentialsPayload;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SmtpCredentials>("/security/smtp/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SecuritySmtpByNamePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List SMTP Credentials List all your existing SMTP Credentials. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccount">Email of the subaccount of which credentials should be listed (optional)</param>
        /// <returns>List&lt;SmtpCredentials&gt;</returns>
        public List<SmtpCredentials> SecuritySmtpGet(string subaccount = default(string))
        {
            ElasticEmail.Client.ApiResponse<List<SmtpCredentials>> localVarResponse = SecuritySmtpGetWithHttpInfo(subaccount);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List SMTP Credentials List all your existing SMTP Credentials. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccount">Email of the subaccount of which credentials should be listed (optional)</param>
        /// <returns>ApiResponse of List&lt;SmtpCredentials&gt;</returns>
        public ElasticEmail.Client.ApiResponse<List<SmtpCredentials>> SecuritySmtpGetWithHttpInfo(string subaccount = default(string))
        {
            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subaccount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "subaccount", subaccount));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SmtpCredentials>>("/security/smtp", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SecuritySmtpGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List SMTP Credentials List all your existing SMTP Credentials. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccount">Email of the subaccount of which credentials should be listed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SmtpCredentials&gt;</returns>
        public async System.Threading.Tasks.Task<List<SmtpCredentials>> SecuritySmtpGetAsync(string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<List<SmtpCredentials>> localVarResponse = await SecuritySmtpGetWithHttpInfoAsync(subaccount, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List SMTP Credentials List all your existing SMTP Credentials. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccount">Email of the subaccount of which credentials should be listed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SmtpCredentials&gt;)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<List<SmtpCredentials>>> SecuritySmtpGetWithHttpInfoAsync(string subaccount = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subaccount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "subaccount", subaccount));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SmtpCredentials>>("/security/smtp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SecuritySmtpGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add SMTP Credential Add new SMTP Credential. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smtpCredentialsPayload"></param>
        /// <returns>NewSmtpCredentials</returns>
        public NewSmtpCredentials SecuritySmtpPost(SmtpCredentialsPayload smtpCredentialsPayload)
        {
            ElasticEmail.Client.ApiResponse<NewSmtpCredentials> localVarResponse = SecuritySmtpPostWithHttpInfo(smtpCredentialsPayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add SMTP Credential Add new SMTP Credential. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smtpCredentialsPayload"></param>
        /// <returns>ApiResponse of NewSmtpCredentials</returns>
        public ElasticEmail.Client.ApiResponse<NewSmtpCredentials> SecuritySmtpPostWithHttpInfo(SmtpCredentialsPayload smtpCredentialsPayload)
        {
            // verify the required parameter 'smtpCredentialsPayload' is set
            if (smtpCredentialsPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'smtpCredentialsPayload' when calling SecurityApi->SecuritySmtpPost");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = smtpCredentialsPayload;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<NewSmtpCredentials>("/security/smtp", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SecuritySmtpPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add SMTP Credential Add new SMTP Credential. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smtpCredentialsPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewSmtpCredentials</returns>
        public async System.Threading.Tasks.Task<NewSmtpCredentials> SecuritySmtpPostAsync(SmtpCredentialsPayload smtpCredentialsPayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<NewSmtpCredentials> localVarResponse = await SecuritySmtpPostWithHttpInfoAsync(smtpCredentialsPayload, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add SMTP Credential Add new SMTP Credential. Required Access Level: Security
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smtpCredentialsPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewSmtpCredentials)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<NewSmtpCredentials>> SecuritySmtpPostWithHttpInfoAsync(SmtpCredentialsPayload smtpCredentialsPayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'smtpCredentialsPayload' is set
            if (smtpCredentialsPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'smtpCredentialsPayload' when calling SecurityApi->SecuritySmtpPost");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = smtpCredentialsPayload;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NewSmtpCredentials>("/security/smtp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SecuritySmtpPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
