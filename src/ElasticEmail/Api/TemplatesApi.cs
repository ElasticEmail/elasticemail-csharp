/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ElasticEmail.Client;
using ElasticEmail.Model;

namespace ElasticEmail.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Template
        /// </summary>
        /// <remarks>
        /// Delete template with the specified name. Required Access Level: ModifyTemplates
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <returns></returns>
        void TemplatesByNameDelete(string name);

        /// <summary>
        /// Delete Template
        /// </summary>
        /// <remarks>
        /// Delete template with the specified name. Required Access Level: ModifyTemplates
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplatesByNameDeleteWithHttpInfo(string name);
        /// <summary>
        /// Load Template
        /// </summary>
        /// <remarks>
        /// Load detailed information of the specified template. Required Access Level: ViewTemplates
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <returns>Template</returns>
        Template TemplatesByNameGet(string name);

        /// <summary>
        /// Load Template
        /// </summary>
        /// <remarks>
        /// Load detailed information of the specified template. Required Access Level: ViewTemplates
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> TemplatesByNameGetWithHttpInfo(string name);
        /// <summary>
        /// Update Template
        /// </summary>
        /// <remarks>
        /// Update existing template, overwriting existing data. Required Access Level: ModifyTemplates
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <param name="templatePayload"></param>
        /// <returns>Template</returns>
        Template TemplatesByNamePut(string name, TemplatePayload templatePayload);

        /// <summary>
        /// Update Template
        /// </summary>
        /// <remarks>
        /// Update existing template, overwriting existing data. Required Access Level: ModifyTemplates
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <param name="templatePayload"></param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> TemplatesByNamePutWithHttpInfo(string name, TemplatePayload templatePayload);
        /// <summary>
        /// Load Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of templates for the specified type. Required Access Level: ViewTemplates
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scopeType">Return templates with specified scope only</param>
        /// <param name="templateTypes">Return templates with specified type only (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        List<Template> TemplatesGet(List<TemplateScope> scopeType, List<TemplateType> templateTypes = default(List<TemplateType>), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Load Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of templates for the specified type. Required Access Level: ViewTemplates
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scopeType">Return templates with specified scope only</param>
        /// <param name="templateTypes">Return templates with specified type only (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        ApiResponse<List<Template>> TemplatesGetWithHttpInfo(List<TemplateScope> scopeType, List<TemplateType> templateTypes = default(List<TemplateType>), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Add Template
        /// </summary>
        /// <remarks>
        /// Add a new Template. Required Access Level: ModifyTemplates
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templatePayload"></param>
        /// <returns>Template</returns>
        Template TemplatesPost(TemplatePayload templatePayload);

        /// <summary>
        /// Add Template
        /// </summary>
        /// <remarks>
        /// Add a new Template. Required Access Level: ModifyTemplates
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templatePayload"></param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> TemplatesPostWithHttpInfo(TemplatePayload templatePayload);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Template
        /// </summary>
        /// <remarks>
        /// Delete template with the specified name. Required Access Level: ModifyTemplates
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplatesByNameDeleteAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Template
        /// </summary>
        /// <remarks>
        /// Delete template with the specified name. Required Access Level: ModifyTemplates
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesByNameDeleteWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load Template
        /// </summary>
        /// <remarks>
        /// Load detailed information of the specified template. Required Access Level: ViewTemplates
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> TemplatesByNameGetAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load Template
        /// </summary>
        /// <remarks>
        /// Load detailed information of the specified template. Required Access Level: ViewTemplates
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesByNameGetWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Template
        /// </summary>
        /// <remarks>
        /// Update existing template, overwriting existing data. Required Access Level: ModifyTemplates
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <param name="templatePayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> TemplatesByNamePutAsync(string name, TemplatePayload templatePayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Template
        /// </summary>
        /// <remarks>
        /// Update existing template, overwriting existing data. Required Access Level: ModifyTemplates
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <param name="templatePayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesByNamePutWithHttpInfoAsync(string name, TemplatePayload templatePayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of templates for the specified type. Required Access Level: ViewTemplates
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scopeType">Return templates with specified scope only</param>
        /// <param name="templateTypes">Return templates with specified type only (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        System.Threading.Tasks.Task<List<Template>> TemplatesGetAsync(List<TemplateScope> scopeType, List<TemplateType> templateTypes = default(List<TemplateType>), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of templates for the specified type. Required Access Level: ViewTemplates
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scopeType">Return templates with specified scope only</param>
        /// <param name="templateTypes">Return templates with specified type only (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Template>>> TemplatesGetWithHttpInfoAsync(List<TemplateScope> scopeType, List<TemplateType> templateTypes = default(List<TemplateType>), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Template
        /// </summary>
        /// <remarks>
        /// Add a new Template. Required Access Level: ModifyTemplates
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templatePayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> TemplatesPostAsync(TemplatePayload templatePayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Template
        /// </summary>
        /// <remarks>
        /// Add a new Template. Required Access Level: ModifyTemplates
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templatePayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesPostWithHttpInfoAsync(TemplatePayload templatePayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApi : ITemplatesApiSync, ITemplatesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplatesApi : ITemplatesApi
    {
        private ElasticEmail.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatesApi(string basePath)
        {
            this.Configuration = ElasticEmail.Client.Configuration.MergeConfigurations(
                ElasticEmail.Client.GlobalConfiguration.Instance,
                new ElasticEmail.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplatesApi(ElasticEmail.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ElasticEmail.Client.Configuration.MergeConfigurations(
                ElasticEmail.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TemplatesApi(ElasticEmail.Client.ISynchronousClient client, ElasticEmail.Client.IAsynchronousClient asyncClient, ElasticEmail.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ElasticEmail.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ElasticEmail.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ElasticEmail.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ElasticEmail.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Template Delete template with the specified name. Required Access Level: ModifyTemplates
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <returns></returns>
        public void TemplatesByNameDelete(string name)
        {
            TemplatesByNameDeleteWithHttpInfo(name);
        }

        /// <summary>
        /// Delete Template Delete template with the specified name. Required Access Level: ModifyTemplates
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElasticEmail.Client.ApiResponse<Object> TemplatesByNameDeleteWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling TemplatesApi->TemplatesByNameDelete");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/templates/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplatesByNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Template Delete template with the specified name. Required Access Level: ModifyTemplates
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplatesByNameDeleteAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await TemplatesByNameDeleteWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Template Delete template with the specified name. Required Access Level: ModifyTemplates
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<Object>> TemplatesByNameDeleteWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling TemplatesApi->TemplatesByNameDelete");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/templates/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplatesByNameDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Template Load detailed information of the specified template. Required Access Level: ViewTemplates
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <returns>Template</returns>
        public Template TemplatesByNameGet(string name)
        {
            ElasticEmail.Client.ApiResponse<Template> localVarResponse = TemplatesByNameGetWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Template Load detailed information of the specified template. Required Access Level: ViewTemplates
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <returns>ApiResponse of Template</returns>
        public ElasticEmail.Client.ApiResponse<Template> TemplatesByNameGetWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling TemplatesApi->TemplatesByNameGet");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Template>("/templates/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplatesByNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Template Load detailed information of the specified template. Required Access Level: ViewTemplates
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> TemplatesByNameGetAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<Template> localVarResponse = await TemplatesByNameGetWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Template Load detailed information of the specified template. Required Access Level: ViewTemplates
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<Template>> TemplatesByNameGetWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling TemplatesApi->TemplatesByNameGet");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Template>("/templates/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplatesByNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Template Update existing template, overwriting existing data. Required Access Level: ModifyTemplates
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <param name="templatePayload"></param>
        /// <returns>Template</returns>
        public Template TemplatesByNamePut(string name, TemplatePayload templatePayload)
        {
            ElasticEmail.Client.ApiResponse<Template> localVarResponse = TemplatesByNamePutWithHttpInfo(name, templatePayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Template Update existing template, overwriting existing data. Required Access Level: ModifyTemplates
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <param name="templatePayload"></param>
        /// <returns>ApiResponse of Template</returns>
        public ElasticEmail.Client.ApiResponse<Template> TemplatesByNamePutWithHttpInfo(string name, TemplatePayload templatePayload)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling TemplatesApi->TemplatesByNamePut");
            }

            // verify the required parameter 'templatePayload' is set
            if (templatePayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'templatePayload' when calling TemplatesApi->TemplatesByNamePut");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = templatePayload;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Template>("/templates/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplatesByNamePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Template Update existing template, overwriting existing data. Required Access Level: ModifyTemplates
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <param name="templatePayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> TemplatesByNamePutAsync(string name, TemplatePayload templatePayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<Template> localVarResponse = await TemplatesByNamePutWithHttpInfoAsync(name, templatePayload, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Template Update existing template, overwriting existing data. Required Access Level: ModifyTemplates
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of template.</param>
        /// <param name="templatePayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<Template>> TemplatesByNamePutWithHttpInfoAsync(string name, TemplatePayload templatePayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'name' when calling TemplatesApi->TemplatesByNamePut");
            }

            // verify the required parameter 'templatePayload' is set
            if (templatePayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'templatePayload' when calling TemplatesApi->TemplatesByNamePut");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", ElasticEmail.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = templatePayload;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Template>("/templates/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplatesByNamePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Templates Returns a list of templates for the specified type. Required Access Level: ViewTemplates
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scopeType">Return templates with specified scope only</param>
        /// <param name="templateTypes">Return templates with specified type only (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        public List<Template> TemplatesGet(List<TemplateScope> scopeType, List<TemplateType> templateTypes = default(List<TemplateType>), int? limit = default(int?), int? offset = default(int?))
        {
            ElasticEmail.Client.ApiResponse<List<Template>> localVarResponse = TemplatesGetWithHttpInfo(scopeType, templateTypes, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Templates Returns a list of templates for the specified type. Required Access Level: ViewTemplates
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scopeType">Return templates with specified scope only</param>
        /// <param name="templateTypes">Return templates with specified type only (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        public ElasticEmail.Client.ApiResponse<List<Template>> TemplatesGetWithHttpInfo(List<TemplateScope> scopeType, List<TemplateType> templateTypes = default(List<TemplateType>), int? limit = default(int?), int? offset = default(int?))
        {
            // verify the required parameter 'scopeType' is set
            if (scopeType == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'scopeType' when calling TemplatesApi->TemplatesGet");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("multi", "scopeType", scopeType));
            if (templateTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("multi", "templateTypes", templateTypes));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Template>>("/templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplatesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Templates Returns a list of templates for the specified type. Required Access Level: ViewTemplates
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scopeType">Return templates with specified scope only</param>
        /// <param name="templateTypes">Return templates with specified type only (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        public async System.Threading.Tasks.Task<List<Template>> TemplatesGetAsync(List<TemplateScope> scopeType, List<TemplateType> templateTypes = default(List<TemplateType>), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<List<Template>> localVarResponse = await TemplatesGetWithHttpInfoAsync(scopeType, templateTypes, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Templates Returns a list of templates for the specified type. Required Access Level: ViewTemplates
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scopeType">Return templates with specified scope only</param>
        /// <param name="templateTypes">Return templates with specified type only (optional)</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<List<Template>>> TemplatesGetWithHttpInfoAsync(List<TemplateScope> scopeType, List<TemplateType> templateTypes = default(List<TemplateType>), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scopeType' is set
            if (scopeType == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'scopeType' when calling TemplatesApi->TemplatesGet");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("multi", "scopeType", scopeType));
            if (templateTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("multi", "templateTypes", templateTypes));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Template>>("/templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplatesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Template Add a new Template. Required Access Level: ModifyTemplates
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templatePayload"></param>
        /// <returns>Template</returns>
        public Template TemplatesPost(TemplatePayload templatePayload)
        {
            ElasticEmail.Client.ApiResponse<Template> localVarResponse = TemplatesPostWithHttpInfo(templatePayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Template Add a new Template. Required Access Level: ModifyTemplates
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templatePayload"></param>
        /// <returns>ApiResponse of Template</returns>
        public ElasticEmail.Client.ApiResponse<Template> TemplatesPostWithHttpInfo(TemplatePayload templatePayload)
        {
            // verify the required parameter 'templatePayload' is set
            if (templatePayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'templatePayload' when calling TemplatesApi->TemplatesPost");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = templatePayload;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Template>("/templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplatesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Template Add a new Template. Required Access Level: ModifyTemplates
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templatePayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> TemplatesPostAsync(TemplatePayload templatePayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<Template> localVarResponse = await TemplatesPostWithHttpInfoAsync(templatePayload, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Template Add a new Template. Required Access Level: ModifyTemplates
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templatePayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<Template>> TemplatesPostWithHttpInfoAsync(TemplatePayload templatePayload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templatePayload' is set
            if (templatePayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'templatePayload' when calling TemplatesApi->TemplatesPost");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = templatePayload;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Template>("/templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplatesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
