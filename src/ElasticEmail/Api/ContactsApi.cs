/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ElasticEmail.Client;
using ElasticEmail.Model;

namespace ElasticEmail.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Contact
        /// </summary>
        /// <remarks>
        /// Deletes the provided contact. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ContactsByEmailDelete(string email, int operationIndex = 0);

        /// <summary>
        /// Delete Contact
        /// </summary>
        /// <remarks>
        /// Deletes the provided contact. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ContactsByEmailDeleteWithHttpInfo(string email, int operationIndex = 0);
        /// <summary>
        /// Load Contact
        /// </summary>
        /// <remarks>
        /// Load detailed contact information for specified email. Required Access Level: ViewContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contact</returns>
        Contact ContactsByEmailGet(string email, int operationIndex = 0);

        /// <summary>
        /// Load Contact
        /// </summary>
        /// <remarks>
        /// Load detailed contact information for specified email. Required Access Level: ViewContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contact</returns>
        ApiResponse<Contact> ContactsByEmailGetWithHttpInfo(string email, int operationIndex = 0);
        /// <summary>
        /// Load History
        /// </summary>
        /// <remarks>
        /// Returns detailed history of specified Contact. Required Access Level: ViewContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ContactHistory&gt;</returns>
        List<ContactHistory> ContactsByEmailHistoryGet(string email, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// Load History
        /// </summary>
        /// <remarks>
        /// Returns detailed history of specified Contact. Required Access Level: ViewContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ContactHistory&gt;</returns>
        ApiResponse<List<ContactHistory>> ContactsByEmailHistoryGetWithHttpInfo(string email, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// Update Contact
        /// </summary>
        /// <remarks>
        /// Update selected contact. Omitted contact&#39;s fields will not be changed. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="contactUpdatePayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contact</returns>
        Contact ContactsByEmailPut(string email, ContactUpdatePayload contactUpdatePayload, int operationIndex = 0);

        /// <summary>
        /// Update Contact
        /// </summary>
        /// <remarks>
        /// Update selected contact. Omitted contact&#39;s fields will not be changed. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="contactUpdatePayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contact</returns>
        ApiResponse<Contact> ContactsByEmailPutWithHttpInfo(string email, ContactUpdatePayload contactUpdatePayload, int operationIndex = 0);
        /// <summary>
        /// Delete Contacts Bulk
        /// </summary>
        /// <remarks>
        /// Deletes provided contacts in bulk. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ContactsDeletePost(EmailsPayload emailsPayload, int operationIndex = 0);

        /// <summary>
        /// Delete Contacts Bulk
        /// </summary>
        /// <remarks>
        /// Deletes provided contacts in bulk. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ContactsDeletePostWithHttpInfo(EmailsPayload emailsPayload, int operationIndex = 0);
        /// <summary>
        /// Check Export Status
        /// </summary>
        /// <remarks>
        /// Check the current status of the export. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExportStatus</returns>
        ExportStatus ContactsExportByIdStatusGet(string id, int operationIndex = 0);

        /// <summary>
        /// Check Export Status
        /// </summary>
        /// <remarks>
        /// Check the current status of the export. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExportStatus</returns>
        ApiResponse<ExportStatus> ContactsExportByIdStatusGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Export Contacts
        /// </summary>
        /// <remarks>
        /// Request an Export of specified Contacts. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="rule">Query used for filtering. (optional)</param>
        /// <param name="emails">Comma delimited list of contact emails (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExportLink</returns>
        ExportLink ContactsExportPost(ExportFileFormats? fileFormat = default(ExportFileFormats?), string rule = default(string), List<string> emails = default(List<string>), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string), int operationIndex = 0);

        /// <summary>
        /// Export Contacts
        /// </summary>
        /// <remarks>
        /// Request an Export of specified Contacts. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="rule">Query used for filtering. (optional)</param>
        /// <param name="emails">Comma delimited list of contact emails (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExportLink</returns>
        ApiResponse<ExportLink> ContactsExportPostWithHttpInfo(ExportFileFormats? fileFormat = default(ExportFileFormats?), string rule = default(string), List<string> emails = default(List<string>), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string), int operationIndex = 0);
        /// <summary>
        /// Load Contacts
        /// </summary>
        /// <remarks>
        /// Returns a list of contacts. Required Access Level: ViewContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Contact&gt;</returns>
        List<Contact> ContactsGet(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// Load Contacts
        /// </summary>
        /// <remarks>
        /// Returns a list of contacts. Required Access Level: ViewContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Contact&gt;</returns>
        ApiResponse<List<Contact>> ContactsGetWithHttpInfo(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// Upload Contacts
        /// </summary>
        /// <remarks>
        /// Upload contacts from a file. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">Name of an existing list to add these contacts to (optional)</param>
        /// <param name="encodingName">In what encoding the file is uploaded (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ContactsImportPost(string listName = default(string), string encodingName = default(string), System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0);

        /// <summary>
        /// Upload Contacts
        /// </summary>
        /// <remarks>
        /// Upload contacts from a file. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">Name of an existing list to add these contacts to (optional)</param>
        /// <param name="encodingName">In what encoding the file is uploaded (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ContactsImportPostWithHttpInfo(string listName = default(string), string encodingName = default(string), System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0);
        /// <summary>
        /// Add Contact
        /// </summary>
        /// <remarks>
        /// Add new Contacts to your Lists. Up to 1000 can be added (for more please refer to the import request). Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactPayload"></param>
        /// <param name="listnames">Names of lists to which the uploaded contacts should be added to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Contact&gt;</returns>
        List<Contact> ContactsPost(List<ContactPayload> contactPayload, List<string> listnames = default(List<string>), int operationIndex = 0);

        /// <summary>
        /// Add Contact
        /// </summary>
        /// <remarks>
        /// Add new Contacts to your Lists. Up to 1000 can be added (for more please refer to the import request). Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactPayload"></param>
        /// <param name="listnames">Names of lists to which the uploaded contacts should be added to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Contact&gt;</returns>
        ApiResponse<List<Contact>> ContactsPostWithHttpInfo(List<ContactPayload> contactPayload, List<string> listnames = default(List<string>), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Contact
        /// </summary>
        /// <remarks>
        /// Deletes the provided contact. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ContactsByEmailDeleteAsync(string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Contact
        /// </summary>
        /// <remarks>
        /// Deletes the provided contact. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ContactsByEmailDeleteWithHttpInfoAsync(string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load Contact
        /// </summary>
        /// <remarks>
        /// Load detailed contact information for specified email. Required Access Level: ViewContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contact</returns>
        System.Threading.Tasks.Task<Contact> ContactsByEmailGetAsync(string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load Contact
        /// </summary>
        /// <remarks>
        /// Load detailed contact information for specified email. Required Access Level: ViewContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contact>> ContactsByEmailGetWithHttpInfoAsync(string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load History
        /// </summary>
        /// <remarks>
        /// Returns detailed history of specified Contact. Required Access Level: ViewContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactHistory&gt;</returns>
        System.Threading.Tasks.Task<List<ContactHistory>> ContactsByEmailHistoryGetAsync(string email, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load History
        /// </summary>
        /// <remarks>
        /// Returns detailed history of specified Contact. Required Access Level: ViewContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContactHistory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContactHistory>>> ContactsByEmailHistoryGetWithHttpInfoAsync(string email, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Contact
        /// </summary>
        /// <remarks>
        /// Update selected contact. Omitted contact&#39;s fields will not be changed. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="contactUpdatePayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contact</returns>
        System.Threading.Tasks.Task<Contact> ContactsByEmailPutAsync(string email, ContactUpdatePayload contactUpdatePayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Contact
        /// </summary>
        /// <remarks>
        /// Update selected contact. Omitted contact&#39;s fields will not be changed. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="contactUpdatePayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contact>> ContactsByEmailPutWithHttpInfoAsync(string email, ContactUpdatePayload contactUpdatePayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Contacts Bulk
        /// </summary>
        /// <remarks>
        /// Deletes provided contacts in bulk. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ContactsDeletePostAsync(EmailsPayload emailsPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Contacts Bulk
        /// </summary>
        /// <remarks>
        /// Deletes provided contacts in bulk. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ContactsDeletePostWithHttpInfoAsync(EmailsPayload emailsPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check Export Status
        /// </summary>
        /// <remarks>
        /// Check the current status of the export. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportStatus</returns>
        System.Threading.Tasks.Task<ExportStatus> ContactsExportByIdStatusGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check Export Status
        /// </summary>
        /// <remarks>
        /// Check the current status of the export. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExportStatus>> ContactsExportByIdStatusGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export Contacts
        /// </summary>
        /// <remarks>
        /// Request an Export of specified Contacts. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="rule">Query used for filtering. (optional)</param>
        /// <param name="emails">Comma delimited list of contact emails (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportLink</returns>
        System.Threading.Tasks.Task<ExportLink> ContactsExportPostAsync(ExportFileFormats? fileFormat = default(ExportFileFormats?), string rule = default(string), List<string> emails = default(List<string>), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export Contacts
        /// </summary>
        /// <remarks>
        /// Request an Export of specified Contacts. Required Access Level: Export
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="rule">Query used for filtering. (optional)</param>
        /// <param name="emails">Comma delimited list of contact emails (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExportLink>> ContactsExportPostWithHttpInfoAsync(ExportFileFormats? fileFormat = default(ExportFileFormats?), string rule = default(string), List<string> emails = default(List<string>), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load Contacts
        /// </summary>
        /// <remarks>
        /// Returns a list of contacts. Required Access Level: ViewContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Contact&gt;</returns>
        System.Threading.Tasks.Task<List<Contact>> ContactsGetAsync(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load Contacts
        /// </summary>
        /// <remarks>
        /// Returns a list of contacts. Required Access Level: ViewContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Contact&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Contact>>> ContactsGetWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload Contacts
        /// </summary>
        /// <remarks>
        /// Upload contacts from a file. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">Name of an existing list to add these contacts to (optional)</param>
        /// <param name="encodingName">In what encoding the file is uploaded (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ContactsImportPostAsync(string listName = default(string), string encodingName = default(string), System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload Contacts
        /// </summary>
        /// <remarks>
        /// Upload contacts from a file. Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">Name of an existing list to add these contacts to (optional)</param>
        /// <param name="encodingName">In what encoding the file is uploaded (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ContactsImportPostWithHttpInfoAsync(string listName = default(string), string encodingName = default(string), System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Contact
        /// </summary>
        /// <remarks>
        /// Add new Contacts to your Lists. Up to 1000 can be added (for more please refer to the import request). Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactPayload"></param>
        /// <param name="listnames">Names of lists to which the uploaded contacts should be added to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Contact&gt;</returns>
        System.Threading.Tasks.Task<List<Contact>> ContactsPostAsync(List<ContactPayload> contactPayload, List<string> listnames = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Contact
        /// </summary>
        /// <remarks>
        /// Add new Contacts to your Lists. Up to 1000 can be added (for more please refer to the import request). Required Access Level: ModifyContacts
        /// </remarks>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactPayload"></param>
        /// <param name="listnames">Names of lists to which the uploaded contacts should be added to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Contact&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Contact>>> ContactsPostWithHttpInfoAsync(List<ContactPayload> contactPayload, List<string> listnames = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsApi : IContactsApiSync, IContactsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactsApi : IContactsApi
    {
        private ElasticEmail.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsApi(string basePath)
        {
            this.Configuration = ElasticEmail.Client.Configuration.MergeConfigurations(
                ElasticEmail.Client.GlobalConfiguration.Instance,
                new ElasticEmail.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactsApi(ElasticEmail.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ElasticEmail.Client.Configuration.MergeConfigurations(
                ElasticEmail.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElasticEmail.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ContactsApi(ElasticEmail.Client.ISynchronousClient client, ElasticEmail.Client.IAsynchronousClient asyncClient, ElasticEmail.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ElasticEmail.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ElasticEmail.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ElasticEmail.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ElasticEmail.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ElasticEmail.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Contact Deletes the provided contact. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ContactsByEmailDelete(string email, int operationIndex = 0)
        {
            ContactsByEmailDeleteWithHttpInfo(email);
        }

        /// <summary>
        /// Delete Contact Deletes the provided contact. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElasticEmail.Client.ApiResponse<Object> ContactsByEmailDeleteWithHttpInfo(string email, int operationIndex = 0)
        {
            // verify the required parameter 'email' is set
            if (email == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'email' when calling ContactsApi->ContactsByEmailDelete");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("email", ElasticEmail.Client.ClientUtils.ParameterToString(email)); // path parameter

            localVarRequestOptions.Operation = "ContactsApi.ContactsByEmailDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/contacts/{email}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContactsByEmailDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Contact Deletes the provided contact. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ContactsByEmailDeleteAsync(string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ContactsByEmailDeleteWithHttpInfoAsync(email, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Contact Deletes the provided contact. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<Object>> ContactsByEmailDeleteWithHttpInfoAsync(string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'email' is set
            if (email == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'email' when calling ContactsApi->ContactsByEmailDelete");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("email", ElasticEmail.Client.ClientUtils.ParameterToString(email)); // path parameter

            localVarRequestOptions.Operation = "ContactsApi.ContactsByEmailDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/contacts/{email}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContactsByEmailDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Contact Load detailed contact information for specified email. Required Access Level: ViewContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contact</returns>
        public Contact ContactsByEmailGet(string email, int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<Contact> localVarResponse = ContactsByEmailGetWithHttpInfo(email);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Contact Load detailed contact information for specified email. Required Access Level: ViewContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contact</returns>
        public ElasticEmail.Client.ApiResponse<Contact> ContactsByEmailGetWithHttpInfo(string email, int operationIndex = 0)
        {
            // verify the required parameter 'email' is set
            if (email == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'email' when calling ContactsApi->ContactsByEmailGet");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("email", ElasticEmail.Client.ClientUtils.ParameterToString(email)); // path parameter

            localVarRequestOptions.Operation = "ContactsApi.ContactsByEmailGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Contact>("/contacts/{email}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContactsByEmailGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Contact Load detailed contact information for specified email. Required Access Level: ViewContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contact</returns>
        public async System.Threading.Tasks.Task<Contact> ContactsByEmailGetAsync(string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<Contact> localVarResponse = await ContactsByEmailGetWithHttpInfoAsync(email, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Contact Load detailed contact information for specified email. Required Access Level: ViewContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<Contact>> ContactsByEmailGetWithHttpInfoAsync(string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'email' is set
            if (email == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'email' when calling ContactsApi->ContactsByEmailGet");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("email", ElasticEmail.Client.ClientUtils.ParameterToString(email)); // path parameter

            localVarRequestOptions.Operation = "ContactsApi.ContactsByEmailGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Contact>("/contacts/{email}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContactsByEmailGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load History Returns detailed history of specified Contact. Required Access Level: ViewContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ContactHistory&gt;</returns>
        public List<ContactHistory> ContactsByEmailHistoryGet(string email, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<List<ContactHistory>> localVarResponse = ContactsByEmailHistoryGetWithHttpInfo(email, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load History Returns detailed history of specified Contact. Required Access Level: ViewContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ContactHistory&gt;</returns>
        public ElasticEmail.Client.ApiResponse<List<ContactHistory>> ContactsByEmailHistoryGetWithHttpInfo(string email, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'email' is set
            if (email == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'email' when calling ContactsApi->ContactsByEmailHistoryGet");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("email", ElasticEmail.Client.ClientUtils.ParameterToString(email)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "ContactsApi.ContactsByEmailHistoryGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ContactHistory>>("/contacts/{email}/history", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContactsByEmailHistoryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load History Returns detailed history of specified Contact. Required Access Level: ViewContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactHistory&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContactHistory>> ContactsByEmailHistoryGetAsync(string email, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<List<ContactHistory>> localVarResponse = await ContactsByEmailHistoryGetWithHttpInfoAsync(email, limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load History Returns detailed history of specified Contact. Required Access Level: ViewContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContactHistory&gt;)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<List<ContactHistory>>> ContactsByEmailHistoryGetWithHttpInfoAsync(string email, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'email' is set
            if (email == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'email' when calling ContactsApi->ContactsByEmailHistoryGet");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("email", ElasticEmail.Client.ClientUtils.ParameterToString(email)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "ContactsApi.ContactsByEmailHistoryGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ContactHistory>>("/contacts/{email}/history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContactsByEmailHistoryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Contact Update selected contact. Omitted contact&#39;s fields will not be changed. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="contactUpdatePayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contact</returns>
        public Contact ContactsByEmailPut(string email, ContactUpdatePayload contactUpdatePayload, int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<Contact> localVarResponse = ContactsByEmailPutWithHttpInfo(email, contactUpdatePayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Contact Update selected contact. Omitted contact&#39;s fields will not be changed. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="contactUpdatePayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contact</returns>
        public ElasticEmail.Client.ApiResponse<Contact> ContactsByEmailPutWithHttpInfo(string email, ContactUpdatePayload contactUpdatePayload, int operationIndex = 0)
        {
            // verify the required parameter 'email' is set
            if (email == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'email' when calling ContactsApi->ContactsByEmailPut");
            }

            // verify the required parameter 'contactUpdatePayload' is set
            if (contactUpdatePayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'contactUpdatePayload' when calling ContactsApi->ContactsByEmailPut");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("email", ElasticEmail.Client.ClientUtils.ParameterToString(email)); // path parameter
            localVarRequestOptions.Data = contactUpdatePayload;

            localVarRequestOptions.Operation = "ContactsApi.ContactsByEmailPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Contact>("/contacts/{email}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContactsByEmailPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Contact Update selected contact. Omitted contact&#39;s fields will not be changed. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="contactUpdatePayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contact</returns>
        public async System.Threading.Tasks.Task<Contact> ContactsByEmailPutAsync(string email, ContactUpdatePayload contactUpdatePayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<Contact> localVarResponse = await ContactsByEmailPutWithHttpInfoAsync(email, contactUpdatePayload, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Contact Update selected contact. Omitted contact&#39;s fields will not be changed. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Proper email address.</param>
        /// <param name="contactUpdatePayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<Contact>> ContactsByEmailPutWithHttpInfoAsync(string email, ContactUpdatePayload contactUpdatePayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'email' is set
            if (email == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'email' when calling ContactsApi->ContactsByEmailPut");
            }

            // verify the required parameter 'contactUpdatePayload' is set
            if (contactUpdatePayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'contactUpdatePayload' when calling ContactsApi->ContactsByEmailPut");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("email", ElasticEmail.Client.ClientUtils.ParameterToString(email)); // path parameter
            localVarRequestOptions.Data = contactUpdatePayload;

            localVarRequestOptions.Operation = "ContactsApi.ContactsByEmailPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Contact>("/contacts/{email}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContactsByEmailPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Contacts Bulk Deletes provided contacts in bulk. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ContactsDeletePost(EmailsPayload emailsPayload, int operationIndex = 0)
        {
            ContactsDeletePostWithHttpInfo(emailsPayload);
        }

        /// <summary>
        /// Delete Contacts Bulk Deletes provided contacts in bulk. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElasticEmail.Client.ApiResponse<Object> ContactsDeletePostWithHttpInfo(EmailsPayload emailsPayload, int operationIndex = 0)
        {
            // verify the required parameter 'emailsPayload' is set
            if (emailsPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'emailsPayload' when calling ContactsApi->ContactsDeletePost");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = emailsPayload;

            localVarRequestOptions.Operation = "ContactsApi.ContactsDeletePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/contacts/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContactsDeletePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Contacts Bulk Deletes provided contacts in bulk. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ContactsDeletePostAsync(EmailsPayload emailsPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ContactsDeletePostWithHttpInfoAsync(emailsPayload, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Contacts Bulk Deletes provided contacts in bulk. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailsPayload">Provide either rule or a list of emails, not both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<Object>> ContactsDeletePostWithHttpInfoAsync(EmailsPayload emailsPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'emailsPayload' is set
            if (emailsPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'emailsPayload' when calling ContactsApi->ContactsDeletePost");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = emailsPayload;

            localVarRequestOptions.Operation = "ContactsApi.ContactsDeletePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/contacts/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContactsDeletePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check Export Status Check the current status of the export. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExportStatus</returns>
        public ExportStatus ContactsExportByIdStatusGet(string id, int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<ExportStatus> localVarResponse = ContactsExportByIdStatusGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check Export Status Check the current status of the export. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExportStatus</returns>
        public ElasticEmail.Client.ApiResponse<ExportStatus> ContactsExportByIdStatusGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'id' when calling ContactsApi->ContactsExportByIdStatusGet");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ElasticEmail.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ContactsApi.ContactsExportByIdStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ExportStatus>("/contacts/export/{id}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContactsExportByIdStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check Export Status Check the current status of the export. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportStatus</returns>
        public async System.Threading.Tasks.Task<ExportStatus> ContactsExportByIdStatusGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<ExportStatus> localVarResponse = await ContactsExportByIdStatusGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check Export Status Check the current status of the export. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the exported file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportStatus)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<ExportStatus>> ContactsExportByIdStatusGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'id' when calling ContactsApi->ContactsExportByIdStatusGet");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ElasticEmail.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ContactsApi.ContactsExportByIdStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExportStatus>("/contacts/export/{id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContactsExportByIdStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Contacts Request an Export of specified Contacts. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="rule">Query used for filtering. (optional)</param>
        /// <param name="emails">Comma delimited list of contact emails (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExportLink</returns>
        public ExportLink ContactsExportPost(ExportFileFormats? fileFormat = default(ExportFileFormats?), string rule = default(string), List<string> emails = default(List<string>), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string), int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<ExportLink> localVarResponse = ContactsExportPostWithHttpInfo(fileFormat, rule, emails, compressionFormat, fileName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Contacts Request an Export of specified Contacts. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="rule">Query used for filtering. (optional)</param>
        /// <param name="emails">Comma delimited list of contact emails (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExportLink</returns>
        public ElasticEmail.Client.ApiResponse<ExportLink> ContactsExportPostWithHttpInfo(ExportFileFormats? fileFormat = default(ExportFileFormats?), string rule = default(string), List<string> emails = default(List<string>), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string), int operationIndex = 0)
        {
            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fileFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "fileFormat", fileFormat));
            }
            if (rule != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "rule", rule));
            }
            if (emails != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("multi", "emails", emails));
            }
            if (compressionFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "compressionFormat", compressionFormat));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "fileName", fileName));
            }

            localVarRequestOptions.Operation = "ContactsApi.ContactsExportPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ExportLink>("/contacts/export", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContactsExportPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Contacts Request an Export of specified Contacts. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="rule">Query used for filtering. (optional)</param>
        /// <param name="emails">Comma delimited list of contact emails (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportLink</returns>
        public async System.Threading.Tasks.Task<ExportLink> ContactsExportPostAsync(ExportFileFormats? fileFormat = default(ExportFileFormats?), string rule = default(string), List<string> emails = default(List<string>), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<ExportLink> localVarResponse = await ContactsExportPostWithHttpInfoAsync(fileFormat, rule, emails, compressionFormat, fileName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Contacts Request an Export of specified Contacts. Required Access Level: Export
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileFormat">Format of the exported file (optional)</param>
        /// <param name="rule">Query used for filtering. (optional)</param>
        /// <param name="emails">Comma delimited list of contact emails (optional)</param>
        /// <param name="compressionFormat">FileResponse compression format. None or Zip. (optional)</param>
        /// <param name="fileName">Name of your file including extension. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportLink)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<ExportLink>> ContactsExportPostWithHttpInfoAsync(ExportFileFormats? fileFormat = default(ExportFileFormats?), string rule = default(string), List<string> emails = default(List<string>), CompressionFormat? compressionFormat = default(CompressionFormat?), string fileName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fileFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "fileFormat", fileFormat));
            }
            if (rule != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "rule", rule));
            }
            if (emails != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("multi", "emails", emails));
            }
            if (compressionFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "compressionFormat", compressionFormat));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "fileName", fileName));
            }

            localVarRequestOptions.Operation = "ContactsApi.ContactsExportPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ExportLink>("/contacts/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContactsExportPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Contacts Returns a list of contacts. Required Access Level: ViewContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Contact&gt;</returns>
        public List<Contact> ContactsGet(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<List<Contact>> localVarResponse = ContactsGetWithHttpInfo(limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Contacts Returns a list of contacts. Required Access Level: ViewContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Contact&gt;</returns>
        public ElasticEmail.Client.ApiResponse<List<Contact>> ContactsGetWithHttpInfo(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "ContactsApi.ContactsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Contact>>("/contacts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContactsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load Contacts Returns a list of contacts. Required Access Level: ViewContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Contact&gt;</returns>
        public async System.Threading.Tasks.Task<List<Contact>> ContactsGetAsync(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<List<Contact>> localVarResponse = await ContactsGetWithHttpInfoAsync(limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load Contacts Returns a list of contacts. Required Access Level: ViewContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of returned items. (optional)</param>
        /// <param name="offset">How many items should be returned ahead. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Contact&gt;)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<List<Contact>>> ContactsGetWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "ContactsApi.ContactsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Contact>>("/contacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContactsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload Contacts Upload contacts from a file. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">Name of an existing list to add these contacts to (optional)</param>
        /// <param name="encodingName">In what encoding the file is uploaded (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ContactsImportPost(string listName = default(string), string encodingName = default(string), System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0)
        {
            ContactsImportPostWithHttpInfo(listName, encodingName, file);
        }

        /// <summary>
        /// Upload Contacts Upload contacts from a file. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">Name of an existing list to add these contacts to (optional)</param>
        /// <param name="encodingName">In what encoding the file is uploaded (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElasticEmail.Client.ApiResponse<Object> ContactsImportPostWithHttpInfo(string listName = default(string), string encodingName = default(string), System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0)
        {
            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (listName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "listName", listName));
            }
            if (encodingName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "encodingName", encodingName));
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "ContactsApi.ContactsImportPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/contacts/import", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContactsImportPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload Contacts Upload contacts from a file. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">Name of an existing list to add these contacts to (optional)</param>
        /// <param name="encodingName">In what encoding the file is uploaded (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ContactsImportPostAsync(string listName = default(string), string encodingName = default(string), System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ContactsImportPostWithHttpInfoAsync(listName, encodingName, file, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Upload Contacts Upload contacts from a file. Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">Name of an existing list to add these contacts to (optional)</param>
        /// <param name="encodingName">In what encoding the file is uploaded (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<Object>> ContactsImportPostWithHttpInfoAsync(string listName = default(string), string encodingName = default(string), System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (listName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "listName", listName));
            }
            if (encodingName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("", "encodingName", encodingName));
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "ContactsApi.ContactsImportPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/contacts/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContactsImportPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Contact Add new Contacts to your Lists. Up to 1000 can be added (for more please refer to the import request). Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactPayload"></param>
        /// <param name="listnames">Names of lists to which the uploaded contacts should be added to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Contact&gt;</returns>
        public List<Contact> ContactsPost(List<ContactPayload> contactPayload, List<string> listnames = default(List<string>), int operationIndex = 0)
        {
            ElasticEmail.Client.ApiResponse<List<Contact>> localVarResponse = ContactsPostWithHttpInfo(contactPayload, listnames);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Contact Add new Contacts to your Lists. Up to 1000 can be added (for more please refer to the import request). Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactPayload"></param>
        /// <param name="listnames">Names of lists to which the uploaded contacts should be added to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Contact&gt;</returns>
        public ElasticEmail.Client.ApiResponse<List<Contact>> ContactsPostWithHttpInfo(List<ContactPayload> contactPayload, List<string> listnames = default(List<string>), int operationIndex = 0)
        {
            // verify the required parameter 'contactPayload' is set
            if (contactPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'contactPayload' when calling ContactsApi->ContactsPost");
            }

            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (listnames != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("multi", "listnames", listnames));
            }
            localVarRequestOptions.Data = contactPayload;

            localVarRequestOptions.Operation = "ContactsApi.ContactsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Contact>>("/contacts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContactsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Contact Add new Contacts to your Lists. Up to 1000 can be added (for more please refer to the import request). Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactPayload"></param>
        /// <param name="listnames">Names of lists to which the uploaded contacts should be added to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Contact&gt;</returns>
        public async System.Threading.Tasks.Task<List<Contact>> ContactsPostAsync(List<ContactPayload> contactPayload, List<string> listnames = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElasticEmail.Client.ApiResponse<List<Contact>> localVarResponse = await ContactsPostWithHttpInfoAsync(contactPayload, listnames, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Contact Add new Contacts to your Lists. Up to 1000 can be added (for more please refer to the import request). Required Access Level: ModifyContacts
        /// </summary>
        /// <exception cref="ElasticEmail.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactPayload"></param>
        /// <param name="listnames">Names of lists to which the uploaded contacts should be added to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Contact&gt;)</returns>
        public async System.Threading.Tasks.Task<ElasticEmail.Client.ApiResponse<List<Contact>>> ContactsPostWithHttpInfoAsync(List<ContactPayload> contactPayload, List<string> listnames = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactPayload' is set
            if (contactPayload == null)
            {
                throw new ElasticEmail.Client.ApiException(400, "Missing required parameter 'contactPayload' when calling ContactsApi->ContactsPost");
            }


            ElasticEmail.Client.RequestOptions localVarRequestOptions = new ElasticEmail.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElasticEmail.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ElasticEmail.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (listnames != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElasticEmail.Client.ClientUtils.ParameterToMultiMap("multi", "listnames", listnames));
            }
            localVarRequestOptions.Data = contactPayload;

            localVarRequestOptions.Operation = "ContactsApi.ContactsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-ElasticEmail-ApiKey", this.Configuration.GetApiKeyWithPrefix("X-ElasticEmail-ApiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Contact>>("/contacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContactsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
