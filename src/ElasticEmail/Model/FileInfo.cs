/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ElasticEmail.Client.OpenAPIDateConverter;

namespace ElasticEmail.Model
{
    /// <summary>
    /// File information
    /// </summary>
    [DataContract(Name = "FileInfo")]
    public partial class FileInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileInfo" /> class.
        /// </summary>
        /// <param name="fileName">Name of your file including extension..</param>
        /// <param name="size">Size of your attachment (in bytes)..</param>
        /// <param name="dateAdded">Date of creation in YYYY-MM-DDThh:ii:ss format.</param>
        /// <param name="expirationDate">Date when the file will be deleted from your Account..</param>
        /// <param name="contentType">Content type of the file..</param>
        public FileInfo(string fileName = default(string), int? size = default(int?), DateTime dateAdded = default(DateTime), DateTime? expirationDate = default(DateTime?), string contentType = default(string))
        {
            this.FileName = fileName;
            this.Size = size;
            this.DateAdded = dateAdded;
            this.ExpirationDate = expirationDate;
            this.ContentType = contentType;
        }

        /// <summary>
        /// Name of your file including extension.
        /// </summary>
        /// <value>Name of your file including extension.</value>
        /// <example>filename.txt</example>
        [DataMember(Name = "FileName", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// Size of your attachment (in bytes).
        /// </summary>
        /// <value>Size of your attachment (in bytes).</value>
        /// <example>100</example>
        [DataMember(Name = "Size", EmitDefaultValue = true)]
        public int? Size { get; set; }

        /// <summary>
        /// Date of creation in YYYY-MM-DDThh:ii:ss format
        /// </summary>
        /// <value>Date of creation in YYYY-MM-DDThh:ii:ss format</value>
        [DataMember(Name = "DateAdded", EmitDefaultValue = false)]
        public DateTime DateAdded { get; set; }

        /// <summary>
        /// Date when the file will be deleted from your Account.
        /// </summary>
        /// <value>Date when the file will be deleted from your Account.</value>
        [DataMember(Name = "ExpirationDate", EmitDefaultValue = true)]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Content type of the file.
        /// </summary>
        /// <value>Content type of the file.</value>
        /// <example>image/jpeg</example>
        [DataMember(Name = "ContentType", EmitDefaultValue = false)]
        public string ContentType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileInfo {\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  DateAdded: ").Append(DateAdded).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
