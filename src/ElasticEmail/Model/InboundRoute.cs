/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ElasticEmail.Client.OpenAPIDateConverter;

namespace ElasticEmail.Model
{
    /// <summary>
    /// InboundRoute
    /// </summary>
    [DataContract(Name = "InboundRoute")]
    public partial class InboundRoute : IEquatable<InboundRoute>, IValidatableObject
    {
        /// <summary>
        /// Type of the filter
        /// </summary>
        /// <value>Type of the filter</value>
        [DataMember(Name = "FilterType", EmitDefaultValue = false)]
        public InboundRouteFilterType? FilterType { get; set; }
        /// <summary>
        /// Type of action to take
        /// </summary>
        /// <value>Type of action to take</value>
        [DataMember(Name = "ActionType", EmitDefaultValue = false)]
        public InboundRouteActionType? ActionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundRoute" /> class.
        /// </summary>
        /// <param name="publicId">publicId.</param>
        /// <param name="name">Name of this route.</param>
        /// <param name="filterType">Type of the filter.</param>
        /// <param name="filter">Filter of the inbound data.</param>
        /// <param name="actionType">Type of action to take.</param>
        /// <param name="actionParameter">URL address or Email to notify about the inbound.</param>
        /// <param name="sortOrder">Place of this route in your routes queue&#39;s order.</param>
        public InboundRoute(string publicId = default(string), string name = default(string), InboundRouteFilterType? filterType = default(InboundRouteFilterType?), string filter = default(string), InboundRouteActionType? actionType = default(InboundRouteActionType?), string actionParameter = default(string), int sortOrder = default(int))
        {
            this.PublicId = publicId;
            this.Name = name;
            this.FilterType = filterType;
            this.Filter = filter;
            this.ActionType = actionType;
            this.ActionParameter = actionParameter;
            this.SortOrder = sortOrder;
        }

        /// <summary>
        /// Gets or Sets PublicId
        /// </summary>
        [DataMember(Name = "PublicId", EmitDefaultValue = false)]
        public string PublicId { get; set; }

        /// <summary>
        /// Name of this route
        /// </summary>
        /// <value>Name of this route</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Filter of the inbound data
        /// </summary>
        /// <value>Filter of the inbound data</value>
        [DataMember(Name = "Filter", EmitDefaultValue = false)]
        public string Filter { get; set; }

        /// <summary>
        /// URL address or Email to notify about the inbound
        /// </summary>
        /// <value>URL address or Email to notify about the inbound</value>
        [DataMember(Name = "ActionParameter", EmitDefaultValue = false)]
        public string ActionParameter { get; set; }

        /// <summary>
        /// Place of this route in your routes queue&#39;s order
        /// </summary>
        /// <value>Place of this route in your routes queue&#39;s order</value>
        [DataMember(Name = "SortOrder", EmitDefaultValue = false)]
        public int SortOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InboundRoute {\n");
            sb.Append("  PublicId: ").Append(PublicId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FilterType: ").Append(FilterType).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  ActionType: ").Append(ActionType).Append("\n");
            sb.Append("  ActionParameter: ").Append(ActionParameter).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InboundRoute);
        }

        /// <summary>
        /// Returns true if InboundRoute instances are equal
        /// </summary>
        /// <param name="input">Instance of InboundRoute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InboundRoute input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PublicId == input.PublicId ||
                    (this.PublicId != null &&
                    this.PublicId.Equals(input.PublicId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FilterType == input.FilterType ||
                    this.FilterType.Equals(input.FilterType)
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.ActionType == input.ActionType ||
                    this.ActionType.Equals(input.ActionType)
                ) && 
                (
                    this.ActionParameter == input.ActionParameter ||
                    (this.ActionParameter != null &&
                    this.ActionParameter.Equals(input.ActionParameter))
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    this.SortOrder.Equals(input.SortOrder)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PublicId != null)
                    hashCode = hashCode * 59 + this.PublicId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.FilterType.GetHashCode();
                if (this.Filter != null)
                    hashCode = hashCode * 59 + this.Filter.GetHashCode();
                hashCode = hashCode * 59 + this.ActionType.GetHashCode();
                if (this.ActionParameter != null)
                    hashCode = hashCode * 59 + this.ActionParameter.GetHashCode();
                hashCode = hashCode * 59 + this.SortOrder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
