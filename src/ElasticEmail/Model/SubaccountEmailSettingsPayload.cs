/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ElasticEmail.Client.OpenAPIDateConverter;

namespace ElasticEmail.Model
{
    /// <summary>
    /// Settings related to sending emails
    /// </summary>
    [DataContract(Name = "SubaccountEmailSettingsPayload")]
    public partial class SubaccountEmailSettingsPayload : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubaccountEmailSettingsPayload" /> class.
        /// </summary>
        /// <param name="requiresEmailCredits">True, if Account needs credits to send emails. Otherwise, false.</param>
        /// <param name="emailSizeLimit">Maximum size of email including attachments in MB&#39;s.</param>
        /// <param name="dailySendLimit">Amount of emails Account can send daily.</param>
        /// <param name="maxContacts">Maximum number of contacts the Account can have. 0 means that parent account&#39;s limit is used..</param>
        /// <param name="enablePrivateIPPurchase">Can the SubAccount purchase Private IP for themselves.</param>
        /// <param name="poolName">Name of your custom IP Pool to be used in the sending process.</param>
        /// <param name="validSenderDomainOnly">validSenderDomainOnly.</param>
        public SubaccountEmailSettingsPayload(bool requiresEmailCredits = default(bool), int emailSizeLimit = default(int), int dailySendLimit = default(int), int maxContacts = default(int), bool enablePrivateIPPurchase = default(bool), string poolName = default(string), bool? validSenderDomainOnly = default(bool?))
        {
            this.RequiresEmailCredits = requiresEmailCredits;
            this.EmailSizeLimit = emailSizeLimit;
            this.DailySendLimit = dailySendLimit;
            this.MaxContacts = maxContacts;
            this.EnablePrivateIPPurchase = enablePrivateIPPurchase;
            this.PoolName = poolName;
            this.ValidSenderDomainOnly = validSenderDomainOnly;
        }

        /// <summary>
        /// True, if Account needs credits to send emails. Otherwise, false
        /// </summary>
        /// <value>True, if Account needs credits to send emails. Otherwise, false</value>
        /// <example>true</example>
        [DataMember(Name = "RequiresEmailCredits", EmitDefaultValue = true)]
        public bool RequiresEmailCredits { get; set; }

        /// <summary>
        /// Maximum size of email including attachments in MB&#39;s
        /// </summary>
        /// <value>Maximum size of email including attachments in MB&#39;s</value>
        /// <example>10</example>
        [DataMember(Name = "EmailSizeLimit", EmitDefaultValue = false)]
        public int EmailSizeLimit { get; set; }

        /// <summary>
        /// Amount of emails Account can send daily
        /// </summary>
        /// <value>Amount of emails Account can send daily</value>
        /// <example>100000</example>
        [DataMember(Name = "DailySendLimit", EmitDefaultValue = false)]
        public int DailySendLimit { get; set; }

        /// <summary>
        /// Maximum number of contacts the Account can have. 0 means that parent account&#39;s limit is used.
        /// </summary>
        /// <value>Maximum number of contacts the Account can have. 0 means that parent account&#39;s limit is used.</value>
        [DataMember(Name = "MaxContacts", EmitDefaultValue = false)]
        public int MaxContacts { get; set; }

        /// <summary>
        /// Can the SubAccount purchase Private IP for themselves
        /// </summary>
        /// <value>Can the SubAccount purchase Private IP for themselves</value>
        [DataMember(Name = "EnablePrivateIPPurchase", EmitDefaultValue = true)]
        public bool EnablePrivateIPPurchase { get; set; }

        /// <summary>
        /// Name of your custom IP Pool to be used in the sending process
        /// </summary>
        /// <value>Name of your custom IP Pool to be used in the sending process</value>
        /// <example>My Custom Pool</example>
        [DataMember(Name = "PoolName", EmitDefaultValue = false)]
        public string PoolName { get; set; }

        /// <summary>
        /// Gets or Sets ValidSenderDomainOnly
        /// </summary>
        [DataMember(Name = "ValidSenderDomainOnly", EmitDefaultValue = true)]
        public bool? ValidSenderDomainOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubaccountEmailSettingsPayload {\n");
            sb.Append("  RequiresEmailCredits: ").Append(RequiresEmailCredits).Append("\n");
            sb.Append("  EmailSizeLimit: ").Append(EmailSizeLimit).Append("\n");
            sb.Append("  DailySendLimit: ").Append(DailySendLimit).Append("\n");
            sb.Append("  MaxContacts: ").Append(MaxContacts).Append("\n");
            sb.Append("  EnablePrivateIPPurchase: ").Append(EnablePrivateIPPurchase).Append("\n");
            sb.Append("  PoolName: ").Append(PoolName).Append("\n");
            sb.Append("  ValidSenderDomainOnly: ").Append(ValidSenderDomainOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
