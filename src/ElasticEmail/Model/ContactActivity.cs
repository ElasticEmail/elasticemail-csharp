/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ElasticEmail.Client.OpenAPIDateConverter;

namespace ElasticEmail.Model
{
    /// <summary>
    /// ContactActivity
    /// </summary>
    [DataContract(Name = "ContactActivity")]
    public partial class ContactActivity : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactActivity" /> class.
        /// </summary>
        /// <param name="totalSent">Total emails sent..</param>
        /// <param name="totalOpened">Total emails opened..</param>
        /// <param name="totalClicked">Total emails clicked.</param>
        /// <param name="totalFailed">Total emails failed..</param>
        /// <param name="lastSent">Last date when an email was sent to this contact.</param>
        /// <param name="lastOpened">Date this contact last opened an email.</param>
        /// <param name="lastClicked">Date this contact last clicked an email.</param>
        /// <param name="lastFailed">Last date when an email sent to this contact bounced.</param>
        /// <param name="lastIP">IP from which this contact opened or clicked their email last time.</param>
        /// <param name="errorCode">Last RFC Error code if any occurred.</param>
        /// <param name="friendlyErrorMessage">Last RFC error message if any occurred.</param>
        public ContactActivity(int totalSent = default(int), int totalOpened = default(int), int totalClicked = default(int), int totalFailed = default(int), DateTime? lastSent = default(DateTime?), DateTime? lastOpened = default(DateTime?), DateTime? lastClicked = default(DateTime?), DateTime? lastFailed = default(DateTime?), string lastIP = default(string), int? errorCode = default(int?), string friendlyErrorMessage = default(string))
        {
            this.TotalSent = totalSent;
            this.TotalOpened = totalOpened;
            this.TotalClicked = totalClicked;
            this.TotalFailed = totalFailed;
            this.LastSent = lastSent;
            this.LastOpened = lastOpened;
            this.LastClicked = lastClicked;
            this.LastFailed = lastFailed;
            this.LastIP = lastIP;
            this.ErrorCode = errorCode;
            this.FriendlyErrorMessage = friendlyErrorMessage;
        }

        /// <summary>
        /// Total emails sent.
        /// </summary>
        /// <value>Total emails sent.</value>
        /// <example>1000</example>
        [DataMember(Name = "TotalSent", EmitDefaultValue = false)]
        public int TotalSent { get; set; }

        /// <summary>
        /// Total emails opened.
        /// </summary>
        /// <value>Total emails opened.</value>
        /// <example>1000</example>
        [DataMember(Name = "TotalOpened", EmitDefaultValue = false)]
        public int TotalOpened { get; set; }

        /// <summary>
        /// Total emails clicked
        /// </summary>
        /// <value>Total emails clicked</value>
        /// <example>1000</example>
        [DataMember(Name = "TotalClicked", EmitDefaultValue = false)]
        public int TotalClicked { get; set; }

        /// <summary>
        /// Total emails failed.
        /// </summary>
        /// <value>Total emails failed.</value>
        /// <example>1000</example>
        [DataMember(Name = "TotalFailed", EmitDefaultValue = false)]
        public int TotalFailed { get; set; }

        /// <summary>
        /// Last date when an email was sent to this contact
        /// </summary>
        /// <value>Last date when an email was sent to this contact</value>
        [DataMember(Name = "LastSent", EmitDefaultValue = true)]
        public DateTime? LastSent { get; set; }

        /// <summary>
        /// Date this contact last opened an email
        /// </summary>
        /// <value>Date this contact last opened an email</value>
        [DataMember(Name = "LastOpened", EmitDefaultValue = true)]
        public DateTime? LastOpened { get; set; }

        /// <summary>
        /// Date this contact last clicked an email
        /// </summary>
        /// <value>Date this contact last clicked an email</value>
        [DataMember(Name = "LastClicked", EmitDefaultValue = true)]
        public DateTime? LastClicked { get; set; }

        /// <summary>
        /// Last date when an email sent to this contact bounced
        /// </summary>
        /// <value>Last date when an email sent to this contact bounced</value>
        [DataMember(Name = "LastFailed", EmitDefaultValue = true)]
        public DateTime? LastFailed { get; set; }

        /// <summary>
        /// IP from which this contact opened or clicked their email last time
        /// </summary>
        /// <value>IP from which this contact opened or clicked their email last time</value>
        [DataMember(Name = "LastIP", EmitDefaultValue = false)]
        public string LastIP { get; set; }

        /// <summary>
        /// Last RFC Error code if any occurred
        /// </summary>
        /// <value>Last RFC Error code if any occurred</value>
        [DataMember(Name = "ErrorCode", EmitDefaultValue = true)]
        public int? ErrorCode { get; set; }

        /// <summary>
        /// Last RFC error message if any occurred
        /// </summary>
        /// <value>Last RFC error message if any occurred</value>
        [DataMember(Name = "FriendlyErrorMessage", EmitDefaultValue = false)]
        public string FriendlyErrorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactActivity {\n");
            sb.Append("  TotalSent: ").Append(TotalSent).Append("\n");
            sb.Append("  TotalOpened: ").Append(TotalOpened).Append("\n");
            sb.Append("  TotalClicked: ").Append(TotalClicked).Append("\n");
            sb.Append("  TotalFailed: ").Append(TotalFailed).Append("\n");
            sb.Append("  LastSent: ").Append(LastSent).Append("\n");
            sb.Append("  LastOpened: ").Append(LastOpened).Append("\n");
            sb.Append("  LastClicked: ").Append(LastClicked).Append("\n");
            sb.Append("  LastFailed: ").Append(LastFailed).Append("\n");
            sb.Append("  LastIP: ").Append(LastIP).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  FriendlyErrorMessage: ").Append(FriendlyErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
