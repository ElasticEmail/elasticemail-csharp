/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ElasticEmail.Client.OpenAPIDateConverter;

namespace ElasticEmail.Model
{
    /// <summary>
    /// ContactActivity
    /// </summary>
    [DataContract(Name = "ContactActivity")]
    public partial class ContactActivity : IEquatable<ContactActivity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactActivity" /> class.
        /// </summary>
        /// <param name="totalSent">Total emails sent..</param>
        /// <param name="totalOpened">Total emails opened..</param>
        /// <param name="totalClicked">Total emails clicked.</param>
        /// <param name="totalFailed">Total emails failed..</param>
        /// <param name="lastSent">Last date when an email was sent to this contact.</param>
        /// <param name="lastOpened">Date this contact last opened an email.</param>
        /// <param name="lastClicked">Date this contact last clicked an email.</param>
        /// <param name="lastFailed">Last date when an email sent to this contact bounced.</param>
        /// <param name="lastIP">IP from which this contact opened or clicked their email last time.</param>
        /// <param name="errorCode">Last RFC Error code if any occurred.</param>
        /// <param name="friendlyErrorMessage">Last RFC error message if any occurred.</param>
        public ContactActivity(int totalSent = default(int), int totalOpened = default(int), int totalClicked = default(int), int totalFailed = default(int), DateTime? lastSent = default(DateTime?), DateTime? lastOpened = default(DateTime?), DateTime? lastClicked = default(DateTime?), DateTime? lastFailed = default(DateTime?), string lastIP = default(string), int? errorCode = default(int?), string friendlyErrorMessage = default(string))
        {
            this.TotalSent = totalSent;
            this.TotalOpened = totalOpened;
            this.TotalClicked = totalClicked;
            this.TotalFailed = totalFailed;
            this.LastSent = lastSent;
            this.LastOpened = lastOpened;
            this.LastClicked = lastClicked;
            this.LastFailed = lastFailed;
            this.LastIP = lastIP;
            this.ErrorCode = errorCode;
            this.FriendlyErrorMessage = friendlyErrorMessage;
        }

        /// <summary>
        /// Total emails sent.
        /// </summary>
        /// <value>Total emails sent.</value>
        [DataMember(Name = "TotalSent", EmitDefaultValue = false)]
        public int TotalSent { get; set; }

        /// <summary>
        /// Total emails opened.
        /// </summary>
        /// <value>Total emails opened.</value>
        [DataMember(Name = "TotalOpened", EmitDefaultValue = false)]
        public int TotalOpened { get; set; }

        /// <summary>
        /// Total emails clicked
        /// </summary>
        /// <value>Total emails clicked</value>
        [DataMember(Name = "TotalClicked", EmitDefaultValue = false)]
        public int TotalClicked { get; set; }

        /// <summary>
        /// Total emails failed.
        /// </summary>
        /// <value>Total emails failed.</value>
        [DataMember(Name = "TotalFailed", EmitDefaultValue = false)]
        public int TotalFailed { get; set; }

        /// <summary>
        /// Last date when an email was sent to this contact
        /// </summary>
        /// <value>Last date when an email was sent to this contact</value>
        [DataMember(Name = "LastSent", EmitDefaultValue = true)]
        public DateTime? LastSent { get; set; }

        /// <summary>
        /// Date this contact last opened an email
        /// </summary>
        /// <value>Date this contact last opened an email</value>
        [DataMember(Name = "LastOpened", EmitDefaultValue = true)]
        public DateTime? LastOpened { get; set; }

        /// <summary>
        /// Date this contact last clicked an email
        /// </summary>
        /// <value>Date this contact last clicked an email</value>
        [DataMember(Name = "LastClicked", EmitDefaultValue = true)]
        public DateTime? LastClicked { get; set; }

        /// <summary>
        /// Last date when an email sent to this contact bounced
        /// </summary>
        /// <value>Last date when an email sent to this contact bounced</value>
        [DataMember(Name = "LastFailed", EmitDefaultValue = true)]
        public DateTime? LastFailed { get; set; }

        /// <summary>
        /// IP from which this contact opened or clicked their email last time
        /// </summary>
        /// <value>IP from which this contact opened or clicked their email last time</value>
        [DataMember(Name = "LastIP", EmitDefaultValue = false)]
        public string LastIP { get; set; }

        /// <summary>
        /// Last RFC Error code if any occurred
        /// </summary>
        /// <value>Last RFC Error code if any occurred</value>
        [DataMember(Name = "ErrorCode", EmitDefaultValue = true)]
        public int? ErrorCode { get; set; }

        /// <summary>
        /// Last RFC error message if any occurred
        /// </summary>
        /// <value>Last RFC error message if any occurred</value>
        [DataMember(Name = "FriendlyErrorMessage", EmitDefaultValue = false)]
        public string FriendlyErrorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactActivity {\n");
            sb.Append("  TotalSent: ").Append(TotalSent).Append("\n");
            sb.Append("  TotalOpened: ").Append(TotalOpened).Append("\n");
            sb.Append("  TotalClicked: ").Append(TotalClicked).Append("\n");
            sb.Append("  TotalFailed: ").Append(TotalFailed).Append("\n");
            sb.Append("  LastSent: ").Append(LastSent).Append("\n");
            sb.Append("  LastOpened: ").Append(LastOpened).Append("\n");
            sb.Append("  LastClicked: ").Append(LastClicked).Append("\n");
            sb.Append("  LastFailed: ").Append(LastFailed).Append("\n");
            sb.Append("  LastIP: ").Append(LastIP).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  FriendlyErrorMessage: ").Append(FriendlyErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContactActivity);
        }

        /// <summary>
        /// Returns true if ContactActivity instances are equal
        /// </summary>
        /// <param name="input">Instance of ContactActivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactActivity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TotalSent == input.TotalSent ||
                    this.TotalSent.Equals(input.TotalSent)
                ) && 
                (
                    this.TotalOpened == input.TotalOpened ||
                    this.TotalOpened.Equals(input.TotalOpened)
                ) && 
                (
                    this.TotalClicked == input.TotalClicked ||
                    this.TotalClicked.Equals(input.TotalClicked)
                ) && 
                (
                    this.TotalFailed == input.TotalFailed ||
                    this.TotalFailed.Equals(input.TotalFailed)
                ) && 
                (
                    this.LastSent == input.LastSent ||
                    (this.LastSent != null &&
                    this.LastSent.Equals(input.LastSent))
                ) && 
                (
                    this.LastOpened == input.LastOpened ||
                    (this.LastOpened != null &&
                    this.LastOpened.Equals(input.LastOpened))
                ) && 
                (
                    this.LastClicked == input.LastClicked ||
                    (this.LastClicked != null &&
                    this.LastClicked.Equals(input.LastClicked))
                ) && 
                (
                    this.LastFailed == input.LastFailed ||
                    (this.LastFailed != null &&
                    this.LastFailed.Equals(input.LastFailed))
                ) && 
                (
                    this.LastIP == input.LastIP ||
                    (this.LastIP != null &&
                    this.LastIP.Equals(input.LastIP))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.FriendlyErrorMessage == input.FriendlyErrorMessage ||
                    (this.FriendlyErrorMessage != null &&
                    this.FriendlyErrorMessage.Equals(input.FriendlyErrorMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.TotalSent.GetHashCode();
                hashCode = hashCode * 59 + this.TotalOpened.GetHashCode();
                hashCode = hashCode * 59 + this.TotalClicked.GetHashCode();
                hashCode = hashCode * 59 + this.TotalFailed.GetHashCode();
                if (this.LastSent != null)
                    hashCode = hashCode * 59 + this.LastSent.GetHashCode();
                if (this.LastOpened != null)
                    hashCode = hashCode * 59 + this.LastOpened.GetHashCode();
                if (this.LastClicked != null)
                    hashCode = hashCode * 59 + this.LastClicked.GetHashCode();
                if (this.LastFailed != null)
                    hashCode = hashCode * 59 + this.LastFailed.GetHashCode();
                if (this.LastIP != null)
                    hashCode = hashCode * 59 + this.LastIP.GetHashCode();
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                if (this.FriendlyErrorMessage != null)
                    hashCode = hashCode * 59 + this.FriendlyErrorMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
