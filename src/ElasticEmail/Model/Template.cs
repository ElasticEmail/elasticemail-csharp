/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ElasticEmail.Client.OpenAPIDateConverter;

namespace ElasticEmail.Model
{
    /// <summary>
    /// Template info
    /// </summary>
    [DataContract(Name = "Template")]
    public partial class Template : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TemplateType
        /// </summary>
        [DataMember(Name = "TemplateType", EmitDefaultValue = false)]
        public TemplateType? TemplateType { get; set; }

        /// <summary>
        /// Gets or Sets TemplateScope
        /// </summary>
        [DataMember(Name = "TemplateScope", EmitDefaultValue = false)]
        public TemplateScope? TemplateScope { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Template" /> class.
        /// </summary>
        /// <param name="templateType">templateType.</param>
        /// <param name="name">Template name.</param>
        /// <param name="dateAdded">Date of creation in YYYY-MM-DDThh:ii:ss format.</param>
        /// <param name="subject">Default subject of email..</param>
        /// <param name="body">Email content of this template.</param>
        /// <param name="templateScope">templateScope.</param>
        public Template(TemplateType? templateType = default(TemplateType?), string name = default(string), DateTime dateAdded = default(DateTime), string subject = default(string), List<BodyPart> body = default(List<BodyPart>), TemplateScope? templateScope = default(TemplateScope?))
        {
            this.TemplateType = templateType;
            this.Name = name;
            this.DateAdded = dateAdded;
            this.Subject = subject;
            this.Body = body;
            this.TemplateScope = templateScope;
        }

        /// <summary>
        /// Template name
        /// </summary>
        /// <value>Template name</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Date of creation in YYYY-MM-DDThh:ii:ss format
        /// </summary>
        /// <value>Date of creation in YYYY-MM-DDThh:ii:ss format</value>
        [DataMember(Name = "DateAdded", EmitDefaultValue = false)]
        public DateTime DateAdded { get; set; }

        /// <summary>
        /// Default subject of email.
        /// </summary>
        /// <value>Default subject of email.</value>
        /// <example>Hello!</example>
        [DataMember(Name = "Subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// Email content of this template
        /// </summary>
        /// <value>Email content of this template</value>
        [DataMember(Name = "Body", EmitDefaultValue = false)]
        public List<BodyPart> Body { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Template {\n");
            sb.Append("  TemplateType: ").Append(TemplateType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DateAdded: ").Append(DateAdded).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  TemplateScope: ").Append(TemplateScope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
