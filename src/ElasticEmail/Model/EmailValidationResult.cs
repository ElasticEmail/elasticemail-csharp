/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ElasticEmail.Client.OpenAPIDateConverter;

namespace ElasticEmail.Model
{
    /// <summary>
    /// EmailValidationResult
    /// </summary>
    [DataContract(Name = "EmailValidationResult")]
    public partial class EmailValidationResult : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "Result", EmitDefaultValue = false)]
        public EmailValidationStatus? Result { get; set; }

        /// <summary>
        /// Gets or Sets PredictedStatus
        /// </summary>
        [DataMember(Name = "PredictedStatus", EmitDefaultValue = false)]
        public EmailPredictedValidationStatus? PredictedStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailValidationResult" /> class.
        /// </summary>
        /// <param name="account">Local part of an email.</param>
        /// <param name="domain">Name of selected domain..</param>
        /// <param name="email">Full email address that was verified.</param>
        /// <param name="suggestedSpelling">Suggested spelling if a possible mistake was found.</param>
        /// <param name="disposable">Does the email have a temporary domain.</param>
        /// <param name="role">Is an email a role email (e.g. info@, noreply@ etc.).</param>
        /// <param name="reason">All detected issues.</param>
        /// <param name="dateAdded">Added date.</param>
        /// <param name="result">result.</param>
        /// <param name="predictedScore">Predicted score.</param>
        /// <param name="predictedStatus">predictedStatus.</param>
        public EmailValidationResult(string account = default(string), string domain = default(string), string email = default(string), string suggestedSpelling = default(string), bool disposable = default(bool), bool role = default(bool), string reason = default(string), DateTime dateAdded = default(DateTime), EmailValidationStatus? result = default(EmailValidationStatus?), decimal predictedScore = default(decimal), EmailPredictedValidationStatus? predictedStatus = default(EmailPredictedValidationStatus?))
        {
            this.Account = account;
            this.Domain = domain;
            this.Email = email;
            this.SuggestedSpelling = suggestedSpelling;
            this.Disposable = disposable;
            this.Role = role;
            this.Reason = reason;
            this.DateAdded = dateAdded;
            this.Result = result;
            this.PredictedScore = predictedScore;
            this.PredictedStatus = predictedStatus;
        }

        /// <summary>
        /// Local part of an email
        /// </summary>
        /// <value>Local part of an email</value>
        [DataMember(Name = "Account", EmitDefaultValue = false)]
        public string Account { get; set; }

        /// <summary>
        /// Name of selected domain.
        /// </summary>
        /// <value>Name of selected domain.</value>
        /// <example>example.com</example>
        [DataMember(Name = "Domain", EmitDefaultValue = false)]
        public string Domain { get; set; }

        /// <summary>
        /// Full email address that was verified
        /// </summary>
        /// <value>Full email address that was verified</value>
        [DataMember(Name = "Email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Suggested spelling if a possible mistake was found
        /// </summary>
        /// <value>Suggested spelling if a possible mistake was found</value>
        [DataMember(Name = "SuggestedSpelling", EmitDefaultValue = false)]
        public string SuggestedSpelling { get; set; }

        /// <summary>
        /// Does the email have a temporary domain
        /// </summary>
        /// <value>Does the email have a temporary domain</value>
        [DataMember(Name = "Disposable", EmitDefaultValue = true)]
        public bool Disposable { get; set; }

        /// <summary>
        /// Is an email a role email (e.g. info@, noreply@ etc.)
        /// </summary>
        /// <value>Is an email a role email (e.g. info@, noreply@ etc.)</value>
        [DataMember(Name = "Role", EmitDefaultValue = true)]
        public bool Role { get; set; }

        /// <summary>
        /// All detected issues
        /// </summary>
        /// <value>All detected issues</value>
        [DataMember(Name = "Reason", EmitDefaultValue = false)]
        public string Reason { get; set; }

        /// <summary>
        /// Added date
        /// </summary>
        /// <value>Added date</value>
        [DataMember(Name = "DateAdded", EmitDefaultValue = false)]
        public DateTime DateAdded { get; set; }

        /// <summary>
        /// Predicted score
        /// </summary>
        /// <value>Predicted score</value>
        [DataMember(Name = "PredictedScore", EmitDefaultValue = false)]
        public decimal PredictedScore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailValidationResult {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  SuggestedSpelling: ").Append(SuggestedSpelling).Append("\n");
            sb.Append("  Disposable: ").Append(Disposable).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  DateAdded: ").Append(DateAdded).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  PredictedScore: ").Append(PredictedScore).Append("\n");
            sb.Append("  PredictedStatus: ").Append(PredictedStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
