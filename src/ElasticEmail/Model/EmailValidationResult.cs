/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ElasticEmail.Client.OpenAPIDateConverter;

namespace ElasticEmail.Model
{
    /// <summary>
    /// EmailValidationResult
    /// </summary>
    [DataContract(Name = "EmailValidationResult")]
    public partial class EmailValidationResult : IEquatable<EmailValidationResult>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "Result", EmitDefaultValue = false)]
        public EmailValidationStatus? Result { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailValidationResult" /> class.
        /// </summary>
        /// <param name="account">Local part of an email.</param>
        /// <param name="domain">Name of selected domain..</param>
        /// <param name="email">Full email address that was verified.</param>
        /// <param name="suggestedSpelling">Suggested spelling if a possible mistake was found.</param>
        /// <param name="disposable">Does the email have a temporary domain.</param>
        /// <param name="role">Is an email a role email (e.g. info@, noreply@ etc.).</param>
        /// <param name="reason">All detected issues.</param>
        /// <param name="dateAdded">Date of creation in YYYY-MM-DDThh:ii:ss format.</param>
        /// <param name="result">result.</param>
        public EmailValidationResult(string account = default(string), string domain = default(string), string email = default(string), string suggestedSpelling = default(string), bool disposable = default(bool), bool role = default(bool), string reason = default(string), DateTime dateAdded = default(DateTime), EmailValidationStatus? result = default(EmailValidationStatus?))
        {
            this.Account = account;
            this.Domain = domain;
            this.Email = email;
            this.SuggestedSpelling = suggestedSpelling;
            this.Disposable = disposable;
            this.Role = role;
            this.Reason = reason;
            this.DateAdded = dateAdded;
            this.Result = result;
        }

        /// <summary>
        /// Local part of an email
        /// </summary>
        /// <value>Local part of an email</value>
        [DataMember(Name = "Account", EmitDefaultValue = false)]
        public string Account { get; set; }

        /// <summary>
        /// Name of selected domain.
        /// </summary>
        /// <value>Name of selected domain.</value>
        [DataMember(Name = "Domain", EmitDefaultValue = false)]
        public string Domain { get; set; }

        /// <summary>
        /// Full email address that was verified
        /// </summary>
        /// <value>Full email address that was verified</value>
        [DataMember(Name = "Email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Suggested spelling if a possible mistake was found
        /// </summary>
        /// <value>Suggested spelling if a possible mistake was found</value>
        [DataMember(Name = "SuggestedSpelling", EmitDefaultValue = false)]
        public string SuggestedSpelling { get; set; }

        /// <summary>
        /// Does the email have a temporary domain
        /// </summary>
        /// <value>Does the email have a temporary domain</value>
        [DataMember(Name = "Disposable", EmitDefaultValue = false)]
        public bool Disposable { get; set; }

        /// <summary>
        /// Is an email a role email (e.g. info@, noreply@ etc.)
        /// </summary>
        /// <value>Is an email a role email (e.g. info@, noreply@ etc.)</value>
        [DataMember(Name = "Role", EmitDefaultValue = false)]
        public bool Role { get; set; }

        /// <summary>
        /// All detected issues
        /// </summary>
        /// <value>All detected issues</value>
        [DataMember(Name = "Reason", EmitDefaultValue = false)]
        public string Reason { get; set; }

        /// <summary>
        /// Date of creation in YYYY-MM-DDThh:ii:ss format
        /// </summary>
        /// <value>Date of creation in YYYY-MM-DDThh:ii:ss format</value>
        [DataMember(Name = "DateAdded", EmitDefaultValue = false)]
        public DateTime DateAdded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailValidationResult {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  SuggestedSpelling: ").Append(SuggestedSpelling).Append("\n");
            sb.Append("  Disposable: ").Append(Disposable).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  DateAdded: ").Append(DateAdded).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailValidationResult);
        }

        /// <summary>
        /// Returns true if EmailValidationResult instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailValidationResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailValidationResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.SuggestedSpelling == input.SuggestedSpelling ||
                    (this.SuggestedSpelling != null &&
                    this.SuggestedSpelling.Equals(input.SuggestedSpelling))
                ) && 
                (
                    this.Disposable == input.Disposable ||
                    this.Disposable.Equals(input.Disposable)
                ) && 
                (
                    this.Role == input.Role ||
                    this.Role.Equals(input.Role)
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.DateAdded == input.DateAdded ||
                    (this.DateAdded != null &&
                    this.DateAdded.Equals(input.DateAdded))
                ) && 
                (
                    this.Result == input.Result ||
                    this.Result.Equals(input.Result)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.SuggestedSpelling != null)
                    hashCode = hashCode * 59 + this.SuggestedSpelling.GetHashCode();
                hashCode = hashCode * 59 + this.Disposable.GetHashCode();
                hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.DateAdded != null)
                    hashCode = hashCode * 59 + this.DateAdded.GetHashCode();
                hashCode = hashCode * 59 + this.Result.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
