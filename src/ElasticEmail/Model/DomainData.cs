/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ElasticEmail.Client.OpenAPIDateConverter;

namespace ElasticEmail.Model
{
    /// <summary>
    /// Domain data, with information about domain records.
    /// </summary>
    [DataContract(Name = "DomainData")]
    public partial class DomainData : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public TrackingType? Type { get; set; }

        /// <summary>
        /// Gets or Sets TrackingStatus
        /// </summary>
        [DataMember(Name = "TrackingStatus", EmitDefaultValue = false)]
        public TrackingValidationStatus? TrackingStatus { get; set; }

        /// <summary>
        /// Gets or Sets CertificateStatus
        /// </summary>
        [DataMember(Name = "CertificateStatus", EmitDefaultValue = false)]
        public CertificateValidationStatus? CertificateStatus { get; set; }

        /// <summary>
        /// Gets or Sets TrackingTypeUserRequest
        /// </summary>
        [DataMember(Name = "TrackingTypeUserRequest", EmitDefaultValue = false)]
        public TrackingType? TrackingTypeUserRequest { get; set; }

        /// <summary>
        /// Gets or Sets Ownership
        /// </summary>
        [DataMember(Name = "Ownership", EmitDefaultValue = false)]
        public DomainOwner? Ownership { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainData" /> class.
        /// </summary>
        /// <param name="validationLog">Domain validation results - when domain has been running through validation process.</param>
        /// <param name="domain">Name of selected domain..</param>
        /// <param name="defaultDomain">True, if domain is used as default. Otherwise, false,.</param>
        /// <param name="spf">True, if SPF record is verified.</param>
        /// <param name="dkim">True, if DKIM record is verified.</param>
        /// <param name="mX">True, if MX record is verified.</param>
        /// <param name="dMARC">dMARC.</param>
        /// <param name="isRewriteDomainValid">True, if tracking CNAME record is verified.</param>
        /// <param name="verify">True, if DKIM, SPF, or tracking are still to be verified.</param>
        /// <param name="type">type.</param>
        /// <param name="trackingStatus">trackingStatus.</param>
        /// <param name="certificateStatus">certificateStatus.</param>
        /// <param name="certificateValidationError">certificateValidationError.</param>
        /// <param name="trackingTypeUserRequest">trackingTypeUserRequest.</param>
        /// <param name="vERP">vERP.</param>
        /// <param name="customBouncesDomain">customBouncesDomain.</param>
        /// <param name="isCustomBouncesDomainDefault">isCustomBouncesDomainDefault.</param>
        /// <param name="isMarkedForDeletion">isMarkedForDeletion.</param>
        /// <param name="ownership">ownership.</param>
        public DomainData(string validationLog = default(string), string domain = default(string), bool defaultDomain = default(bool), bool spf = default(bool), bool dkim = default(bool), bool mX = default(bool), bool dMARC = default(bool), bool isRewriteDomainValid = default(bool), bool verify = default(bool), TrackingType? type = default(TrackingType?), TrackingValidationStatus? trackingStatus = default(TrackingValidationStatus?), CertificateValidationStatus? certificateStatus = default(CertificateValidationStatus?), string certificateValidationError = default(string), TrackingType? trackingTypeUserRequest = default(TrackingType?), bool vERP = default(bool), string customBouncesDomain = default(string), bool isCustomBouncesDomainDefault = default(bool), bool isMarkedForDeletion = default(bool), DomainOwner? ownership = default(DomainOwner?))
        {
            this.ValidationLog = validationLog;
            this.Domain = domain;
            this.DefaultDomain = defaultDomain;
            this.Spf = spf;
            this.Dkim = dkim;
            this.MX = mX;
            this.DMARC = dMARC;
            this.IsRewriteDomainValid = isRewriteDomainValid;
            this.Verify = verify;
            this.Type = type;
            this.TrackingStatus = trackingStatus;
            this.CertificateStatus = certificateStatus;
            this.CertificateValidationError = certificateValidationError;
            this.TrackingTypeUserRequest = trackingTypeUserRequest;
            this.VERP = vERP;
            this.CustomBouncesDomain = customBouncesDomain;
            this.IsCustomBouncesDomainDefault = isCustomBouncesDomainDefault;
            this.IsMarkedForDeletion = isMarkedForDeletion;
            this.Ownership = ownership;
        }

        /// <summary>
        /// Domain validation results - when domain has been running through validation process
        /// </summary>
        /// <value>Domain validation results - when domain has been running through validation process</value>
        [DataMember(Name = "ValidationLog", EmitDefaultValue = false)]
        public string ValidationLog { get; set; }

        /// <summary>
        /// Name of selected domain.
        /// </summary>
        /// <value>Name of selected domain.</value>
        /// <example>example.com</example>
        [DataMember(Name = "Domain", EmitDefaultValue = false)]
        public string Domain { get; set; }

        /// <summary>
        /// True, if domain is used as default. Otherwise, false,
        /// </summary>
        /// <value>True, if domain is used as default. Otherwise, false,</value>
        [DataMember(Name = "DefaultDomain", EmitDefaultValue = true)]
        public bool DefaultDomain { get; set; }

        /// <summary>
        /// True, if SPF record is verified
        /// </summary>
        /// <value>True, if SPF record is verified</value>
        /// <example>true</example>
        [DataMember(Name = "Spf", EmitDefaultValue = true)]
        public bool Spf { get; set; }

        /// <summary>
        /// True, if DKIM record is verified
        /// </summary>
        /// <value>True, if DKIM record is verified</value>
        /// <example>true</example>
        [DataMember(Name = "Dkim", EmitDefaultValue = true)]
        public bool Dkim { get; set; }

        /// <summary>
        /// True, if MX record is verified
        /// </summary>
        /// <value>True, if MX record is verified</value>
        /// <example>true</example>
        [DataMember(Name = "MX", EmitDefaultValue = true)]
        public bool MX { get; set; }

        /// <summary>
        /// Gets or Sets DMARC
        /// </summary>
        [DataMember(Name = "DMARC", EmitDefaultValue = true)]
        public bool DMARC { get; set; }

        /// <summary>
        /// True, if tracking CNAME record is verified
        /// </summary>
        /// <value>True, if tracking CNAME record is verified</value>
        /// <example>true</example>
        [DataMember(Name = "IsRewriteDomainValid", EmitDefaultValue = true)]
        public bool IsRewriteDomainValid { get; set; }

        /// <summary>
        /// True, if DKIM, SPF, or tracking are still to be verified
        /// </summary>
        /// <value>True, if DKIM, SPF, or tracking are still to be verified</value>
        /// <example>true</example>
        [DataMember(Name = "Verify", EmitDefaultValue = true)]
        public bool Verify { get; set; }

        /// <summary>
        /// Gets or Sets CertificateValidationError
        /// </summary>
        [DataMember(Name = "CertificateValidationError", EmitDefaultValue = false)]
        public string CertificateValidationError { get; set; }

        /// <summary>
        /// Gets or Sets VERP
        /// </summary>
        [DataMember(Name = "VERP", EmitDefaultValue = true)]
        public bool VERP { get; set; }

        /// <summary>
        /// Gets or Sets CustomBouncesDomain
        /// </summary>
        [DataMember(Name = "CustomBouncesDomain", EmitDefaultValue = false)]
        public string CustomBouncesDomain { get; set; }

        /// <summary>
        /// Gets or Sets IsCustomBouncesDomainDefault
        /// </summary>
        [DataMember(Name = "IsCustomBouncesDomainDefault", EmitDefaultValue = true)]
        public bool IsCustomBouncesDomainDefault { get; set; }

        /// <summary>
        /// Gets or Sets IsMarkedForDeletion
        /// </summary>
        [DataMember(Name = "IsMarkedForDeletion", EmitDefaultValue = true)]
        public bool IsMarkedForDeletion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DomainData {\n");
            sb.Append("  ValidationLog: ").Append(ValidationLog).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  DefaultDomain: ").Append(DefaultDomain).Append("\n");
            sb.Append("  Spf: ").Append(Spf).Append("\n");
            sb.Append("  Dkim: ").Append(Dkim).Append("\n");
            sb.Append("  MX: ").Append(MX).Append("\n");
            sb.Append("  DMARC: ").Append(DMARC).Append("\n");
            sb.Append("  IsRewriteDomainValid: ").Append(IsRewriteDomainValid).Append("\n");
            sb.Append("  Verify: ").Append(Verify).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TrackingStatus: ").Append(TrackingStatus).Append("\n");
            sb.Append("  CertificateStatus: ").Append(CertificateStatus).Append("\n");
            sb.Append("  CertificateValidationError: ").Append(CertificateValidationError).Append("\n");
            sb.Append("  TrackingTypeUserRequest: ").Append(TrackingTypeUserRequest).Append("\n");
            sb.Append("  VERP: ").Append(VERP).Append("\n");
            sb.Append("  CustomBouncesDomain: ").Append(CustomBouncesDomain).Append("\n");
            sb.Append("  IsCustomBouncesDomainDefault: ").Append(IsCustomBouncesDomainDefault).Append("\n");
            sb.Append("  IsMarkedForDeletion: ").Append(IsMarkedForDeletion).Append("\n");
            sb.Append("  Ownership: ").Append(Ownership).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
