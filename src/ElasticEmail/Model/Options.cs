/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ElasticEmail.Client.OpenAPIDateConverter;

namespace ElasticEmail.Model
{
    /// <summary>
    /// E-mail configuration
    /// </summary>
    [DataContract(Name = "Options")]
    public partial class Options : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Encoding
        /// </summary>
        [DataMember(Name = "Encoding", EmitDefaultValue = false)]
        public EncodingType? Encoding { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Options" /> class.
        /// </summary>
        /// <param name="timeOffset">By how long should an e-mail be delayed (in minutes). Maximum is 35 days..</param>
        /// <param name="poolName">Name of your custom IP Pool to be used in the sending process.</param>
        /// <param name="channelName">Name of selected channel..</param>
        /// <param name="encoding">encoding.</param>
        /// <param name="trackOpens">Should the opens be tracked? If no value has been provided, Account&#39;s default setting will be used..</param>
        /// <param name="trackClicks">Should the clicks be tracked? If no value has been provided, Account&#39;s default setting will be used..</param>
        public Options(int? timeOffset = default(int?), string poolName = default(string), string channelName = default(string), EncodingType? encoding = default(EncodingType?), bool? trackOpens = default(bool?), bool? trackClicks = default(bool?))
        {
            this.TimeOffset = timeOffset;
            this.PoolName = poolName;
            this.ChannelName = channelName;
            this.Encoding = encoding;
            this.TrackOpens = trackOpens;
            this.TrackClicks = trackClicks;
        }

        /// <summary>
        /// By how long should an e-mail be delayed (in minutes). Maximum is 35 days.
        /// </summary>
        /// <value>By how long should an e-mail be delayed (in minutes). Maximum is 35 days.</value>
        [DataMember(Name = "TimeOffset", EmitDefaultValue = true)]
        public int? TimeOffset { get; set; }

        /// <summary>
        /// Name of your custom IP Pool to be used in the sending process
        /// </summary>
        /// <value>Name of your custom IP Pool to be used in the sending process</value>
        /// <example>My Custom Pool</example>
        [DataMember(Name = "PoolName", EmitDefaultValue = false)]
        public string PoolName { get; set; }

        /// <summary>
        /// Name of selected channel.
        /// </summary>
        /// <value>Name of selected channel.</value>
        /// <example>Channel01</example>
        [DataMember(Name = "ChannelName", EmitDefaultValue = false)]
        public string ChannelName { get; set; }

        /// <summary>
        /// Should the opens be tracked? If no value has been provided, Account&#39;s default setting will be used.
        /// </summary>
        /// <value>Should the opens be tracked? If no value has been provided, Account&#39;s default setting will be used.</value>
        /// <example>true</example>
        [DataMember(Name = "TrackOpens", EmitDefaultValue = true)]
        public bool? TrackOpens { get; set; }

        /// <summary>
        /// Should the clicks be tracked? If no value has been provided, Account&#39;s default setting will be used.
        /// </summary>
        /// <value>Should the clicks be tracked? If no value has been provided, Account&#39;s default setting will be used.</value>
        /// <example>true</example>
        [DataMember(Name = "TrackClicks", EmitDefaultValue = true)]
        public bool? TrackClicks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Options {\n");
            sb.Append("  TimeOffset: ").Append(TimeOffset).Append("\n");
            sb.Append("  PoolName: ").Append(PoolName).Append("\n");
            sb.Append("  ChannelName: ").Append(ChannelName).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  TrackOpens: ").Append(TrackOpens).Append("\n");
            sb.Append("  TrackClicks: ").Append(TrackClicks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
