/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ElasticEmail.Client.OpenAPIDateConverter;

namespace ElasticEmail.Model
{
    /// <summary>
    /// Defines MessageCategory
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum MessageCategory
    {
        /// <summary>
        /// Enum Unknown for value: Unknown
        /// </summary>
        [EnumMember(Value = "Unknown")]
        Unknown,

        /// <summary>
        /// Enum Ignore for value: Ignore
        /// </summary>
        [EnumMember(Value = "Ignore")]
        Ignore,

        /// <summary>
        /// Enum Spam for value: Spam
        /// </summary>
        [EnumMember(Value = "Spam")]
        Spam,

        /// <summary>
        /// Enum BlackListed for value: BlackListed
        /// </summary>
        [EnumMember(Value = "BlackListed")]
        BlackListed,

        /// <summary>
        /// Enum NoMailbox for value: NoMailbox
        /// </summary>
        [EnumMember(Value = "NoMailbox")]
        NoMailbox,

        /// <summary>
        /// Enum GreyListed for value: GreyListed
        /// </summary>
        [EnumMember(Value = "GreyListed")]
        GreyListed,

        /// <summary>
        /// Enum Throttled for value: Throttled
        /// </summary>
        [EnumMember(Value = "Throttled")]
        Throttled,

        /// <summary>
        /// Enum Timeout for value: Timeout
        /// </summary>
        [EnumMember(Value = "Timeout")]
        Timeout,

        /// <summary>
        /// Enum ConnectionProblem for value: ConnectionProblem
        /// </summary>
        [EnumMember(Value = "ConnectionProblem")]
        ConnectionProblem,

        /// <summary>
        /// Enum SPFProblem for value: SPFProblem
        /// </summary>
        [EnumMember(Value = "SPFProblem")]
        SPFProblem,

        /// <summary>
        /// Enum AccountProblem for value: AccountProblem
        /// </summary>
        [EnumMember(Value = "AccountProblem")]
        AccountProblem,

        /// <summary>
        /// Enum DNSProblem for value: DNSProblem
        /// </summary>
        [EnumMember(Value = "DNSProblem")]
        DNSProblem,

        /// <summary>
        /// Enum NotDeliveredCancelled for value: NotDeliveredCancelled
        /// </summary>
        [EnumMember(Value = "NotDeliveredCancelled")]
        NotDeliveredCancelled,

        /// <summary>
        /// Enum CodeError for value: CodeError
        /// </summary>
        [EnumMember(Value = "CodeError")]
        CodeError,

        /// <summary>
        /// Enum ManualCancel for value: ManualCancel
        /// </summary>
        [EnumMember(Value = "ManualCancel")]
        ManualCancel,

        /// <summary>
        /// Enum ConnectionTerminated for value: ConnectionTerminated
        /// </summary>
        [EnumMember(Value = "ConnectionTerminated")]
        ConnectionTerminated,

        /// <summary>
        /// Enum NotDelivered for value: NotDelivered
        /// </summary>
        [EnumMember(Value = "NotDelivered")]
        NotDelivered
    }

}
