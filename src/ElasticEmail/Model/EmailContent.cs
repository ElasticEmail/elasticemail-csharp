/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ElasticEmail.Client.OpenAPIDateConverter;

namespace ElasticEmail.Model
{
    /// <summary>
    /// Proper e-mail content
    /// </summary>
    [DataContract(Name = "EmailContent")]
    public partial class EmailContent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailContent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailContent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailContent" /> class.
        /// </summary>
        /// <param name="body">List of e-mail body parts, with user-provided MIME types (text/html, text/plain etc).</param>
        /// <param name="merge">A key-value collection of custom merge fields, shared between recipients. Should be used in e-mail body like so: {firstname}, {lastname} etc..</param>
        /// <param name="attachments">Attachments provided by sending binary data.</param>
        /// <param name="headers">A key-value collection of custom e-mail headers..</param>
        /// <param name="postback">Postback header..</param>
        /// <param name="envelopeFrom">E-mail with an optional name to be used as the envelope from address (e.g.: John Doe &lt;email@domain.com&gt;).</param>
        /// <param name="from">Your e-mail with an optional name (e.g.: John Doe &lt;email@domain.com&gt;) (required).</param>
        /// <param name="replyTo">To what address should the recipients reply to (e.g. John Doe &lt;email@domain.com&gt;).</param>
        /// <param name="subject">Default subject of email..</param>
        /// <param name="templateName">Name of template..</param>
        /// <param name="attachFiles">Names of previously uploaded files that should be sent as downloadable attachments.</param>
        /// <param name="utm">utm.</param>
        public EmailContent(List<BodyPart> body = default(List<BodyPart>), Dictionary<string, string> merge = default(Dictionary<string, string>), List<MessageAttachment> attachments = default(List<MessageAttachment>), Dictionary<string, string> headers = default(Dictionary<string, string>), string postback = default(string), string envelopeFrom = default(string), string from = default(string), string replyTo = default(string), string subject = default(string), string templateName = default(string), List<string> attachFiles = default(List<string>), Utm utm = default(Utm))
        {
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for EmailContent and cannot be null");
            }
            this.From = from;
            this.Body = body;
            this.Merge = merge;
            this.Attachments = attachments;
            this.Headers = headers;
            this.Postback = postback;
            this.EnvelopeFrom = envelopeFrom;
            this.ReplyTo = replyTo;
            this.Subject = subject;
            this.TemplateName = templateName;
            this.AttachFiles = attachFiles;
            this.Utm = utm;
        }

        /// <summary>
        /// List of e-mail body parts, with user-provided MIME types (text/html, text/plain etc)
        /// </summary>
        /// <value>List of e-mail body parts, with user-provided MIME types (text/html, text/plain etc)</value>
        [DataMember(Name = "Body", EmitDefaultValue = false)]
        public List<BodyPart> Body { get; set; }

        /// <summary>
        /// A key-value collection of custom merge fields, shared between recipients. Should be used in e-mail body like so: {firstname}, {lastname} etc.
        /// </summary>
        /// <value>A key-value collection of custom merge fields, shared between recipients. Should be used in e-mail body like so: {firstname}, {lastname} etc.</value>
        /// <example>{&quot;city&quot;:&quot;New York&quot;,&quot;age&quot;:&quot;34&quot;}</example>
        [DataMember(Name = "Merge", EmitDefaultValue = false)]
        public Dictionary<string, string> Merge { get; set; }

        /// <summary>
        /// Attachments provided by sending binary data
        /// </summary>
        /// <value>Attachments provided by sending binary data</value>
        [DataMember(Name = "Attachments", EmitDefaultValue = false)]
        public List<MessageAttachment> Attachments { get; set; }

        /// <summary>
        /// A key-value collection of custom e-mail headers.
        /// </summary>
        /// <value>A key-value collection of custom e-mail headers.</value>
        /// <example>{&quot;city&quot;:&quot;New York&quot;,&quot;age&quot;:&quot;34&quot;}</example>
        [DataMember(Name = "Headers", EmitDefaultValue = false)]
        public Dictionary<string, string> Headers { get; set; }

        /// <summary>
        /// Postback header.
        /// </summary>
        /// <value>Postback header.</value>
        [DataMember(Name = "Postback", EmitDefaultValue = false)]
        public string Postback { get; set; }

        /// <summary>
        /// E-mail with an optional name to be used as the envelope from address (e.g.: John Doe &lt;email@domain.com&gt;)
        /// </summary>
        /// <value>E-mail with an optional name to be used as the envelope from address (e.g.: John Doe &lt;email@domain.com&gt;)</value>
        /// <example>John Doe &lt;email@domain.com&gt;</example>
        [DataMember(Name = "EnvelopeFrom", EmitDefaultValue = false)]
        public string EnvelopeFrom { get; set; }

        /// <summary>
        /// Your e-mail with an optional name (e.g.: John Doe &lt;email@domain.com&gt;)
        /// </summary>
        /// <value>Your e-mail with an optional name (e.g.: John Doe &lt;email@domain.com&gt;)</value>
        /// <example>John Doe &lt;email@domain.com&gt;</example>
        [DataMember(Name = "From", IsRequired = true, EmitDefaultValue = true)]
        public string From { get; set; }

        /// <summary>
        /// To what address should the recipients reply to (e.g. John Doe &lt;email@domain.com&gt;)
        /// </summary>
        /// <value>To what address should the recipients reply to (e.g. John Doe &lt;email@domain.com&gt;)</value>
        /// <example>John Doe &lt;email@domain.com&gt;</example>
        [DataMember(Name = "ReplyTo", EmitDefaultValue = false)]
        public string ReplyTo { get; set; }

        /// <summary>
        /// Default subject of email.
        /// </summary>
        /// <value>Default subject of email.</value>
        /// <example>Hello!</example>
        [DataMember(Name = "Subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// Name of template.
        /// </summary>
        /// <value>Name of template.</value>
        /// <example>Template01</example>
        [DataMember(Name = "TemplateName", EmitDefaultValue = false)]
        public string TemplateName { get; set; }

        /// <summary>
        /// Names of previously uploaded files that should be sent as downloadable attachments
        /// </summary>
        /// <value>Names of previously uploaded files that should be sent as downloadable attachments</value>
        /// <example>[&quot;preuploaded.jpg&quot;]</example>
        [DataMember(Name = "AttachFiles", EmitDefaultValue = false)]
        public List<string> AttachFiles { get; set; }

        /// <summary>
        /// Gets or Sets Utm
        /// </summary>
        [DataMember(Name = "Utm", EmitDefaultValue = false)]
        public Utm Utm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailContent {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Merge: ").Append(Merge).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  Postback: ").Append(Postback).Append("\n");
            sb.Append("  EnvelopeFrom: ").Append(EnvelopeFrom).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  TemplateName: ").Append(TemplateName).Append("\n");
            sb.Append("  AttachFiles: ").Append(AttachFiles).Append("\n");
            sb.Append("  Utm: ").Append(Utm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
