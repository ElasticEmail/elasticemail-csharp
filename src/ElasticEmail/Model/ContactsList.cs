/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ElasticEmail.Client.OpenAPIDateConverter;

namespace ElasticEmail.Model
{
    /// <summary>
    /// List of Lists, with detailed data about its contents.
    /// </summary>
    [DataContract(Name = "ContactsList")]
    public partial class ContactsList : IEquatable<ContactsList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsList" /> class.
        /// </summary>
        /// <param name="listName">Name of your list..</param>
        /// <param name="publicListID">ID code of list. Please note that this is different from the listid field..</param>
        /// <param name="dateAdded">Date of creation in YYYY-MM-DDThh:ii:ss format.</param>
        /// <param name="allowUnsubscribe">True: Allow unsubscribing from this list. Otherwise, false.</param>
        public ContactsList(string listName = default(string), string publicListID = default(string), DateTime dateAdded = default(DateTime), bool allowUnsubscribe = default(bool))
        {
            this.ListName = listName;
            this.PublicListID = publicListID;
            this.DateAdded = dateAdded;
            this.AllowUnsubscribe = allowUnsubscribe;
        }

        /// <summary>
        /// Name of your list.
        /// </summary>
        /// <value>Name of your list.</value>
        [DataMember(Name = "ListName", EmitDefaultValue = false)]
        public string ListName { get; set; }

        /// <summary>
        /// ID code of list. Please note that this is different from the listid field.
        /// </summary>
        /// <value>ID code of list. Please note that this is different from the listid field.</value>
        [DataMember(Name = "PublicListID", EmitDefaultValue = true)]
        public string PublicListID { get; set; }

        /// <summary>
        /// Date of creation in YYYY-MM-DDThh:ii:ss format
        /// </summary>
        /// <value>Date of creation in YYYY-MM-DDThh:ii:ss format</value>
        [DataMember(Name = "DateAdded", EmitDefaultValue = false)]
        public DateTime DateAdded { get; set; }

        /// <summary>
        /// True: Allow unsubscribing from this list. Otherwise, false
        /// </summary>
        /// <value>True: Allow unsubscribing from this list. Otherwise, false</value>
        [DataMember(Name = "AllowUnsubscribe", EmitDefaultValue = true)]
        public bool AllowUnsubscribe { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactsList {\n");
            sb.Append("  ListName: ").Append(ListName).Append("\n");
            sb.Append("  PublicListID: ").Append(PublicListID).Append("\n");
            sb.Append("  DateAdded: ").Append(DateAdded).Append("\n");
            sb.Append("  AllowUnsubscribe: ").Append(AllowUnsubscribe).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContactsList);
        }

        /// <summary>
        /// Returns true if ContactsList instances are equal
        /// </summary>
        /// <param name="input">Instance of ContactsList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactsList input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ListName == input.ListName ||
                    (this.ListName != null &&
                    this.ListName.Equals(input.ListName))
                ) && 
                (
                    this.PublicListID == input.PublicListID ||
                    (this.PublicListID != null &&
                    this.PublicListID.Equals(input.PublicListID))
                ) && 
                (
                    this.DateAdded == input.DateAdded ||
                    (this.DateAdded != null &&
                    this.DateAdded.Equals(input.DateAdded))
                ) && 
                (
                    this.AllowUnsubscribe == input.AllowUnsubscribe ||
                    this.AllowUnsubscribe.Equals(input.AllowUnsubscribe)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ListName != null)
                {
                    hashCode = (hashCode * 59) + this.ListName.GetHashCode();
                }
                if (this.PublicListID != null)
                {
                    hashCode = (hashCode * 59) + this.PublicListID.GetHashCode();
                }
                if (this.DateAdded != null)
                {
                    hashCode = (hashCode * 59) + this.DateAdded.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowUnsubscribe.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
