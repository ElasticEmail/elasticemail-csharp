/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ElasticEmail.Client.OpenAPIDateConverter;

namespace ElasticEmail.Model
{
    /// <summary>
    /// Defines ContactHistEventType
    /// </summary>
    
    [JsonConverter(typeof(StringEnumConverter))]
    
    public enum ContactHistEventType
    {
        /// <summary>
        /// Enum Opened for value: Opened
        /// </summary>
        [EnumMember(Value = "Opened")]
        Opened = 1,

        /// <summary>
        /// Enum Clicked for value: Clicked
        /// </summary>
        [EnumMember(Value = "Clicked")]
        Clicked = 2,

        /// <summary>
        /// Enum Bounced for value: Bounced
        /// </summary>
        [EnumMember(Value = "Bounced")]
        Bounced = 3,

        /// <summary>
        /// Enum Unsubscribed for value: Unsubscribed
        /// </summary>
        [EnumMember(Value = "Unsubscribed")]
        Unsubscribed = 4,

        /// <summary>
        /// Enum Complained for value: Complained
        /// </summary>
        [EnumMember(Value = "Complained")]
        Complained = 5,

        /// <summary>
        /// Enum Activated for value: Activated
        /// </summary>
        [EnumMember(Value = "Activated")]
        Activated = 6,

        /// <summary>
        /// Enum TransactionalUnsubscribed for value: TransactionalUnsubscribed
        /// </summary>
        [EnumMember(Value = "TransactionalUnsubscribed")]
        TransactionalUnsubscribed = 7,

        /// <summary>
        /// Enum ManualStatusChange for value: ManualStatusChange
        /// </summary>
        [EnumMember(Value = "ManualStatusChange")]
        ManualStatusChange = 8,

        /// <summary>
        /// Enum ManualConsentTrackingChange for value: ManualConsentTrackingChange
        /// </summary>
        [EnumMember(Value = "ManualConsentTrackingChange")]
        ManualConsentTrackingChange = 9,

        /// <summary>
        /// Enum ActivationSent for value: ActivationSent
        /// </summary>
        [EnumMember(Value = "ActivationSent")]
        ActivationSent = 10,

        /// <summary>
        /// Enum JourneyStarted for value: JourneyStarted
        /// </summary>
        [EnumMember(Value = "JourneyStarted")]
        JourneyStarted = 11,

        /// <summary>
        /// Enum JourneyStepProcessed for value: JourneyStepProcessed
        /// </summary>
        [EnumMember(Value = "JourneyStepProcessed")]
        JourneyStepProcessed = 12,

        /// <summary>
        /// Enum JourneyFinished for value: JourneyFinished
        /// </summary>
        [EnumMember(Value = "JourneyFinished")]
        JourneyFinished = 13,

        /// <summary>
        /// Enum Deleted for value: Deleted
        /// </summary>
        [EnumMember(Value = "Deleted")]
        Deleted = 14

    }

}
