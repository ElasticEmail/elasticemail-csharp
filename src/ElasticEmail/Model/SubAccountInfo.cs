/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ElasticEmail.Client.OpenAPIDateConverter;

namespace ElasticEmail.Model
{
    /// <summary>
    /// Detailed information about SubAccount.
    /// </summary>
    [DataContract(Name = "SubAccountInfo")]
    public partial class SubAccountInfo : IEquatable<SubAccountInfo>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public AccountStatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccountInfo" /> class.
        /// </summary>
        /// <param name="publicAccountID">Public key for limited access to your Account such as contact/add so you can use it safely on public websites..</param>
        /// <param name="email">Proper email address..</param>
        /// <param name="settings">settings.</param>
        /// <param name="lastActivity">Date of last activity on Account.</param>
        /// <param name="emailCredits">Amount of email credits.</param>
        /// <param name="totalEmailsSent">Amount of emails sent from this Account.</param>
        /// <param name="reputation">Numeric reputation.</param>
        /// <param name="status">status.</param>
        /// <param name="contactsCount">How many contacts this SubAccount has stored.</param>
        public SubAccountInfo(string publicAccountID = default(string), string email = default(string), SubaccountSettingsInfo settings = default(SubaccountSettingsInfo), DateTime lastActivity = default(DateTime), int emailCredits = default(int), long totalEmailsSent = default(long), double reputation = default(double), AccountStatusEnum? status = default(AccountStatusEnum?), int contactsCount = default(int))
        {
            this.PublicAccountID = publicAccountID;
            this.Email = email;
            this.Settings = settings;
            this.LastActivity = lastActivity;
            this.EmailCredits = emailCredits;
            this.TotalEmailsSent = totalEmailsSent;
            this.Reputation = reputation;
            this.Status = status;
            this.ContactsCount = contactsCount;
        }

        /// <summary>
        /// Public key for limited access to your Account such as contact/add so you can use it safely on public websites.
        /// </summary>
        /// <value>Public key for limited access to your Account such as contact/add so you can use it safely on public websites.</value>
        [DataMember(Name = "PublicAccountID", EmitDefaultValue = false)]
        public string PublicAccountID { get; set; }

        /// <summary>
        /// Proper email address.
        /// </summary>
        /// <value>Proper email address.</value>
        [DataMember(Name = "Email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name = "Settings", EmitDefaultValue = false)]
        public SubaccountSettingsInfo Settings { get; set; }

        /// <summary>
        /// Date of last activity on Account
        /// </summary>
        /// <value>Date of last activity on Account</value>
        [DataMember(Name = "LastActivity", EmitDefaultValue = false)]
        public DateTime LastActivity { get; set; }

        /// <summary>
        /// Amount of email credits
        /// </summary>
        /// <value>Amount of email credits</value>
        [DataMember(Name = "EmailCredits", EmitDefaultValue = false)]
        public int EmailCredits { get; set; }

        /// <summary>
        /// Amount of emails sent from this Account
        /// </summary>
        /// <value>Amount of emails sent from this Account</value>
        [DataMember(Name = "TotalEmailsSent", EmitDefaultValue = false)]
        public long TotalEmailsSent { get; set; }

        /// <summary>
        /// Numeric reputation
        /// </summary>
        /// <value>Numeric reputation</value>
        [DataMember(Name = "Reputation", EmitDefaultValue = false)]
        public double Reputation { get; set; }

        /// <summary>
        /// How many contacts this SubAccount has stored
        /// </summary>
        /// <value>How many contacts this SubAccount has stored</value>
        [DataMember(Name = "ContactsCount", EmitDefaultValue = false)]
        public int ContactsCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubAccountInfo {\n");
            sb.Append("  PublicAccountID: ").Append(PublicAccountID).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  LastActivity: ").Append(LastActivity).Append("\n");
            sb.Append("  EmailCredits: ").Append(EmailCredits).Append("\n");
            sb.Append("  TotalEmailsSent: ").Append(TotalEmailsSent).Append("\n");
            sb.Append("  Reputation: ").Append(Reputation).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ContactsCount: ").Append(ContactsCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubAccountInfo);
        }

        /// <summary>
        /// Returns true if SubAccountInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SubAccountInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubAccountInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PublicAccountID == input.PublicAccountID ||
                    (this.PublicAccountID != null &&
                    this.PublicAccountID.Equals(input.PublicAccountID))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.Equals(input.Settings))
                ) && 
                (
                    this.LastActivity == input.LastActivity ||
                    (this.LastActivity != null &&
                    this.LastActivity.Equals(input.LastActivity))
                ) && 
                (
                    this.EmailCredits == input.EmailCredits ||
                    this.EmailCredits.Equals(input.EmailCredits)
                ) && 
                (
                    this.TotalEmailsSent == input.TotalEmailsSent ||
                    this.TotalEmailsSent.Equals(input.TotalEmailsSent)
                ) && 
                (
                    this.Reputation == input.Reputation ||
                    this.Reputation.Equals(input.Reputation)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.ContactsCount == input.ContactsCount ||
                    this.ContactsCount.Equals(input.ContactsCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PublicAccountID != null)
                {
                    hashCode = (hashCode * 59) + this.PublicAccountID.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Settings != null)
                {
                    hashCode = (hashCode * 59) + this.Settings.GetHashCode();
                }
                if (this.LastActivity != null)
                {
                    hashCode = (hashCode * 59) + this.LastActivity.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EmailCredits.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalEmailsSent.GetHashCode();
                hashCode = (hashCode * 59) + this.Reputation.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.ContactsCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
