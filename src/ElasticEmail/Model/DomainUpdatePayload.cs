/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ElasticEmail.Client.OpenAPIDateConverter;

namespace ElasticEmail.Model
{
    /// <summary>
    /// DomainUpdatePayload
    /// </summary>
    [DataContract(Name = "DomainUpdatePayload")]
    public partial class DomainUpdatePayload : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets CertificateStatus
        /// </summary>
        [DataMember(Name = "CertificateStatus", EmitDefaultValue = false)]
        public CertificateValidationStatus? CertificateStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainUpdatePayload" /> class.
        /// </summary>
        /// <param name="certificateStatus">certificateStatus.</param>
        /// <param name="vERP">vERP.</param>
        /// <param name="customBouncesDomain">customBouncesDomain.</param>
        /// <param name="isCustomBouncesDomainDefault">isCustomBouncesDomainDefault.</param>
        public DomainUpdatePayload(CertificateValidationStatus? certificateStatus = default(CertificateValidationStatus?), bool vERP = default(bool), string customBouncesDomain = default(string), bool isCustomBouncesDomainDefault = default(bool))
        {
            this.CertificateStatus = certificateStatus;
            this.VERP = vERP;
            this.CustomBouncesDomain = customBouncesDomain;
            this.IsCustomBouncesDomainDefault = isCustomBouncesDomainDefault;
        }

        /// <summary>
        /// Gets or Sets VERP
        /// </summary>
        [DataMember(Name = "VERP", EmitDefaultValue = true)]
        public bool VERP { get; set; }

        /// <summary>
        /// Gets or Sets CustomBouncesDomain
        /// </summary>
        [DataMember(Name = "CustomBouncesDomain", EmitDefaultValue = false)]
        public string CustomBouncesDomain { get; set; }

        /// <summary>
        /// Gets or Sets IsCustomBouncesDomainDefault
        /// </summary>
        [DataMember(Name = "IsCustomBouncesDomainDefault", EmitDefaultValue = true)]
        public bool IsCustomBouncesDomainDefault { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DomainUpdatePayload {\n");
            sb.Append("  CertificateStatus: ").Append(CertificateStatus).Append("\n");
            sb.Append("  VERP: ").Append(VERP).Append("\n");
            sb.Append("  CustomBouncesDomain: ").Append(CustomBouncesDomain).Append("\n");
            sb.Append("  IsCustomBouncesDomainDefault: ").Append(IsCustomBouncesDomainDefault).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
