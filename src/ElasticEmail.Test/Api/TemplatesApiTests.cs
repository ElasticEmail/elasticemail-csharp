/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ElasticEmail.Client;
using ElasticEmail.Api;
// uncomment below to import models
//using ElasticEmail.Model;

namespace ElasticEmail.Test.Api
{
    /// <summary>
    ///  Class for testing TemplatesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TemplatesApiTests : IDisposable
    {
        private TemplatesApi instance;

        public TemplatesApiTests()
        {
            instance = new TemplatesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TemplatesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TemplatesApi
            //Assert.IsType<TemplatesApi>(instance);
        }

        /// <summary>
        /// Test TemplatesByNameDelete
        /// </summary>
        [Fact]
        public void TemplatesByNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.TemplatesByNameDelete(name);
        }

        /// <summary>
        /// Test TemplatesByNameGet
        /// </summary>
        [Fact]
        public void TemplatesByNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.TemplatesByNameGet(name);
            //Assert.IsType<Template>(response);
        }

        /// <summary>
        /// Test TemplatesByNamePut
        /// </summary>
        [Fact]
        public void TemplatesByNamePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //TemplatePayload templatePayload = null;
            //var response = instance.TemplatesByNamePut(name, templatePayload);
            //Assert.IsType<Template>(response);
        }

        /// <summary>
        /// Test TemplatesGet
        /// </summary>
        [Fact]
        public void TemplatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<TemplateScopeType> scopeType = null;
            //List<TemplateType> templateTypes = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.TemplatesGet(scopeType, templateTypes, limit, offset);
            //Assert.IsType<List<Template>>(response);
        }

        /// <summary>
        /// Test TemplatesPost
        /// </summary>
        [Fact]
        public void TemplatesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TemplatePayload templatePayload = null;
            //var response = instance.TemplatesPost(templatePayload);
            //Assert.IsType<Template>(response);
        }
    }
}
