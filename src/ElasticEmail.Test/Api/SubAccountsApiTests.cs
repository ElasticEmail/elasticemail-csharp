/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ElasticEmail.Client;
using ElasticEmail.Api;
// uncomment below to import models
//using ElasticEmail.Model;

namespace ElasticEmail.Test.Api
{
    /// <summary>
    ///  Class for testing SubAccountsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SubAccountsApiTests : IDisposable
    {
        private SubAccountsApi instance;

        public SubAccountsApiTests()
        {
            instance = new SubAccountsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SubAccountsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SubAccountsApi
            //Assert.IsType<SubAccountsApi>(instance);
        }

        /// <summary>
        /// Test SubaccountsByEmailCreditsPatch
        /// </summary>
        [Fact]
        public void SubaccountsByEmailCreditsPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //SubaccountEmailCreditsPayload subaccountEmailCreditsPayload = null;
            //instance.SubaccountsByEmailCreditsPatch(email, subaccountEmailCreditsPayload);
        }

        /// <summary>
        /// Test SubaccountsByEmailDelete
        /// </summary>
        [Fact]
        public void SubaccountsByEmailDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //instance.SubaccountsByEmailDelete(email);
        }

        /// <summary>
        /// Test SubaccountsByEmailGet
        /// </summary>
        [Fact]
        public void SubaccountsByEmailGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //var response = instance.SubaccountsByEmailGet(email);
            //Assert.IsType<SubAccountInfo>(response);
        }

        /// <summary>
        /// Test SubaccountsByEmailSettingsEmailPut
        /// </summary>
        [Fact]
        public void SubaccountsByEmailSettingsEmailPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //SubaccountEmailSettings subaccountEmailSettings = null;
            //var response = instance.SubaccountsByEmailSettingsEmailPut(email, subaccountEmailSettings);
            //Assert.IsType<SubaccountEmailSettings>(response);
        }

        /// <summary>
        /// Test SubaccountsGet
        /// </summary>
        [Fact]
        public void SubaccountsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //int? offset = null;
            //var response = instance.SubaccountsGet(limit, offset);
            //Assert.IsType<List<SubAccountInfo>>(response);
        }

        /// <summary>
        /// Test SubaccountsPost
        /// </summary>
        [Fact]
        public void SubaccountsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubaccountPayload subaccountPayload = null;
            //var response = instance.SubaccountsPost(subaccountPayload);
            //Assert.IsType<SubAccountInfo>(response);
        }
    }
}
