/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ElasticEmail.Client;
using ElasticEmail.Api;
// uncomment below to import models
//using ElasticEmail.Model;

namespace ElasticEmail.Test.Api
{
    /// <summary>
    ///  Class for testing SecurityApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SecurityApiTests : IDisposable
    {
        private SecurityApi instance;

        public SecurityApiTests()
        {
            instance = new SecurityApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SecurityApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SecurityApi
            //Assert.IsType<SecurityApi>(instance);
        }

        /// <summary>
        /// Test SecurityApikeysByNameDelete
        /// </summary>
        [Fact]
        public void SecurityApikeysByNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string subaccount = null;
            //instance.SecurityApikeysByNameDelete(name, subaccount);
        }

        /// <summary>
        /// Test SecurityApikeysByNameGet
        /// </summary>
        [Fact]
        public void SecurityApikeysByNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string subaccount = null;
            //var response = instance.SecurityApikeysByNameGet(name, subaccount);
            //Assert.IsType<ApiKey>(response);
        }

        /// <summary>
        /// Test SecurityApikeysByNamePut
        /// </summary>
        [Fact]
        public void SecurityApikeysByNamePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ApiKeyPayload apiKeyPayload = null;
            //var response = instance.SecurityApikeysByNamePut(name, apiKeyPayload);
            //Assert.IsType<ApiKey>(response);
        }

        /// <summary>
        /// Test SecurityApikeysGet
        /// </summary>
        [Fact]
        public void SecurityApikeysGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subaccount = null;
            //var response = instance.SecurityApikeysGet(subaccount);
            //Assert.IsType<List<ApiKey>>(response);
        }

        /// <summary>
        /// Test SecurityApikeysPost
        /// </summary>
        [Fact]
        public void SecurityApikeysPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ApiKeyPayload apiKeyPayload = null;
            //var response = instance.SecurityApikeysPost(apiKeyPayload);
            //Assert.IsType<NewApiKey>(response);
        }

        /// <summary>
        /// Test SecuritySmtpByNameDelete
        /// </summary>
        [Fact]
        public void SecuritySmtpByNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string subaccount = null;
            //instance.SecuritySmtpByNameDelete(name, subaccount);
        }

        /// <summary>
        /// Test SecuritySmtpByNameGet
        /// </summary>
        [Fact]
        public void SecuritySmtpByNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string subaccount = null;
            //var response = instance.SecuritySmtpByNameGet(name, subaccount);
            //Assert.IsType<SmtpCredentials>(response);
        }

        /// <summary>
        /// Test SecuritySmtpByNamePut
        /// </summary>
        [Fact]
        public void SecuritySmtpByNamePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //SmtpCredentialsPayload smtpCredentialsPayload = null;
            //var response = instance.SecuritySmtpByNamePut(name, smtpCredentialsPayload);
            //Assert.IsType<SmtpCredentials>(response);
        }

        /// <summary>
        /// Test SecuritySmtpGet
        /// </summary>
        [Fact]
        public void SecuritySmtpGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subaccount = null;
            //var response = instance.SecuritySmtpGet(subaccount);
            //Assert.IsType<List<SmtpCredentials>>(response);
        }

        /// <summary>
        /// Test SecuritySmtpPost
        /// </summary>
        [Fact]
        public void SecuritySmtpPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SmtpCredentialsPayload smtpCredentialsPayload = null;
            //var response = instance.SecuritySmtpPost(smtpCredentialsPayload);
            //Assert.IsType<NewSmtpCredentials>(response);
        }
    }
}
