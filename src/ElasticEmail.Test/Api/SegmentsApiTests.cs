/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ElasticEmail.Client;
using ElasticEmail.Api;
// uncomment below to import models
//using ElasticEmail.Model;

namespace ElasticEmail.Test.Api
{
    /// <summary>
    ///  Class for testing SegmentsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SegmentsApiTests : IDisposable
    {
        private SegmentsApi instance;

        public SegmentsApiTests()
        {
            instance = new SegmentsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SegmentsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SegmentsApi
            //Assert.IsType<SegmentsApi>(instance);
        }

        /// <summary>
        /// Test SegmentsByNameDelete
        /// </summary>
        [Fact]
        public void SegmentsByNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.SegmentsByNameDelete(name);
        }

        /// <summary>
        /// Test SegmentsByNameGet
        /// </summary>
        [Fact]
        public void SegmentsByNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.SegmentsByNameGet(name);
            //Assert.IsType<Segment>(response);
        }

        /// <summary>
        /// Test SegmentsByNamePut
        /// </summary>
        [Fact]
        public void SegmentsByNamePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //SegmentPayload segmentPayload = null;
            //var response = instance.SegmentsByNamePut(name, segmentPayload);
            //Assert.IsType<Segment>(response);
        }

        /// <summary>
        /// Test SegmentsGet
        /// </summary>
        [Fact]
        public void SegmentsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //int? offset = null;
            //var response = instance.SegmentsGet(limit, offset);
            //Assert.IsType<List<Segment>>(response);
        }

        /// <summary>
        /// Test SegmentsPost
        /// </summary>
        [Fact]
        public void SegmentsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SegmentPayload segmentPayload = null;
            //var response = instance.SegmentsPost(segmentPayload);
            //Assert.IsType<Segment>(response);
        }
    }
}
