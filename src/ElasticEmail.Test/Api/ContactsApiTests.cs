/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ElasticEmail.Client;
using ElasticEmail.Api;
// uncomment below to import models
//using ElasticEmail.Model;

namespace ElasticEmail.Test.Api
{
    /// <summary>
    ///  Class for testing ContactsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ContactsApiTests : IDisposable
    {
        private ContactsApi instance;

        public ContactsApiTests()
        {
            instance = new ContactsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ContactsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ContactsApi
            //Assert.IsType<ContactsApi>(instance);
        }

        /// <summary>
        /// Test ContactsByEmailDelete
        /// </summary>
        [Fact]
        public void ContactsByEmailDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //instance.ContactsByEmailDelete(email);
        }

        /// <summary>
        /// Test ContactsByEmailGet
        /// </summary>
        [Fact]
        public void ContactsByEmailGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //var response = instance.ContactsByEmailGet(email);
            //Assert.IsType<Contact>(response);
        }

        /// <summary>
        /// Test ContactsByEmailHistoryGet
        /// </summary>
        [Fact]
        public void ContactsByEmailHistoryGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.ContactsByEmailHistoryGet(email, limit, offset);
            //Assert.IsType<List<ContactHistory>>(response);
        }

        /// <summary>
        /// Test ContactsByEmailPut
        /// </summary>
        [Fact]
        public void ContactsByEmailPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //ContactUpdatePayload contactUpdatePayload = null;
            //var response = instance.ContactsByEmailPut(email, contactUpdatePayload);
            //Assert.IsType<Contact>(response);
        }

        /// <summary>
        /// Test ContactsDeletePost
        /// </summary>
        [Fact]
        public void ContactsDeletePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EmailsPayload emailsPayload = null;
            //instance.ContactsDeletePost(emailsPayload);
        }

        /// <summary>
        /// Test ContactsExportByIdStatusGet
        /// </summary>
        [Fact]
        public void ContactsExportByIdStatusGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ContactsExportByIdStatusGet(id);
            //Assert.IsType<ExportStatus>(response);
        }

        /// <summary>
        /// Test ContactsExportPost
        /// </summary>
        [Fact]
        public void ContactsExportPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ExportFileFormats? fileFormat = null;
            //string rule = null;
            //List<string> emails = null;
            //CompressionFormat? compressionFormat = null;
            //string fileName = null;
            //var response = instance.ContactsExportPost(fileFormat, rule, emails, compressionFormat, fileName);
            //Assert.IsType<ExportLink>(response);
        }

        /// <summary>
        /// Test ContactsGet
        /// </summary>
        [Fact]
        public void ContactsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //int? offset = null;
            //var response = instance.ContactsGet(limit, offset);
            //Assert.IsType<List<Contact>>(response);
        }

        /// <summary>
        /// Test ContactsImportPost
        /// </summary>
        [Fact]
        public void ContactsImportPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string listName = null;
            //string encodingName = null;
            //System.IO.Stream file = null;
            //instance.ContactsImportPost(listName, encodingName, file);
        }

        /// <summary>
        /// Test ContactsPost
        /// </summary>
        [Fact]
        public void ContactsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<ContactPayload> contactPayload = null;
            //List<string> listnames = null;
            //var response = instance.ContactsPost(contactPayload, listnames);
            //Assert.IsType<List<Contact>>(response);
        }
    }
}
